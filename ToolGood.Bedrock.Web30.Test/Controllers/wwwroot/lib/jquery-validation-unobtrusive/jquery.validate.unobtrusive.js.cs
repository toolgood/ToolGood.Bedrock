using Microsoft.AspNetCore.Mvc;
using System;
namespace ToolGood.WwwRoot.Test
{
    public partial class WwwRootController : Controller
    {
        [HttpGet("lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js")]
        public IActionResult lib_jquery_validation_unobtrusive_jquery_validate_unobtrusive_js()
        {
            if (Request.Headers["If-None-Match"]  == "D8FB3A963112BE9510687BA1BDC724B2") {
                Response.Headers["Expires"] = DateTime.Now.AddYears(100).ToString("r");
                return StatusCode(304);
            }
            Response.Headers["Cache-Control"] = "max-age=315360000";
            Response.Headers["Etag"] = "D8FB3A963112BE9510687BA1BDC724B2";
            Response.Headers["Date"] = DateTime.Now.ToString("r");
            Response.Headers["Expires"] = DateTime.Now.AddYears(100).ToString("r");
            const string s = "";
            var bytes = Convert.FromBase64String(s);
            return File(bytes, "text/javascript");
        }
    }
}