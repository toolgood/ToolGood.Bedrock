using Microsoft.AspNetCore.Mvc;
using System;
namespace ToolGood.WwwRoot.Test
{
    public partial class WwwRootController : Controller
    {
        [HttpGet("lib/bootstrap/dist/js/bootstrap.bundle.min.js.map")]
        public IActionResult lib_bootstrap_dist_js_bootstrap_bundle_min_js_map()
        {
            if (Request.Headers["If-None-Match"]  == "45E94ECC39062646EE2F86D8B550E20F") {
                Response.Headers["Expires"] = DateTime.Now.AddYears(100).ToString("r");
                return StatusCode(304);
            }
            Response.Headers["Cache-Control"] = "max-age=315360000";
            Response.Headers["Etag"] = "45E94ECC39062646EE2F86D8B550E20F";
            Response.Headers["Date"] = DateTime.Now.ToString("r");
            Response.Headers["Expires"] = DateTime.Now.AddYears(100).ToString("r");
            const string s = "eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwiLi4vLi4vanMvc3JjL3V0aWwuanMiLCIuLi8uLi9qcy9zcmMvYWxlcnQuanMiLCIuLi8uLi9qcy9zcmMvYnV0dG9uLmpzIiwiLi4vLi4vanMvc3JjL2Nhcm91c2VsLmpzIiwiLi4vLi4vanMvc3JjL2NvbGxhcHNlLmpzIiwiLi4vLi4vanMvc3JjL2Ryb3Bkb3duLmpzIiwiLi4vLi4vanMvc3JjL21vZGFsLmpzIiwiLi4vLi4vanMvc3JjL3Rvb2x0aXAuanMiLCIuLi8uLi9qcy9zcmMvcG9wb3Zlci5qcyIsIi4uLy4uL2pzL3NyYy9zY3JvbGxzcHkuanMiLCIuLi8uLi9qcy9zcmMvdGFiLmpzIiwiLi4vLi4vanMvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIiQiLCJOQU1FIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJFdmVudCIsIkNsYXNzTmFtZSIsIkFsZXJ0IiwiREFUQV9BUElfS0VZIiwiU2VsZWN0b3IiLCJCdXR0b24iLCJEZWZhdWx0IiwiRGVmYXVsdFR5cGUiLCJEaXJlY3Rpb24iLCJDYXJvdXNlbCIsIkRpbWVuc2lvbiIsIkNvbGxhcHNlIiwiVXRpbCIsIlRSQU5TSVRJT05fRU5EIiwidHJhbnNpdGlvbkVuZEVtdWxhdG9yIiwiZHVyYXRpb24iLCJfdGhpcyIsInRoaXMiLCJjYWxsZWQiLCJvbmUiLCJzZXRUaW1lb3V0IiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJnZXRVSUQiLCJwcmVmaXgiLCJNYXRoIiwicmFuZG9tIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJlbGVtZW50Iiwic2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yIiwiZXJyIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJjc3MiLCJwYXJzZUZsb2F0Iiwic3BsaXQiLCJyZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJ0cmlnZ2VyIiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwiQm9vbGVhbiIsImlzRWxlbWVudCIsIm9iaiIsIm5vZGVUeXBlIiwidHlwZUNoZWNrQ29uZmlnIiwiY29tcG9uZW50TmFtZSIsImNvbmZpZyIsImNvbmZpZ1R5cGVzIiwicHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJleHBlY3RlZFR5cGVzIiwidmFsdWUiLCJ2YWx1ZVR5cGUiLCJ0b1N0cmluZyIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJSZWdFeHAiLCJ0ZXN0IiwiRXJyb3IiLCJ0b1VwcGVyQ2FzZSIsImZuIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJldmVudCIsInNwZWNpYWwiLCJiaW5kVHlwZSIsImRlbGVnYXRlVHlwZSIsImhhbmRsZSIsInRhcmdldCIsImlzIiwiaGFuZGxlT2JqIiwiaGFuZGxlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIl9lbGVtZW50IiwiX3Byb3RvIiwiY2xvc2UiLCJyb290RWxlbWVudCIsIl9nZXRSb290RWxlbWVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsInJlbW92ZURhdGEiLCJwYXJlbnQiLCJjbG9zZXN0IiwiY2xvc2VFdmVudCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJfZGVzdHJveUVsZW1lbnQiLCJkZXRhY2giLCJyZW1vdmUiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsIiRlbGVtZW50IiwiZGF0YSIsIl9oYW5kbGVEaXNtaXNzIiwiYWxlcnRJbnN0YW5jZSIsInByZXZlbnREZWZhdWx0IiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwiZ2V0Iiwib24iLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidG9nZ2xlIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJpbnB1dCIsInR5cGUiLCJjaGVja2VkIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJhY3RpdmVFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiZm9jdXMiLCJzZXRBdHRyaWJ1dGUiLCJ0b2dnbGVDbGFzcyIsImJ1dHRvbiIsImludGVydmFsIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwid3JhcCIsIlNMSURFIiwiU0xJRCIsIktFWURPV04iLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRPVUNIRU5EIiwiTE9BRF9EQVRBX0FQSSIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwibmV4dCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImJpbmQiLCJ0byIsImluZGV4IiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwibGVuZ3RoIiwiZGlyZWN0aW9uIiwib2ZmIiwiX3RoaXMyIiwiX2tleWRvd24iLCJkb2N1bWVudEVsZW1lbnQiLCJjbGVhclRpbWVvdXQiLCJ0YWdOYW1lIiwid2hpY2giLCJwYXJlbnROb2RlIiwic2xpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5kZXhPZiIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXRlbUluZGV4IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwicmVsYXRlZFRhcmdldCIsImV2ZW50RGlyZWN0aW9uTmFtZSIsInRhcmdldEluZGV4IiwiZnJvbUluZGV4Iiwic2xpZGVFdmVudCIsImZyb20iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImluZGljYXRvcnMiLCJuZXh0SW5kaWNhdG9yIiwiY2hpbGRyZW4iLCJhZGRDbGFzcyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJfdGhpczMiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJzbGlkRXZlbnQiLCJhY3Rpb24iLCJUeXBlRXJyb3IiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsInNsaWRlSW5kZXgiLCJ3aW5kb3ciLCJjYXJvdXNlbHMiLCJpIiwibGVuIiwiJGNhcm91c2VsIiwiU0hPVyIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwibWFrZUFycmF5IiwiaWQiLCJ0b2dnbGVMaXN0IiwiZWxlbSIsImZpbHRlckVsZW1lbnQiLCJmaWx0ZXIiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJwdXNoIiwiX3BhcmVudCIsIl9nZXRQYXJlbnQiLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiaGlkZSIsInNob3ciLCJhY3RpdmVzIiwiYWN0aXZlc0RhdGEiLCJub3QiLCJzdGFydEV2ZW50IiwiZGltZW5zaW9uIiwiX2dldERpbWVuc2lvbiIsInN0eWxlIiwiYXR0ciIsInNldFRyYW5zaXRpb25pbmciLCJzY3JvbGxTaXplIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidHJpZ2dlckFycmF5TGVuZ3RoIiwiaXNUcmFuc2l0aW9uaW5nIiwianF1ZXJ5IiwiX2dldFRhcmdldEZyb21FbGVtZW50IiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiJHRoaXMiLCJjdXJyZW50VGFyZ2V0IiwiJHRyaWdnZXIiLCJzZWxlY3RvcnMiLCIkdGFyZ2V0IiwiaXNCcm93c2VyIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidGltZW91dER1cmF0aW9uIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZGVib3VuY2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJzY2hlZHVsZWQiLCJpc0Z1bmN0aW9uIiwiZnVuY3Rpb25Ub0NoZWNrIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFBhcmVudE5vZGUiLCJub2RlTmFtZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJib2R5Iiwib3duZXJEb2N1bWVudCIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJpc0lFIiwidmVyc2lvbiIsImdldE9mZnNldFBhcmVudCIsIm5vT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsIm5vZGUiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIm9yZGVyIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwic3RhcnQiLCJlbmQiLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwidW5kZWZpbmVkIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJtYXgiLCJnZXRXaW5kb3dTaXplcyIsImhlaWdodCIsIndpZHRoIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNvdXJjZSIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwicmlnaHQiLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwicmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJlIiwicmVzdWx0Iiwic2l6ZXMiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImhvcml6U2Nyb2xsYmFyIiwib2Zmc2V0V2lkdGgiLCJ2ZXJ0U2Nyb2xsYmFyIiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZWwiLCJnZXRCb3VuZGFyaWVzIiwicG9wcGVyIiwicmVmZXJlbmNlIiwicGFkZGluZyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllcyIsImV4Y2x1ZGVTY3JvbGwiLCJyZWxhdGl2ZU9mZnNldCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZSIsImJvdW5kYXJpZXNOb2RlIiwiaXNGaXhlZCIsIl9nZXRXaW5kb3dTaXplcyIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVmUmVjdCIsInJlY3RzIiwic29ydGVkQXJlYXMiLCJrZXlzIiwibWFwIiwiYXJlYSIsIl9yZWYiLCJzb3J0IiwiYSIsImIiLCJmaWx0ZXJlZEFyZWFzIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJzdGF0ZSIsImdldE91dGVyU2l6ZXMiLCJ4IiwibWFyZ2luQm90dG9tIiwieSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJoYXNoIiwicmVwbGFjZSIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJmaW5kIiwiYXJyIiwiY2hlY2siLCJBcnJheSIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJwcm9wIiwiZmluZEluZGV4IiwiY3VyIiwiZm9yRWFjaCIsImNvbnNvbGUiLCJ3YXJuIiwiZW5hYmxlZCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsIm5hbWUiLCJnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUiLCJwcmVmaXhlcyIsInVwcGVyUHJvcCIsImNoYXJBdCIsInRvQ2hlY2siLCJnZXRXaW5kb3ciLCJkZWZhdWx0VmlldyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJvcHRpb25zIiwidXBkYXRlQm91bmQiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc051bWVyaWMiLCJuIiwiaXNOYU4iLCJpc0Zpbml0ZSIsInNldFN0eWxlcyIsInVuaXQiLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJjb25jYXQiLCJyZXZlcnNlIiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJvZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsInRyaW0iLCJkaXZpZGVyIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0Iiwic2hpZnR2YXJpYXRpb24iLCJfZGF0YSRvZmZzZXRzIiwiaXNWZXJ0aWNhbCIsInNpZGUiLCJzaGlmdE9mZnNldHMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJpbnN0YW5jZSIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJ0cmFuc2Zvcm0iLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5IiwibWluIiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJhcnJvdyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJzaWRlQ2FwaXRhbGl6ZWQiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwicm91bmQiLCJmbGlwIiwiZmxpcHBlZCIsIm9yaWdpbmFsUGxhY2VtZW50IiwicGxhY2VtZW50T3Bwb3NpdGUiLCJmbGlwT3JkZXIiLCJiZWhhdmlvciIsInN0ZXAiLCJyZWZPZmZzZXRzIiwib3ZlcmxhcHNSZWYiLCJvdmVyZmxvd3NMZWZ0Iiwib3ZlcmZsb3dzUmlnaHQiLCJvdmVyZmxvd3NUb3AiLCJvdmVyZmxvd3NCb3R0b20iLCJvdmVyZmxvd3NCb3VuZGFyaWVzIiwiZmxpcHBlZFZhcmlhdGlvbiIsImZsaXBWYXJpYXRpb25zIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImJvdW5kIiwiYXR0cmlidXRlcyIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJwb3NpdGlvbiIsInByZWZpeGVkUHJvcGVydHkiLCJ3aWxsQ2hhbmdlIiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIngtcGxhY2VtZW50IiwiYXJyb3dTdHlsZXMiLCJhcHBseVN0eWxlIiwicmVtb3ZlQXR0cmlidXRlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiUG9wcGVyIiwiY2xhc3NDYWxsQ2hlY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJpc0Rlc3Ryb3llZCIsImlzQ3JlYXRlZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlQ2hpbGQiLCJVdGlscyIsImdsb2JhbCIsIlBvcHBlclV0aWxzIiwiUkVHRVhQX0tFWURPV04iLCJBdHRhY2htZW50TWFwIiwiRHJvcGRvd24iLCJNb2RhbCIsIkNMQVNTX1BSRUZJWCIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsIkhvdmVyU3RhdGUiLCJUcmlnZ2VyIiwiVG9vbHRpcCIsIlBvcG92ZXIiLCJPZmZzZXRNZXRob2QiLCJTY3JvbGxTcHkiLCJUYWIiLCJBUlJPV19VUF9LRVlDT0RFIiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJib3VuZGFyeSIsImRpc3BsYXkiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwic2hvd0V2ZW50IiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJub29wIiwiZGVzdHJveSIsInN0b3BQcm9wYWdhdGlvbiIsImNvbnN0cnVjdG9yIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsIm9mZnNldENvbmYiLCJfb2JqZWN0U3ByZWFkIiwicG9wcGVyQ29uZmlnIiwidG9nZ2xlcyIsImNvbnRleHQiLCJjbGlja0V2ZW50IiwiZHJvcGRvd25NZW51IiwiaGlkZUV2ZW50IiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsIml0ZW1zIiwiYmFja2Ryb3AiLCJGT0NVU0lOIiwiUkVTSVpFIiwiQ0xJQ0tfRElTTUlTUyIsIktFWURPV05fRElTTUlTUyIsIk1PVVNFVVBfRElTTUlTUyIsIk1PVVNFRE9XTl9ESVNNSVNTIiwiX2RpYWxvZyIsIl9iYWNrZHJvcCIsIl9pc1Nob3duIiwiX2lzQm9keU92ZXJmbG93aW5nIiwiX2lnbm9yZUJhY2tkcm9wQ2xpY2siLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJ0cmFuc2l0aW9uIiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIkVMRU1FTlRfTk9ERSIsImFwcGVuZENoaWxkIiwiX2VuZm9yY2VGb2N1cyIsInNob3duRXZlbnQiLCJ0cmFuc2l0aW9uQ29tcGxldGUiLCJfdGhpczQiLCJoYXMiLCJfdGhpczUiLCJfdGhpczYiLCJfdGhpczciLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsIl90aGlzOCIsImFuaW1hdGUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiYWRkIiwiYXBwZW5kVG8iLCJiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsImNhbGxiYWNrUmVtb3ZlIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJfdGhpczkiLCJmaXhlZENvbnRlbnQiLCJzdGlja3lDb250ZW50IiwiYWN0dWFsUGFkZGluZyIsImNhbGN1bGF0ZWRQYWRkaW5nIiwiYWN0dWFsTWFyZ2luIiwiY2FsY3VsYXRlZE1hcmdpbiIsImVsZW1lbnRzIiwibWFyZ2luIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJfdGhpczEwIiwiYW5pbWF0aW9uIiwidGVtcGxhdGUiLCJ0aXRsZSIsImRlbGF5IiwiQVVUTyIsIlRPUCIsIlJJR0hUIiwiQk9UVE9NIiwiTEVGVCIsImNvbnRhaW5lciIsImZhbGxiYWNrUGxhY2VtZW50IiwiSU5TRVJURUQiLCJGT0NVU09VVCIsIl9pc0VuYWJsZWQiLCJfdGltZW91dCIsIl9ob3ZlclN0YXRlIiwiX2FjdGl2ZVRyaWdnZXIiLCJ0aXAiLCJfc2V0TGlzdGVuZXJzIiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJpc1dpdGhDb250ZW50IiwiaXNJblRoZURvbSIsInRpcElkIiwic2V0Q29udGVudCIsImF0dGFjaG1lbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJjb21wbGV0ZSIsIl9maXhUcmFuc2l0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwic2V0RWxlbWVudENvbnRlbnQiLCJjb250ZW50IiwiZW1wdHkiLCJhcHBlbmQiLCJ0ZXh0IiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwidGl0bGVUeXBlIiwiJHRpcCIsInRhYkNsYXNzIiwiam9pbiIsInBvcHBlckRhdGEiLCJwb3BwZXJJbnN0YW5jZSIsImluaXRDb25maWdBbmltYXRpb24iLCJfVG9vbHRpcCIsIl9nZXRDb250ZW50IiwibWV0aG9kIiwiQUNUSVZBVEUiLCJTQ1JPTEwiLCJfc2Nyb2xsRWxlbWVudCIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsImF1dG9NZXRob2QiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJ0YXJnZXRTZWxlY3RvciIsInRhcmdldEJDUiIsIml0ZW0iLCJwYWdlWU9mZnNldCIsIl9nZXRPZmZzZXRIZWlnaHQiLCJtYXhTY3JvbGwiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJxdWVyaWVzIiwiJGxpbmsiLCJwYXJlbnRzIiwibm9kZXMiLCJzY3JvbGxTcHlzIiwiJHNweSIsInByZXZpb3VzIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRkZW5FdmVudCIsImFjdGl2ZSIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd25Ub2dnbGVMaXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs2MkJBNEJBLElDbkJBLElDQ2dCQSxFQU9SQyxFQUVBQyxFQUNBQyxFQUVBQyxFQU1BQyxFQU1BQyxFQUFBQSxFQUFBQSxFQVlBQyxFQ3JDU1AsRUFPVEMsRUFFQUMsRUFDQUMsRUFDQUssRUFDQUosRUFFQUUsRUFBQUEsRUFBQUEsRUFNQUcsRUFBQUEsRUFBQUEs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YW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE0LjNcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbnZhciB0aW1lb3V0RHVyYXRpb24gPSAwO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgdGltZW91dER1cmF0aW9uID0gMTtcbiAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBodG1sWydvZmZzZXQnICsgYXhpc10gKyBjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnQm90dG9tJyA6ICdSaWdodCcpXSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcygpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICB2YXIgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBnZXRTaXplKCdIZWlnaHQnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSxcbiAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKVxuICB9O1xufVxuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxuXG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2l2ZW4gZWxlbWVudCBvZmZzZXRzLCBnZW5lcmF0ZSBhbiBvdXRwdXQgc2ltaWxhciB0byBnZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvZmZzZXRzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIGdldENsaWVudFJlY3Qob2Zmc2V0cykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHtcbiAgICByaWdodDogb2Zmc2V0cy5sZWZ0ICsgb2Zmc2V0cy53aWR0aCxcbiAgICBib3R0b206IG9mZnNldHMudG9wICsgb2Zmc2V0cy5oZWlnaHRcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm4ge09iamVjdH0gY2xpZW50IHJlY3RcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSB7fTtcblxuICAvLyBJRTEwIDEwIEZJWDogUGxlYXNlLCBkb24ndCBhc2ssIHRoZSBlbGVtZW50IGlzbid0XG4gIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLlxuICAvLyBUaGlzIGlzbid0IHJlcHJvZHVjaWJsZSBpbiBJRTEwIGNvbXBhdGliaWxpdHkgbW9kZSBvZiBJRTExXG4gIHRyeSB7XG4gICAgaWYgKGlzSUUoMTApKSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0O1xuICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgdG9wOiByZWN0LnRvcCxcbiAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCxcbiAgICBoZWlnaHQ6IHJlY3QuYm90dG9tIC0gcmVjdC50b3BcbiAgfTtcblxuICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzXG4gIHZhciBzaXplcyA9IGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJyA/IGdldFdpbmRvd1NpemVzKCkgOiB7fTtcbiAgdmFyIHdpZHRoID0gc2l6ZXMud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCB8fCByZXN1bHQucmlnaHQgLSByZXN1bHQubGVmdDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDtcblxuICB2YXIgaG9yaXpTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldFdpZHRoIC0gd2lkdGg7XG4gIHZhciB2ZXJ0U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgLSBoZWlnaHQ7XG5cbiAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmBcbiAgLy8gd2UgbWFrZSB0aGlzIGNoZWNrIGNvbmRpdGlvbmFsIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIGlmIChob3JpelNjcm9sbGJhciB8fCB2ZXJ0U2Nyb2xsYmFyKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTtcbiAgICBob3JpelNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd4Jyk7XG4gICAgdmVydFNjcm9sbGJhciAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICd5Jyk7XG5cbiAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7XG4gICAgcmVzdWx0LmhlaWdodCAtPSB2ZXJ0U2Nyb2xsYmFyO1xuICB9XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGNoaWxkcmVuLCBwYXJlbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBpc0lFMTAgPSBpc0lFKDEwKTtcbiAgdmFyIGlzSFRNTCA9IHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnO1xuICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTtcbiAgdmFyIHBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QocGFyZW50KTtcbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChjaGlsZHJlbik7XG5cbiAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpO1xuICB2YXIgYm9yZGVyVG9wV2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCwgMTApO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoLCAxMCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIHBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBib3VuZGFyaWVzLmxlZnQgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy50b3AgKz0gcGFkZGluZztcbiAgYm91bmRhcmllcy5yaWdodCAtPSBwYWRkaW5nO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBwYWRkaW5nO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20pO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQpICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95IHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXR5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIG9uVXBkYXRlIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIC8vIEF2b2lkIGJsdXJyeSB0ZXh0IGJ5IHVzaW5nIGZ1bGwgcGl4ZWwgaW50ZWdlcnMuXG4gIC8vIEZvciBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLCB0b3AvYm90dG9tIHByZWZlcnMgcm91bmRlZFxuICAvLyB2YWx1ZXMsIHdoaWxlIGxlZnQvcmlnaHQgcHJlZmVycyBmbG9vcmVkIHZhbHVlcy5cbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgbGVmdDogTWF0aC5mbG9vcihwb3BwZXIubGVmdCksXG4gICAgdG9wOiBNYXRoLnJvdW5kKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogTWF0aC5yb3VuZChwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogTWF0aC5mbG9vcihwb3BwZXIucmlnaHQpXG4gIH07XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1Y3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1yaWdodGAgKG9uIHRoZSBzaWRlIHdpdGggbW9yZSBzcGFjZSBhdmFpbGFibGUsIGFsaWdubWVudCBkZXBlbmRzIGJ5IHBsYWNlbWVudClcbiAqXG4gKiBAc3RhdGljXG4gKiBAdHlwZSB7QXJyYXl9XG4gKiBAZW51bSB7U3RyaW5nfVxuICogQHJlYWRvbmx5XG4gKiBAbWV0aG9kIHBsYWNlbWVudHNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIHBsYWNlbWVudHMgPSBbJ2F1dG8tc3RhcnQnLCAnYXV0bycsICdhdXRvLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJywgJ3RvcC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAncmlnaHQtZW5kJywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tJywgJ2JvdHRvbS1zdGFydCcsICdsZWZ0LWVuZCcsICdsZWZ0JywgJ2xlZnQtc3RhcnQnXTtcblxuLy8gR2V0IHJpZCBvZiBgYXV0b2AgYGF1dG8tc3RhcnRgIGFuZCBgYXV0by1lbmRgXG52YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBpbml0aWFsIHBsYWNlbWVudCwgcmV0dXJucyBhbGwgdGhlIHN1YnNlcXVlbnQgcGxhY2VtZW50c1xuICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuXG4gKlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCAtIEEgdmFsaWQgcGxhY2VtZW50IChpdCBhY2NlcHRzIHZhcmlhdGlvbnMpXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IGNvdW50ZXIgLSBTZXQgdG8gdHJ1ZSB0byB3YWxrIHRoZSBwbGFjZW1lbnRzIGNvdW50ZXJjbG9ja3dpc2VcbiAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9uc1xuICovXG5mdW5jdGlvbiBjbG9ja3dpc2UocGxhY2VtZW50KSB7XG4gIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaW5kZXggPSB2YWxpZFBsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpO1xuICB2YXIgYXJyID0gdmFsaWRQbGFjZW1lbnRzLnNsaWNlKGluZGV4ICsgMSkuY29uY2F0KHZhbGlkUGxhY2VtZW50cy5zbGljZSgwLCBpbmRleCkpO1xuICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7XG59XG5cbnZhciBCRUhBVklPUlMgPSB7XG4gIEZMSVA6ICdmbGlwJyxcbiAgQ0xPQ0tXSVNFOiAnY2xvY2t3aXNlJyxcbiAgQ09VTlRFUkNMT0NLV0lTRTogJ2NvdW50ZXJjbG9ja3dpc2UnXG59O1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gZmxpcChkYXRhLCBvcHRpb25zKSB7XG4gIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXJcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnaW5uZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgaWYgKGRhdGEuZmxpcHBlZCAmJiBkYXRhLnBsYWNlbWVudCA9PT0gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCkge1xuICAgIC8vIHNlZW1zIGxpa2UgZmxpcCBpcyB0cnlpbmcgdG8gbG9vcCwgcHJvYmFibHkgdGhlcmUncyBub3QgZW5vdWdoIHNwYWNlIG9uIGFueSBvZiB0aGUgZmxpcHBhYmxlIHNpZGVzXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlLCBvcHRpb25zLnBhZGRpbmcsIG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciB2YXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdIHx8ICcnO1xuXG4gIHZhciBmbGlwT3JkZXIgPSBbXTtcblxuICBzd2l0Y2ggKG9wdGlvbnMuYmVoYXZpb3IpIHtcbiAgICBjYXNlIEJFSEFWSU9SUy5GTElQOlxuICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DT1VOVEVSQ0xPQ0tXSVNFOlxuICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjtcbiAgfVxuXG4gIGZsaXBPcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICAgIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcblxuICAgIHZhciBwb3BwZXJPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcbiAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgICAvLyB1c2luZyBmbG9vciBiZWNhdXNlIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyBtYXkgY29udGFpbiBkZWNpbWFscyB3ZSBhcmUgbm90IGdvaW5nIHRvIGNvbnNpZGVyIGhlcmVcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0xlZnQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IoYm91bmRhcmllcy5sZWZ0KTtcbiAgICB2YXIgb3ZlcmZsb3dzUmlnaHQgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKGJvdW5kYXJpZXMucmlnaHQpO1xuICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7XG4gICAgdmFyIG92ZXJmbG93c0JvdHRvbSA9IGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKGJvdW5kYXJpZXMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NCb3VuZGFyaWVzID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBvdmVyZmxvd3NUb3AgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBvdmVyZmxvd3NCb3R0b207XG5cbiAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWRcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdGxlc3MsIGludGVycHJldGVkIGFzIHBpeGVsc1xuICAgKiAtIGAlYCBvciBgJXJgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gICAqIC0gYCVwYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0XG4gICAqIC0gYHZoYCwgQ1NTIHZpZXdwb3J0IGhlaWdodCB1bml0XG4gICAqXG4gICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+XG4gICAqIFRoaXMgbWVhbnMgdGhhdCBpZiB0aGUgcGxhY2VtZW50IGlzIGB0b3BgIG9yIGBib3R0b21gLCB0aGUgbGVuZ3RoIHdpbGwgYmUgdGhlXG4gICAqIGB3aWR0aGAuIEluIGNhc2Ugb2YgYGxlZnRgIG9yIGByaWdodGAsIGl0IHdpbGwgYmUgdGhlIGhlaWdodC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IE1vcmUgb24gdGhpcyBbcmVhZGluZyB0aGlzIGlzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKVxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBbiBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyIHRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGhhcyBhbHdheXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllciwgY2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaG90aGVyc1xuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEV4cGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGFzc3VyZSBpdCB0byBwb2ludCB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMsIHlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1Y3Rpb24gYXJlIG5lZWRlZC5cbiAgICpcbiAgICogSXQgaGFzIG5vIGVmZmVjdCBpZiBubyBgYXJyb3dFbGVtZW50YCBpcyBwcm92aWRlZC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGFycm93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXJyb3csXG4gICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi9cbiAgICBlbGVtZW50OiAnW3gtYXJyb3ddJ1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIGZsaXAgdGhlIHBvcHBlcidzIHBsYWNlbWVudCB3aGVuIGl0IHN0YXJ0cyB0byBvdmVybGFwIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudC5cbiAgICpcbiAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLlxuICAgKlxuICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGxcbiAgICogcmVzdGFydCBpdCBpZiBpdCBkZXRlY3RzIHRoZSBuZWVkIHRvIGZsaXAgdGhlIHBsYWNlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGZsaXA6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA2MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBmbGlwLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8QXJyYXl9IGJlaGF2aW9yPSdmbGlwJ1xuICAgICAqIFRoZSBiZWhhdmlvciB1c2VkIHRvIGNoYW5nZSB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50LiBJdCBjYW4gYmUgb25lIG9mXG4gICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkXG4gICAgICogcGxhY2VtZW50cyAod2l0aCBvcHRpb25hbCB2YXJpYXRpb25zKS5cbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbixcbiAgICAgKiB0aGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYga2VlcFRvZ2V0aGVyIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLlxuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdHJ1ZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nYm90dG9tJ11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFggYXhpcyAoYGJvdHRvbWAgb3IgYHRvcGApLiBBS0EgWCBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gXG4gICAgICovXG4gICAgeDogJ2JvdHRvbScsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2xlZnQnXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWSBheGlzIChgbGVmdGAgb3IgYHJpZ2h0YCkuIEFLQSBZIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YFxuICAgICAqL1xuICAgIHk6ICdyaWdodCdcbiAgfSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgY29tcHV0ZWQgc3R5bGVzIHRvIHRoZSBwb3BwZXIgZWxlbWVudC5cbiAgICpcbiAgICogQWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyBhcmUgbGltaXRlZCB0byB0aGlzIG1vZGlmaWVyLiBUaGlzIGlzIHVzZWZ1bCBpbiBjYXNlXG4gICAqIHlvdSB3YW50IHRvIGludGVncmF0ZSBQb3BwZXIuanMgaW5zaWRlIGEgZnJhbWV3b3JrIG9yIHZpZXcgbGlicmFyeSBhbmQgeW91XG4gICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHlvdSBkaXNhYmxlIHRoaXMgbW9kaWZpZXIsIHlvdSBtdXN0IG1ha2Ugc3VyZSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayFcbiAgICpcbiAgICogSnVzdCBkaXNhYmxlIHRoaXMgbW9kaWZpZXIgYW5kIGRlZmluZSB5b3Ugb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzZCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHVuZGVmaW5lZFxuICB9XG59O1xuXG4vKipcbiAqIFRoZSBgZGF0YU9iamVjdGAgaXMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSBpbmZvcm1hdGlvbnMgdXNlZCBieSBQb3BwZXIuanNcbiAqIHRoaXMgb2JqZWN0IGdldCBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsIGl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdywgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucmVmZXJlbmNlIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5hcnJvd10gYHRvcGAgYW5kIGBsZWZ0YCBvZmZzZXRzLCBvbmx5IG9uZSBvZiB0aGVtIHdpbGwgYmUgZGlmZmVyZW50IGZyb20gMFxuICovXG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIHByb3ZpZGVkIHRvIFBvcHBlci5qcyBjb25zdHJ1Y3Rvci48YnIgLz5cbiAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFzIDNyZCBhcmd1bWVudCBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZVxuICogc3RydWN0dXJlIG9mIHRoaXMgb2JqZWN0LCBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudFxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZFxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlXG4gICAqL1xuICBldmVudHNFbmFibGVkOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgcG9wcGVyIHdoZW5cbiAgICogeW91IGNhbGwgdGhlIGBkZXN0cm95YCBtZXRob2QuXG4gICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2VcbiAgICovXG4gIHJlbW92ZU9uRGVzdHJveTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgY3JlYXRlZC48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25DcmVhdGV9XG4gICAqL1xuICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyB1cGRhdGVkLCB0aGlzIGNhbGxiYWNrIGlzIG5vdCBjYWxsZWRcbiAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnRcbiAgICogdXBkYXRlcy48YnIgLz5cbiAgICogQnkgZGVmYXVsdCwgaXMgc2V0IHRvIG5vLW9wLjxiciAvPlxuICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLlxuICAgKiBAcHJvcCB7b25VcGRhdGV9XG4gICAqL1xuICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSxcblxuICAvKipcbiAgICogTGlzdCBvZiBtb2RpZmllcnMgdXNlZCB0byBtb2RpZnkgdGhlIG9mZnNldHMgYmVmb3JlIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci5cbiAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanNcbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKiBAY2xhc3MgUG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZSBhbiB1cGRhdGUsIGl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGVcbiAgICAgKiBAbWV0aG9kIHNjaGVkdWxlVXBkYXRlXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuXG4gICAgICogU3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDEuNywgdGhpcyBtZXRob2QgaXMgYXZhaWxhYmxlIG9ubHkgaWYgeW91XG4gICAgICogaW5jbHVkZSBgcG9wcGVyLXV0aWxzLmpzYCBiZWZvcmUgYHBvcHBlci5qc2AuXG4gICAgICpcbiAgICAgKiAqKkRFUFJFQ0FUSU9OKio6IFRoaXMgd2F5IHRvIGFjY2VzcyBQb3BwZXJVdGlscyBpcyBkZXByZWNhdGVkXG4gICAgICogYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MiEgVXNlIHRoZSBQb3BwZXJVdGlscyBtb2R1bGUgZGlyZWN0bHkgaW5zdGVhZC5cbiAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndFxuICAgICAqIGd1YXJhbnRlZSB0aGVtIHRvIGZvbGxvdyBzZW12ZXIuIFVzZSB0aGVtIGF0IHlvdXIgb3duIHJpc2shXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuOFxuICAgICAqIEBtZW1iZXIgVXRpbHNcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cbiAgfV0pO1xuICByZXR1cm4gUG9wcGVyO1xufSgpO1xuXG4vKipcbiAqIFRoZSBgcmVmZXJlbmNlT2JqZWN0YCBpcyBhbiBvYmplY3QgdGhhdCBwcm92aWRlcyBhbiBpbnRlcmZhY2UgY29tcGF0aWJsZSB3aXRoIFBvcHBlci5qc1xuICogYW5kIGxldHMgeW91IHVzZSBpdCBhcyByZXBsYWNlbWVudCBvZiBhIHJlYWwgRE9NIG5vZGUuPGJyIC8+XG4gKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzXG4gKiBpbiBjYXNlIHlvdSBkb24ndCBoYXZlIGEgRE9NIG5vZGUgdG8gdXNlIGFzIHJlZmVyZW5jZS5cbiAqXG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmZXJlbmNlT2JqZWN0LCBwb3BwZXJOb2RlKTtcbiAqIGBgYFxuICpcbiAqIE5COiBUaGlzIGZlYXR1cmUgaXNuJ3Qgc3VwcG9ydGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4xLjMpOiB1dGlsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBVdGlsID0gKCgkKSA9PiB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogUHJpdmF0ZSBUcmFuc2l0aW9uRW5kIEhlbHBlcnNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNvbnN0IFRSQU5TSVRJT05fRU5EID0gJ3RyYW5zaXRpb25lbmQnXG4gIGNvbnN0IE1BWF9VSUQgPSAxMDAwMDAwXG4gIGNvbnN0IE1JTExJU0VDT05EU19NVUxUSVBMSUVSID0gMTAwMFxuXG4gIC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcbiAgZnVuY3Rpb24gdG9UeXBlKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJpbmRUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgIGRlbGVnYXRlVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgICBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCQoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkge1xuICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgIGxldCBjYWxsZWQgPSBmYWxzZVxuXG4gICAgJCh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgKCkgPT4ge1xuICAgICAgY2FsbGVkID0gdHJ1ZVxuICAgIH0pXG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcylcbiAgICAgIH1cbiAgICB9LCBkdXJhdGlvbilcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpIHtcbiAgICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yXG4gICAgJC5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpXG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogUHVibGljIFV0aWwgQXBpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNvbnN0IFV0aWwgPSB7XG5cbiAgICBUUkFOU0lUSU9OX0VORDogJ2JzVHJhbnNpdGlvbkVuZCcsXG5cbiAgICBnZXRVSUQocHJlZml4KSB7XG4gICAgICBkbyB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCkgLy8gXCJ+flwiIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZVxuICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICAgIHJldHVybiBwcmVmaXhcbiAgICB9LFxuXG4gICAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBsZXQgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKVxuICAgICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICAgIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSB8fCAnJ1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGxcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcbiAgICAgIGxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSAkKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpXG4gICAgICBjb25zdCBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKVxuXG4gICAgICAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG4gICAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG5cbiAgICAgIC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdXG5cbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUlxuICAgIH0sXG5cbiAgICByZWZsb3coZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgfSxcblxuICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihUUkFOU0lUSU9OX0VORClcbiAgICB9LFxuXG4gICAgLy8gVE9ETzogUmVtb3ZlIGluIHY1XG4gICAgc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oVFJBTlNJVElPTl9FTkQpXG4gICAgfSxcblxuICAgIGlzRWxlbWVudChvYmopIHtcbiAgICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGVcbiAgICB9LFxuXG4gICAgdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcbiAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWdUeXBlcywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgY29uc3QgZXhwZWN0ZWRUeXBlcyA9IGNvbmZpZ1R5cGVzW3Byb3BlcnR5XVxuICAgICAgICAgIGNvbnN0IHZhbHVlICAgICAgICAgPSBjb25maWdbcHJvcGVydHldXG4gICAgICAgICAgY29uc3QgdmFsdWVUeXBlICAgICA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKVxuICAgICAgICAgICAgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpXG5cbiAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGAke2NvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKX06IGAgK1xuICAgICAgICAgICAgICBgT3B0aW9uIFwiJHtwcm9wZXJ0eX1cIiBwcm92aWRlZCB0eXBlIFwiJHt2YWx1ZVR5cGV9XCIgYCArXG4gICAgICAgICAgICAgIGBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7ZXhwZWN0ZWRUeXBlc31cIi5gKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KClcblxuICByZXR1cm4gVXRpbFxufSkoJClcblxuZXhwb3J0IGRlZmF1bHQgVXRpbFxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IGFsZXJ0LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBBbGVydCA9ICgoJCkgPT4ge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY29uc3QgTkFNRSAgICAgICAgICAgICAgICA9ICdhbGVydCdcbiAgY29uc3QgVkVSU0lPTiAgICAgICAgICAgICA9ICc0LjEuMydcbiAgY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5hbGVydCdcbiAgY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG4gIGNvbnN0IERBVEFfQVBJX0tFWSAgICAgICAgPSAnLmRhdGEtYXBpJ1xuICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuXG4gIGNvbnN0IFNlbGVjdG9yID0ge1xuICAgIERJU01JU1MgOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB9XG5cbiAgY29uc3QgRXZlbnQgPSB7XG4gICAgQ0xPU0UgICAgICAgICAgOiBgY2xvc2Uke0VWRU5UX0tFWX1gLFxuICAgIENMT1NFRCAgICAgICAgIDogYGNsb3NlZCR7RVZFTlRfS0VZfWAsXG4gICAgQ0xJQ0tfREFUQV9BUEkgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG4gIH1cblxuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgQUxFUlQgOiAnYWxlcnQnLFxuICAgIEZBREUgIDogJ2ZhZGUnLFxuICAgIFNIT1cgIDogJ3Nob3cnXG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNsYXNzIEFsZXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICAgIH1cblxuICAgIC8vIEdldHRlcnNcblxuICAgIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICAgIHJldHVybiBWRVJTSU9OXG4gICAgfVxuXG4gICAgLy8gUHVibGljXG5cbiAgICBjbG9zZShlbGVtZW50KSB7XG4gICAgICBsZXQgcm9vdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpXG5cbiAgICAgIGlmIChjdXN0b21FdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudChyb290RWxlbWVudClcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKVxuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGxcbiAgICB9XG5cbiAgICAvLyBQcml2YXRlXG5cbiAgICBfZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcbiAgICAgIGxldCBwYXJlbnQgICAgID0gZmFsc2VcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgIHBhcmVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChgLiR7Q2xhc3NOYW1lLkFMRVJUfWApWzBdXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnRcbiAgICB9XG5cbiAgICBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuICAgICAgY29uc3QgY2xvc2VFdmVudCA9ICQuRXZlbnQoRXZlbnQuQ0xPU0UpXG5cbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihjbG9zZUV2ZW50KVxuICAgICAgcmV0dXJuIGNsb3NlRXZlbnRcbiAgICB9XG5cbiAgICBfcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICBpZiAoISQoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpXG5cbiAgICAgICQoZWxlbWVudClcbiAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCAoZXZlbnQpID0+IHRoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICB9XG5cbiAgICBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KVxuICAgICAgICAuZGV0YWNoKClcbiAgICAgICAgLnRyaWdnZXIoRXZlbnQuQ0xPU0VEKVxuICAgICAgICAucmVtb3ZlKClcbiAgICB9XG5cbiAgICAvLyBTdGF0aWNcblxuICAgIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0ICRlbGVtZW50ID0gJCh0aGlzKVxuICAgICAgICBsZXQgZGF0YSAgICAgICA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkpXG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKVxuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVksIGRhdGEpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9XG5cbiAgICAgICAgYWxlcnRJbnN0YW5jZS5jbG9zZSh0aGlzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKFxuICAgIEV2ZW50LkNMSUNLX0RBVEFfQVBJLFxuICAgIFNlbGVjdG9yLkRJU01JU1MsXG4gICAgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpXG4gIClcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSAgICAgICAgICAgICA9IEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2VcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEFsZXJ0XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCAgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICAgIHJldHVybiBBbGVydC5falF1ZXJ5SW50ZXJmYWNlXG4gIH1cblxuICByZXR1cm4gQWxlcnRcbn0pKCQpXG5cbmV4cG9ydCBkZWZhdWx0IEFsZXJ0XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMS4zKTogYnV0dG9uLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBCdXR0b24gPSAoKCQpID0+IHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNvbnN0IE5BTUUgICAgICAgICAgICAgICAgPSAnYnV0dG9uJ1xuICBjb25zdCBWRVJTSU9OICAgICAgICAgICAgID0gJzQuMS4zJ1xuICBjb25zdCBEQVRBX0tFWSAgICAgICAgICAgID0gJ2JzLmJ1dHRvbidcbiAgY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG4gIGNvbnN0IERBVEFfQVBJX0tFWSAgICAgICAgPSAnLmRhdGEtYXBpJ1xuICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuXG4gIGNvbnN0IENsYXNzTmFtZSA9IHtcbiAgICBBQ1RJVkUgOiAnYWN0aXZlJyxcbiAgICBCVVRUT04gOiAnYnRuJyxcbiAgICBGT0NVUyAgOiAnZm9jdXMnXG4gIH1cblxuICBjb25zdCBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1RPR0dMRV9DQVJST1QgOiAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsXG4gICAgREFUQV9UT0dHTEUgICAgICAgIDogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICAgIElOUFVUICAgICAgICAgICAgICA6ICdpbnB1dCcsXG4gICAgQUNUSVZFICAgICAgICAgICAgIDogJy5hY3RpdmUnLFxuICAgIEJVVFRPTiAgICAgICAgICAgICA6ICcuYnRuJ1xuICB9XG5cbiAgY29uc3QgRXZlbnQgPSB7XG4gICAgQ0xJQ0tfREFUQV9BUEkgICAgICA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWAsXG4gICAgRk9DVVNfQkxVUl9EQVRBX0FQSSA6IGBmb2N1cyR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgYmx1ciR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY2xhc3MgQnV0dG9uIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFxuICAgIH1cblxuICAgIC8vIEdldHRlcnNcblxuICAgIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICAgIHJldHVybiBWRVJTSU9OXG4gICAgfVxuXG4gICAgLy8gUHVibGljXG5cbiAgICB0b2dnbGUoKSB7XG4gICAgICBsZXQgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZVxuICAgICAgbGV0IGFkZEFyaWFQcmVzc2VkID0gdHJ1ZVxuICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoXG4gICAgICAgIFNlbGVjdG9yLkRBVEFfVE9HR0xFXG4gICAgICApWzBdXG5cbiAgICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTlBVVClcblxuICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQgJiZcbiAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRSlcblxuICAgICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHxcbiAgICAgICAgICAgICAgcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8XG4gICAgICAgICAgICAgIGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSB8fFxuICAgICAgICAgICAgICByb290RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICAgICAgICAkKGlucHV0KS50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0LmZvY3VzKClcbiAgICAgICAgICBhZGRBcmlhUHJlc3NlZCA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLFxuICAgICAgICAgICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gICAgfVxuXG4gICAgLy8gU3RhdGljXG5cbiAgICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IEJ1dHRvbih0aGlzKVxuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuICAgICAgbGV0IGJ1dHRvbiA9IGV2ZW50LnRhcmdldFxuXG4gICAgICBpZiAoISQoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuICAgICAgICBidXR0b24gPSAkKGJ1dHRvbikuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pXG4gICAgICB9XG5cbiAgICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJChidXR0b24pLCAndG9nZ2xlJylcbiAgICB9KVxuICAgIC5vbihFdmVudC5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgYnV0dG9uID0gJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKVswXVxuICAgICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSlcbiAgICB9KVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2VcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEJ1dHRvblxuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVFxuICAgIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZVxuICB9XG5cbiAgcmV0dXJuIEJ1dHRvblxufSkoJClcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uXG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMS4zKTogY2Fyb3VzZWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IENhcm91c2VsID0gKCgkKSA9PiB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBjb25zdCBOQU1FICAgICAgICAgICAgICAgICAgID0gJ2Nhcm91c2VsJ1xuICBjb25zdCBWRVJTSU9OICAgICAgICAgICAgICAgID0gJzQuMS4zJ1xuICBjb25zdCBEQVRBX0tFWSAgICAgICAgICAgICAgID0gJ2JzLmNhcm91c2VsJ1xuICBjb25zdCBFVkVOVF9LRVkgICAgICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbiAgY29uc3QgREFUQV9BUElfS0VZICAgICAgICAgICA9ICcuZGF0YS1hcGknXG4gIGNvbnN0IEpRVUVSWV9OT19DT05GTElDVCAgICAgPSAkLmZuW05BTUVdXG4gIGNvbnN0IEFSUk9XX0xFRlRfS0VZQ09ERSAgICAgPSAzNyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuICBjb25zdCBBUlJPV19SSUdIVF9LRVlDT0RFICAgID0gMzkgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG4gIGNvbnN0IFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDAgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbiAgY29uc3QgRGVmYXVsdCA9IHtcbiAgICBpbnRlcnZhbCA6IDUwMDAsXG4gICAga2V5Ym9hcmQgOiB0cnVlLFxuICAgIHNsaWRlICAgIDogZmFsc2UsXG4gICAgcGF1c2UgICAgOiAnaG92ZXInLFxuICAgIHdyYXAgICAgIDogdHJ1ZVxuICB9XG5cbiAgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gICAgaW50ZXJ2YWwgOiAnKG51bWJlcnxib29sZWFuKScsXG4gICAga2V5Ym9hcmQgOiAnYm9vbGVhbicsXG4gICAgc2xpZGUgICAgOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgcGF1c2UgICAgOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgd3JhcCAgICAgOiAnYm9vbGVhbidcbiAgfVxuXG4gIGNvbnN0IERpcmVjdGlvbiA9IHtcbiAgICBORVhUICAgICA6ICduZXh0JyxcbiAgICBQUkVWICAgICA6ICdwcmV2JyxcbiAgICBMRUZUICAgICA6ICdsZWZ0JyxcbiAgICBSSUdIVCAgICA6ICdyaWdodCdcbiAgfVxuXG4gIGNvbnN0IEV2ZW50ID0ge1xuICAgIFNMSURFICAgICAgICAgIDogYHNsaWRlJHtFVkVOVF9LRVl9YCxcbiAgICBTTElEICAgICAgICAgICA6IGBzbGlkJHtFVkVOVF9LRVl9YCxcbiAgICBLRVlET1dOICAgICAgICA6IGBrZXlkb3duJHtFVkVOVF9LRVl9YCxcbiAgICBNT1VTRUVOVEVSICAgICA6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgICBNT1VTRUxFQVZFICAgICA6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YCxcbiAgICBUT1VDSEVORCAgICAgICA6IGB0b3VjaGVuZCR7RVZFTlRfS0VZfWAsXG4gICAgTE9BRF9EQVRBX0FQSSAgOiBgbG9hZCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWAsXG4gICAgQ0xJQ0tfREFUQV9BUEkgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG4gIH1cblxuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgQ0FST1VTRUwgOiAnY2Fyb3VzZWwnLFxuICAgIEFDVElWRSAgIDogJ2FjdGl2ZScsXG4gICAgU0xJREUgICAgOiAnc2xpZGUnLFxuICAgIFJJR0hUICAgIDogJ2Nhcm91c2VsLWl0ZW0tcmlnaHQnLFxuICAgIExFRlQgICAgIDogJ2Nhcm91c2VsLWl0ZW0tbGVmdCcsXG4gICAgTkVYVCAgICAgOiAnY2Fyb3VzZWwtaXRlbS1uZXh0JyxcbiAgICBQUkVWICAgICA6ICdjYXJvdXNlbC1pdGVtLXByZXYnLFxuICAgIElURU0gICAgIDogJ2Nhcm91c2VsLWl0ZW0nXG4gIH1cblxuICBjb25zdCBTZWxlY3RvciA9IHtcbiAgICBBQ1RJVkUgICAgICA6ICcuYWN0aXZlJyxcbiAgICBBQ1RJVkVfSVRFTSA6ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nLFxuICAgIElURU0gICAgICAgIDogJy5jYXJvdXNlbC1pdGVtJyxcbiAgICBORVhUX1BSRVYgICA6ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJTkRJQ0FUT1JTICA6ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycycsXG4gICAgREFUQV9TTElERSAgOiAnW2RhdGEtc2xpZGVdLCBbZGF0YS1zbGlkZS10b10nLFxuICAgIERBVEFfUklERSAgIDogJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXSdcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY2xhc3MgQ2Fyb3VzZWwge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXRlbXMgICAgICAgICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5faW50ZXJ2YWwgICAgICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCAgICAgID0gbnVsbFxuXG4gICAgICB0aGlzLl9pc1BhdXNlZCAgICAgICAgICAgPSBmYWxzZVxuICAgICAgdGhpcy5faXNTbGlkaW5nICAgICAgICAgID0gZmFsc2VcblxuICAgICAgdGhpcy50b3VjaFRpbWVvdXQgICAgICAgID0gbnVsbFxuXG4gICAgICB0aGlzLl9jb25maWcgICAgICAgICAgICAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgICAgdGhpcy5fZWxlbWVudCAgICAgICAgICAgID0gJChlbGVtZW50KVswXVxuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklORElDQVRPUlMpXG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKClcbiAgICB9XG5cbiAgICAvLyBHZXR0ZXJzXG5cbiAgICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgICByZXR1cm4gVkVSU0lPTlxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiBEZWZhdWx0XG4gICAgfVxuXG4gICAgLy8gUHVibGljXG5cbiAgICBuZXh0KCkge1xuICAgICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiZcbiAgICAgICAgKCQodGhpcy5fZWxlbWVudCkuaXMoJzp2aXNpYmxlJykgJiYgJCh0aGlzLl9lbGVtZW50KS5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpKSB7XG4gICAgICAgIHRoaXMubmV4dCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5QUkVWKVxuICAgICAgfVxuICAgIH1cblxuICAgIHBhdXNlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk5FWFRfUFJFVikpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KVxuICAgICAgICB0aGlzLmN5Y2xlKHRydWUpXG4gICAgICB9XG5cbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgICB9XG5cbiAgICBjeWNsZShldmVudCkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKVxuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGxcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksXG4gICAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0byhpbmRleCkge1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkVfSVRFTSlcblxuICAgICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudClcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuU0xJRCwgKCkgPT4gdGhpcy50byhpbmRleCkpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgIHRoaXMucGF1c2UoKVxuICAgICAgICB0aGlzLmN5Y2xlKClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXhcbiAgICAgICAgPyBEaXJlY3Rpb24uTkVYVFxuICAgICAgICA6IERpcmVjdGlvbi5QUkVWXG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKVxuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpXG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG5cbiAgICAgIHRoaXMuX2l0ZW1zICAgICAgICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5fY29uZmlnICAgICAgICAgICAgPSBudWxsXG4gICAgICB0aGlzLl9lbGVtZW50ICAgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX2ludGVydmFsICAgICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5faXNQYXVzZWQgICAgICAgICAgPSBudWxsXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgICAgID0gbnVsbFxuICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSBudWxsXG4gICAgfVxuXG4gICAgLy8gUHJpdmF0ZVxuXG4gICAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgLi4uY29uZmlnXG4gICAgICB9XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKVxuICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgIH1cblxuICAgIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAgIC5vbihFdmVudC5LRVlET1dOLCAoZXZlbnQpID0+IHRoaXMuX2tleWRvd24oZXZlbnQpKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgICAub24oRXZlbnQuTU9VU0VFTlRFUiwgKGV2ZW50KSA9PiB0aGlzLnBhdXNlKGV2ZW50KSlcbiAgICAgICAgICAub24oRXZlbnQuTU9VU0VMRUFWRSwgKGV2ZW50KSA9PiB0aGlzLmN5Y2xlKGV2ZW50KSlcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG4gICAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSEVORCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICAgICAgICBpZiAodGhpcy50b3VjaFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudG91Y2hUaW1lb3V0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KChldmVudCkgPT4gdGhpcy5jeWNsZShldmVudCksIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyB0aGlzLl9jb25maWcuaW50ZXJ2YWwpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHtcbiAgICAgICAgY2FzZSBBUlJPV19MRUZUX0tFWUNPREU6XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIHRoaXMucHJldigpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICB0aGlzLm5leHQoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlXG4gICAgICAgID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5JVEVNKSlcbiAgICAgICAgOiBbXVxuICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudClcbiAgICB9XG5cbiAgICBfZ2V0SXRlbUJ5RGlyZWN0aW9uKGRpcmVjdGlvbiwgYWN0aXZlRWxlbWVudCkge1xuICAgICAgY29uc3QgaXNOZXh0RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVFxuICAgICAgY29uc3QgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVlxuICAgICAgY29uc3QgYWN0aXZlSW5kZXggICAgID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpXG4gICAgICBjb25zdCBsYXN0SXRlbUluZGV4ICAgPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxXG4gICAgICBjb25zdCBpc0dvaW5nVG9XcmFwICAgPSBpc1ByZXZEaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleFxuXG4gICAgICBpZiAoaXNHb2luZ1RvV3JhcCAmJiAhdGhpcy5fY29uZmlnLndyYXApIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVsdGEgICAgID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFViA/IC0xIDogMVxuICAgICAgY29uc3QgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoXG5cbiAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xXG4gICAgICAgID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdXG4gICAgfVxuXG4gICAgX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuICAgICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldClcbiAgICAgIGNvbnN0IGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pKVxuICAgICAgY29uc3Qgc2xpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0xJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgICAgdG86IHRhcmdldEluZGV4XG4gICAgICB9KVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZGVFdmVudClcblxuICAgICAgcmV0dXJuIHNsaWRlRXZlbnRcbiAgICB9XG5cbiAgICBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IFtdLnNsaWNlLmNhbGwodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5BQ1RJVkUpKVxuICAgICAgICAkKGluZGljYXRvcnMpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG5cbiAgICAgICAgY29uc3QgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW1xuICAgICAgICAgIHRoaXMuX2dldEl0ZW1JbmRleChlbGVtZW50KVxuICAgICAgICBdXG5cbiAgICAgICAgaWYgKG5leHRJbmRpY2F0b3IpIHtcbiAgICAgICAgICAkKG5leHRJbmRpY2F0b3IpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfc2xpZGUoZGlyZWN0aW9uLCBlbGVtZW50KSB7XG4gICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKVxuICAgICAgY29uc3QgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpXG4gICAgICBjb25zdCBuZXh0RWxlbWVudCAgID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmXG4gICAgICAgIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpXG4gICAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KVxuICAgICAgY29uc3QgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbClcblxuICAgICAgbGV0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lXG4gICAgICBsZXQgb3JkZXJDbGFzc05hbWVcbiAgICAgIGxldCBldmVudERpcmVjdGlvbk5hbWVcblxuICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQpIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuTEVGVFxuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5ORVhUXG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENsYXNzTmFtZS5SSUdIVFxuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWXG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVFxuICAgICAgfVxuXG4gICAgICBpZiAobmV4dEVsZW1lbnQgJiYgJChuZXh0RWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2VcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNsaWRlRXZlbnQgPSB0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChuZXh0RWxlbWVudCwgZXZlbnREaXJlY3Rpb25OYW1lKVxuICAgICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlXG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpXG5cbiAgICAgIGNvbnN0IHNsaWRFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pXG5cbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TTElERSkpIHtcbiAgICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpXG5cbiAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpXG5cbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSlcbiAgICAgICAgJChuZXh0RWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpXG5cbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KVxuXG4gICAgICAgICQoYWN0aXZlRWxlbWVudClcbiAgICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsICgpID0+IHtcbiAgICAgICAgICAgICQobmV4dEVsZW1lbnQpXG4gICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhgJHtkaXJlY3Rpb25hbENsYXNzTmFtZX0gJHtvcmRlckNsYXNzTmFtZX1gKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcblxuICAgICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuQUNUSVZFfSAke29yZGVyQ2xhc3NOYW1lfSAke2RpcmVjdGlvbmFsQ2xhc3NOYW1lfWApXG5cbiAgICAgICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCksIDApXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuXG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RhdGljXG5cbiAgICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgICAgbGV0IF9jb25maWcgPSB7XG4gICAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgICAuLi4kKHRoaXMpLmRhdGEoKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgX2NvbmZpZyA9IHtcbiAgICAgICAgICAgIC4uLl9jb25maWcsXG4gICAgICAgICAgICAuLi5jb25maWdcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGVcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIF9jb25maWcpXG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgZGF0YS50byhjb25maWcpXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbYWN0aW9uXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7YWN0aW9ufVwiYClcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVthY3Rpb25dKClcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7XG4gICAgICAgICAgZGF0YS5wYXVzZSgpXG4gICAgICAgICAgZGF0YS5jeWNsZSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGljIF9kYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKVxuXG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCB0YXJnZXQgPSAkKHNlbGVjdG9yKVswXVxuXG4gICAgICBpZiAoIXRhcmdldCB8fCAhJCh0YXJnZXQpLmhhc0NsYXNzKENsYXNzTmFtZS5DQVJPVVNFTCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgLi4uJCh0YXJnZXQpLmRhdGEoKSxcbiAgICAgICAgLi4uJCh0aGlzKS5kYXRhKClcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpXG5cbiAgICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAgIGNvbmZpZy5pbnRlcnZhbCA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRhcmdldCksIGNvbmZpZylcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpLnRvKHNsaWRlSW5kZXgpXG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9TTElERSwgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIpXG5cbiAgJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksICgpID0+IHtcbiAgICBjb25zdCBjYXJvdXNlbHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9SSURFKSlcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCAkY2Fyb3VzZWwgPSAkKGNhcm91c2Vsc1tpXSlcbiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfVxuICB9KVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZVxuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWxcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgICByZXR1cm4gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZVxuICB9XG5cbiAgcmV0dXJuIENhcm91c2VsXG59KSgkKVxuXG5leHBvcnQgZGVmYXVsdCBDYXJvdXNlbFxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBDb2xsYXBzZSA9ICgoJCkgPT4ge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY29uc3QgTkFNRSAgICAgICAgICAgICAgICA9ICdjb2xsYXBzZSdcbiAgY29uc3QgVkVSU0lPTiAgICAgICAgICAgICA9ICc0LjEuMydcbiAgY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5jb2xsYXBzZSdcbiAgY29uc3QgRVZFTlRfS0VZICAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG4gIGNvbnN0IERBVEFfQVBJX0tFWSAgICAgICAgPSAnLmRhdGEtYXBpJ1xuICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgID0gJC5mbltOQU1FXVxuXG4gIGNvbnN0IERlZmF1bHQgPSB7XG4gICAgdG9nZ2xlIDogdHJ1ZSxcbiAgICBwYXJlbnQgOiAnJ1xuICB9XG5cbiAgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gICAgdG9nZ2xlIDogJ2Jvb2xlYW4nLFxuICAgIHBhcmVudCA6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9XG5cbiAgY29uc3QgRXZlbnQgPSB7XG4gICAgU0hPVyAgICAgICAgICAgOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gICAgU0hPV04gICAgICAgICAgOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICAgIEhJREUgICAgICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICAgIEhJRERFTiAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gICAgQ0xJQ0tfREFUQV9BUEkgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG4gIH1cblxuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgU0hPVyAgICAgICA6ICdzaG93JyxcbiAgICBDT0xMQVBTRSAgIDogJ2NvbGxhcHNlJyxcbiAgICBDT0xMQVBTSU5HIDogJ2NvbGxhcHNpbmcnLFxuICAgIENPTExBUFNFRCAgOiAnY29sbGFwc2VkJ1xuICB9XG5cbiAgY29uc3QgRGltZW5zaW9uID0ge1xuICAgIFdJRFRIICA6ICd3aWR0aCcsXG4gICAgSEVJR0hUIDogJ2hlaWdodCdcbiAgfVxuXG4gIGNvbnN0IFNlbGVjdG9yID0ge1xuICAgIEFDVElWRVMgICAgIDogJy5zaG93LCAuY29sbGFwc2luZycsXG4gICAgREFUQV9UT0dHTEUgOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNsYXNzIENvbGxhcHNlIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgICB0aGlzLl9lbGVtZW50ICAgICAgICAgPSBlbGVtZW50XG4gICAgICB0aGlzLl9jb25maWcgICAgICAgICAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgICAgdGhpcy5fdHJpZ2dlckFycmF5ICAgID0gJC5tYWtlQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgYFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJHtlbGVtZW50LmlkfVwiXSxgICtcbiAgICAgICAgYFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIyR7ZWxlbWVudC5pZH1cIl1gXG4gICAgICApKVxuICAgICAgY29uc3QgdG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1RPR0dMRSkpXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBlbGVtID0gdG9nZ2xlTGlzdFtpXVxuICAgICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKVxuICAgICAgICBjb25zdCBmaWx0ZXJFbGVtZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgICAgICAgICAuZmlsdGVyKChmb3VuZEVsZW0pID0+IGZvdW5kRWxlbSA9PT0gZWxlbWVudClcblxuICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvclxuICAgICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbFxuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHtcbiAgICAgICAgdGhpcy50b2dnbGUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldHRlcnNcblxuICAgIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICAgIHJldHVybiBWRVJTSU9OXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgICAgcmV0dXJuIERlZmF1bHRcbiAgICB9XG5cbiAgICAvLyBQdWJsaWNcblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaG93KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fFxuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IGFjdGl2ZXNcbiAgICAgIGxldCBhY3RpdmVzRGF0YVxuXG4gICAgICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgICAgIGFjdGl2ZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkFDVElWRVMpKVxuICAgICAgICAgIC5maWx0ZXIoKGVsZW0pID0+IGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXBhcmVudCcpID09PSB0aGlzLl9jb25maWcucGFyZW50KVxuXG4gICAgICAgIGlmIChhY3RpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGFjdGl2ZXMgPSBudWxsXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgYWN0aXZlc0RhdGEgPSAkKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSlcbiAgICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzdGFydEV2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XKVxuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKSwgJ2hpZGUnKVxuICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgJChhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICAgICQodGhpcy5fZWxlbWVudClcbiAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSlcbiAgICAgICAgLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwXG5cbiAgICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcy5fdHJpZ2dlckFycmF5KVxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpXG5cbiAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAgICAgLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnXG5cbiAgICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKVxuXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTilcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKVxuICAgICAgY29uc3Qgc2Nyb2xsU2l6ZSA9IGBzY3JvbGwke2NhcGl0YWxpemVkRGltZW5zaW9ufWBcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YFxuICAgIH1cblxuICAgIGhpZGUoKSB7XG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8XG4gICAgICAgICEkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IGAke3RoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXX1weGBcblxuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudClcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KVxuICAgICAgICAuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAgIC5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgY29uc3QgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aFxuICAgICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV1cbiAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKVxuICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgJGVsZW0gPSAkKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKVxuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKVxuXG4gICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKVxuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKVxuICAgICAgICAgIC5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpXG4gICAgICAgICAgLnRyaWdnZXIoRXZlbnQuSElEREVOKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJ1xuICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgfVxuXG4gICAgc2V0VHJhbnNpdGlvbmluZyhpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZ1xuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG5cbiAgICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX3BhcmVudCAgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSAgICA9IG51bGxcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGxcbiAgICB9XG5cbiAgICAvLyBQcml2YXRlXG5cbiAgICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0ge1xuICAgICAgICAuLi5EZWZhdWx0LFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH1cbiAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpIC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKVxuICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgIH1cblxuICAgIF9nZXREaW1lbnNpb24oKSB7XG4gICAgICBjb25zdCBoYXNXaWR0aCA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKVxuICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVFxuICAgIH1cblxuICAgIF9nZXRQYXJlbnQoKSB7XG4gICAgICBsZXQgcGFyZW50ID0gbnVsbFxuICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5wYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRcblxuICAgICAgICAvLyBJdCdzIGEgalF1ZXJ5IG9iamVjdFxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucGFyZW50KVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzZWxlY3RvciA9XG4gICAgICAgIGBbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIiR7dGhpcy5fY29uZmlnLnBhcmVudH1cIl1gXG5cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXG4gICAgICAkKGNoaWxkcmVuKS5lYWNoKChpLCBlbGVtZW50KSA9PiB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhcbiAgICAgICAgICBDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksXG4gICAgICAgICAgW2VsZW1lbnRdXG4gICAgICAgIClcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBwYXJlbnRcbiAgICB9XG5cbiAgICBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaXNPcGVuID0gJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICQodHJpZ2dlckFycmF5KVxuICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQsICFpc09wZW4pXG4gICAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN0YXRpY1xuXG4gICAgc3RhdGljIF9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KVxuICAgICAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsXG4gICAgfVxuXG4gICAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgJHRoaXMgICA9ICQodGhpcylcbiAgICAgICAgbGV0IGRhdGEgICAgICA9ICR0aGlzLmRhdGEoREFUQV9LRVkpXG4gICAgICAgIGNvbnN0IF9jb25maWcgPSB7XG4gICAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgICAuLi4kdGhpcy5kYXRhKCksXG4gICAgICAgICAgLi4udHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge31cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSAmJiBfY29uZmlnLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpXG4gICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICAgIGlmIChldmVudC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIGNvbnN0ICR0cmlnZ2VyID0gJCh0aGlzKVxuICAgIGNvbnN0IHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpXG4gICAgY29uc3Qgc2VsZWN0b3JzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSlcbiAgICAkKHNlbGVjdG9ycykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCAkdGFyZ2V0ID0gJCh0aGlzKVxuICAgICAgY29uc3QgZGF0YSAgICA9ICR0YXJnZXQuZGF0YShEQVRBX0tFWSlcbiAgICAgIGNvbnN0IGNvbmZpZyAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKClcbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpXG4gICAgfSlcbiAgfSlcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2VcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlXG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2VcbiAgfVxuXG4gIHJldHVybiBDb2xsYXBzZVxufSkoJClcblxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2VcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IGRyb3Bkb3duLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBEcm9wZG93biA9ICgoJCkgPT4ge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY29uc3QgTkFNRSAgICAgICAgICAgICAgICAgICAgID0gJ2Ryb3Bkb3duJ1xuICBjb25zdCBWRVJTSU9OICAgICAgICAgICAgICAgICAgPSAnNC4xLjMnXG4gIGNvbnN0IERBVEFfS0VZICAgICAgICAgICAgICAgICA9ICdicy5kcm9wZG93bidcbiAgY29uc3QgRVZFTlRfS0VZICAgICAgICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbiAgY29uc3QgREFUQV9BUElfS0VZICAgICAgICAgICAgID0gJy5kYXRhLWFwaSdcbiAgY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUICAgICAgID0gJC5mbltOQU1FXVxuICBjb25zdCBFU0NBUEVfS0VZQ09ERSAgICAgICAgICAgPSAyNyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG4gIGNvbnN0IFNQQUNFX0tFWUNPREUgICAgICAgICAgICA9IDMyIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHNwYWNlIGtleVxuICBjb25zdCBUQUJfS0VZQ09ERSAgICAgICAgICAgICAgPSA5IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcbiAgY29uc3QgQVJST1dfVVBfS0VZQ09ERSAgICAgICAgID0gMzggLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdXAgYXJyb3cga2V5XG4gIGNvbnN0IEFSUk9XX0RPV05fS0VZQ09ERSAgICAgICA9IDQwIC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGRvd24gYXJyb3cga2V5XG4gIGNvbnN0IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDMgLy8gTW91c2VFdmVudC53aGljaCB2YWx1ZSBmb3IgdGhlIHJpZ2h0IGJ1dHRvbiAoYXNzdW1pbmcgYSByaWdodC1oYW5kZWQgbW91c2UpXG4gIGNvbnN0IFJFR0VYUF9LRVlET1dOICAgICAgICAgICA9IG5ldyBSZWdFeHAoYCR7QVJST1dfVVBfS0VZQ09ERX18JHtBUlJPV19ET1dOX0tFWUNPREV9fCR7RVNDQVBFX0tFWUNPREV9YClcblxuICBjb25zdCBFdmVudCA9IHtcbiAgICBISURFICAgICAgICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICAgIEhJRERFTiAgICAgICAgICAgOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcbiAgICBTSE9XICAgICAgICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICAgIFNIT1dOICAgICAgICAgICAgOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICAgIENMSUNLICAgICAgICAgICAgOiBgY2xpY2ske0VWRU5UX0tFWX1gLFxuICAgIENMSUNLX0RBVEFfQVBJICAgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gLFxuICAgIEtFWURPV05fREFUQV9BUEkgOiBga2V5ZG93biR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWAsXG4gICAgS0VZVVBfREFUQV9BUEkgICA6IGBrZXl1cCR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbiAgfVxuXG4gIGNvbnN0IENsYXNzTmFtZSA9IHtcbiAgICBESVNBQkxFRCAgOiAnZGlzYWJsZWQnLFxuICAgIFNIT1cgICAgICA6ICdzaG93JyxcbiAgICBEUk9QVVAgICAgOiAnZHJvcHVwJyxcbiAgICBEUk9QUklHSFQgOiAnZHJvcHJpZ2h0JyxcbiAgICBEUk9QTEVGVCAgOiAnZHJvcGxlZnQnLFxuICAgIE1FTlVSSUdIVCA6ICdkcm9wZG93bi1tZW51LXJpZ2h0JyxcbiAgICBNRU5VTEVGVCAgOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcbiAgICBQT1NJVElPTl9TVEFUSUMgOiAncG9zaXRpb24tc3RhdGljJ1xuICB9XG5cbiAgY29uc3QgU2VsZWN0b3IgPSB7XG4gICAgREFUQV9UT0dHTEUgICA6ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsXG4gICAgRk9STV9DSElMRCAgICA6ICcuZHJvcGRvd24gZm9ybScsXG4gICAgTUVOVSAgICAgICAgICA6ICcuZHJvcGRvd24tbWVudScsXG4gICAgTkFWQkFSX05BViAgICA6ICcubmF2YmFyLW5hdicsXG4gICAgVklTSUJMRV9JVEVNUyA6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSdcbiAgfVxuXG4gIGNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gICAgVE9QICAgICAgIDogJ3RvcC1zdGFydCcsXG4gICAgVE9QRU5EICAgIDogJ3RvcC1lbmQnLFxuICAgIEJPVFRPTSAgICA6ICdib3R0b20tc3RhcnQnLFxuICAgIEJPVFRPTUVORCA6ICdib3R0b20tZW5kJyxcbiAgICBSSUdIVCAgICAgOiAncmlnaHQtc3RhcnQnLFxuICAgIFJJR0hURU5EICA6ICdyaWdodC1lbmQnLFxuICAgIExFRlQgICAgICA6ICdsZWZ0LXN0YXJ0JyxcbiAgICBMRUZURU5EICAgOiAnbGVmdC1lbmQnXG4gIH1cblxuICBjb25zdCBEZWZhdWx0ID0ge1xuICAgIG9mZnNldCAgICAgIDogMCxcbiAgICBmbGlwICAgICAgICA6IHRydWUsXG4gICAgYm91bmRhcnkgICAgOiAnc2Nyb2xsUGFyZW50JyxcbiAgICByZWZlcmVuY2UgICA6ICd0b2dnbGUnLFxuICAgIGRpc3BsYXkgICAgIDogJ2R5bmFtaWMnXG4gIH1cblxuICBjb25zdCBEZWZhdWx0VHlwZSA9IHtcbiAgICBvZmZzZXQgICAgICA6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIGZsaXAgICAgICAgIDogJ2Jvb2xlYW4nLFxuICAgIGJvdW5kYXJ5ICAgIDogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIHJlZmVyZW5jZSAgIDogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIGRpc3BsYXkgICAgIDogJ3N0cmluZydcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY2xhc3MgRHJvcGRvd24ge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fZWxlbWVudCAgPSBlbGVtZW50XG4gICAgICB0aGlzLl9wb3BwZXIgICA9IG51bGxcbiAgICAgIHRoaXMuX2NvbmZpZyAgID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICAgIHRoaXMuX21lbnUgICAgID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKVxuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKVxuXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpXG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuXG4gICAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgICAgcmV0dXJuIFZFUlNJT05cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gRGVmYXVsdFxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgICB9XG5cbiAgICAvLyBQdWJsaWNcblxuICAgIHRvZ2dsZSgpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgcGFyZW50ICAgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcbiAgICAgIGNvbnN0IGlzQWN0aXZlID0gJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKVxuXG4gICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywgcmVsYXRlZFRhcmdldClcblxuICAgICAgJChwYXJlbnQpLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBEaXNhYmxlIHRvdGFsbHkgUG9wcGVyLmpzIGZvciBEcm9wZG93biBpbiBOYXZiYXJcbiAgICAgIGlmICghdGhpcy5faW5OYXZiYXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcCBkcm9wZG93biByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnRcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50XG4gICAgICAgIH0gZWxzZSBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVxuXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgaXQncyBqUXVlcnkgZWxlbWVudFxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZVswXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGJvdW5kYXJ5IGlzIG5vdCBgc2Nyb2xsUGFyZW50YCwgdGhlbiBzZXQgcG9zaXRpb24gdG8gYHN0YXRpY2BcbiAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yNDI1MVxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgICAgICQocGFyZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuUE9TSVRJT05fU1RBVElDKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpXG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXG4gICAgICAgICAkKHBhcmVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZCQVJfTkFWKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgICAkKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuICAgICAgJChwYXJlbnQpXG4gICAgICAgIC50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVylcbiAgICAgICAgLnRyaWdnZXIoJC5FdmVudChFdmVudC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpXG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcbiAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSlcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsXG4gICAgICB0aGlzLl9tZW51ID0gbnVsbFxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHJpdmF0ZVxuXG4gICAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDSywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgdGhpcy50b2dnbGUoKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0ge1xuICAgICAgICAuLi50aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsXG4gICAgICAgIC4uLiQodGhpcy5fZWxlbWVudCkuZGF0YSgpLFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoXG4gICAgICAgIE5BTUUsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZVxuICAgICAgKVxuXG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgfVxuXG4gICAgX2dldE1lbnVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fbWVudSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk1FTlUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9tZW51XG4gICAgfVxuXG4gICAgX2dldFBsYWNlbWVudCgpIHtcbiAgICAgIGNvbnN0ICRwYXJlbnREcm9wZG93biA9ICQodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgbGV0IHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NXG5cbiAgICAgIC8vIEhhbmRsZSBkcm9wdXBcbiAgICAgIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BcbiAgICAgICAgaWYgKCQodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUEVORFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlJJR0hUXG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuTEVGVFxuICAgICAgfSBlbHNlIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NRU5EXG4gICAgICB9XG4gICAgICByZXR1cm4gcGxhY2VtZW50XG4gICAgfVxuXG4gICAgX2RldGVjdE5hdmJhcigpIHtcbiAgICAgIHJldHVybiAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoJy5uYXZiYXInKS5sZW5ndGggPiAwXG4gICAgfVxuXG4gICAgX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICAgIGNvbnN0IG9mZnNldENvbmYgPSB7fVxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldENvbmYuZm4gPSAoZGF0YSkgPT4ge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IHtcbiAgICAgICAgICAgIC4uLmRhdGEub2Zmc2V0cyxcbiAgICAgICAgICAgIC4uLnRoaXMuX2NvbmZpZy5vZmZzZXQoZGF0YS5vZmZzZXRzKSB8fCB7fVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXRDb25mLm9mZnNldCA9IHRoaXMuX2NvbmZpZy5vZmZzZXRcbiAgICAgIH1cblxuICAgICAgY29uc3QgcG9wcGVyQ29uZmlnID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IG9mZnNldENvbmYsXG4gICAgICAgICAgZmxpcDoge1xuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5fY29uZmlnLmZsaXBcbiAgICAgICAgICB9LFxuICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBEaXNhYmxlIFBvcHBlci5qcyBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3BwZXJDb25maWdcbiAgICB9XG5cbiAgICAvLyBTdGF0aWNcblxuICAgIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuICAgICAgICBjb25zdCBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsXG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKVxuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyBfY2xlYXJNZW51cyhldmVudCkge1xuICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8XG4gICAgICAgIGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9nZ2xlcyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1RPR0dMRSkpXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSlcbiAgICAgICAgY29uc3QgY29udGV4dCA9ICQodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSlcbiAgICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0b2dnbGVzW2ldXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudVxuICAgICAgICBpZiAoISQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmXG4gICAgICAgICAgICAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoID09PSBUQUJfS0VZQ09ERSkgJiZcbiAgICAgICAgICAgICQuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldClcbiAgICAgICAgJChwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICAgICBpZiAoaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApXG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG5cbiAgICAgICAgJChkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuICAgICAgICAkKHBhcmVudClcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG4gICAgICAgICAgLnRyaWdnZXIoJC5FdmVudChFdmVudC5ISURERU4sIHJlbGF0ZWRUYXJnZXQpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgbGV0IHBhcmVudFxuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlXG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICBzdGF0aWMgX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyBJZiBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAgIC8vICAgIC0gSWYga2V5IGlzIG5vdCB1cCBvciBkb3duID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpXG4gICAgICAgID8gZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFICYmXG4gICAgICAgIChldmVudC53aGljaCAhPT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGV2ZW50LndoaWNoICE9PSBBUlJPV19VUF9LRVlDT0RFIHx8XG4gICAgICAgICAgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgJCh0aGlzKS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJlbnQgICA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzKVxuICAgICAgY29uc3QgaXNBY3RpdmUgPSAkKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAgIGlmICghaXNBY3RpdmUgJiYgKGV2ZW50LndoaWNoICE9PSBFU0NBUEVfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gU1BBQ0VfS0VZQ09ERSkgfHxcbiAgICAgICAgICAgaXNBY3RpdmUgJiYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSB8fCBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSkpIHtcbiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICAgIGNvbnN0IHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfVE9HR0xFKVxuICAgICAgICAgICQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJylcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKSlcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgbGV0IGluZGV4ID0gaXRlbXMuaW5kZXhPZihldmVudC50YXJnZXQpXG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHsgLy8gVXBcbiAgICAgICAgaW5kZXgtLVxuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHsgLy8gRG93blxuICAgICAgICBpbmRleCsrXG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSAwXG4gICAgICB9XG5cbiAgICAgIGl0ZW1zW2luZGV4XS5mb2N1cygpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJChkb2N1bWVudClcbiAgICAub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG4gICAgLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpXG4gICAgLm9uKGAke0V2ZW50LkNMSUNLX0RBVEFfQVBJfSAke0V2ZW50LktFWVVQX0RBVEFfQVBJfWAsIERyb3Bkb3duLl9jbGVhck1lbnVzKVxuICAgIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRoaXMpLCAndG9nZ2xlJylcbiAgICB9KVxuICAgIC5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRk9STV9DSElMRCwgKGUpID0+IHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9KVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZVxuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gRHJvcGRvd25cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZVxuICB9XG5cbiAgcmV0dXJuIERyb3Bkb3duXG59KSgkLCBQb3BwZXIpXG5cbmV4cG9ydCBkZWZhdWx0IERyb3Bkb3duXG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMS4zKTogbW9kYWwuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE1vZGFsID0gKCgkKSA9PiB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBjb25zdCBOQU1FICAgICAgICAgICAgICAgPSAnbW9kYWwnXG4gIGNvbnN0IFZFUlNJT04gICAgICAgICAgICA9ICc0LjEuMydcbiAgY29uc3QgREFUQV9LRVkgICAgICAgICAgID0gJ2JzLm1vZGFsJ1xuICBjb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuICBjb25zdCBEQVRBX0FQSV9LRVkgICAgICAgPSAnLmRhdGEtYXBpJ1xuICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdXG4gIGNvbnN0IEVTQ0FQRV9LRVlDT0RFICAgICA9IDI3IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICBjb25zdCBEZWZhdWx0ID0ge1xuICAgIGJhY2tkcm9wIDogdHJ1ZSxcbiAgICBrZXlib2FyZCA6IHRydWUsXG4gICAgZm9jdXMgICAgOiB0cnVlLFxuICAgIHNob3cgICAgIDogdHJ1ZVxuICB9XG5cbiAgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gICAgYmFja2Ryb3AgOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAga2V5Ym9hcmQgOiAnYm9vbGVhbicsXG4gICAgZm9jdXMgICAgOiAnYm9vbGVhbicsXG4gICAgc2hvdyAgICAgOiAnYm9vbGVhbidcbiAgfVxuXG4gIGNvbnN0IEV2ZW50ID0ge1xuICAgIEhJREUgICAgICAgICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICAgIEhJRERFTiAgICAgICAgICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gICAgU0hPVyAgICAgICAgICAgICAgOiBgc2hvdyR7RVZFTlRfS0VZfWAsXG4gICAgU0hPV04gICAgICAgICAgICAgOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICAgIEZPQ1VTSU4gICAgICAgICAgIDogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICAgIFJFU0laRSAgICAgICAgICAgIDogYHJlc2l6ZSR7RVZFTlRfS0VZfWAsXG4gICAgQ0xJQ0tfRElTTUlTUyAgICAgOiBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZfWAsXG4gICAgS0VZRE9XTl9ESVNNSVNTICAgOiBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgICBNT1VTRVVQX0RJU01JU1MgICA6IGBtb3VzZXVwLmRpc21pc3Mke0VWRU5UX0tFWX1gLFxuICAgIE1PVVNFRE9XTl9ESVNNSVNTIDogYG1vdXNlZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YCxcbiAgICBDTElDS19EQVRBX0FQSSAgICA6IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWBcbiAgfVxuXG4gIGNvbnN0IENsYXNzTmFtZSA9IHtcbiAgICBTQ1JPTExCQVJfTUVBU1VSRVIgOiAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnLFxuICAgIEJBQ0tEUk9QICAgICAgICAgICA6ICdtb2RhbC1iYWNrZHJvcCcsXG4gICAgT1BFTiAgICAgICAgICAgICAgIDogJ21vZGFsLW9wZW4nLFxuICAgIEZBREUgICAgICAgICAgICAgICA6ICdmYWRlJyxcbiAgICBTSE9XICAgICAgICAgICAgICAgOiAnc2hvdydcbiAgfVxuXG4gIGNvbnN0IFNlbGVjdG9yID0ge1xuICAgIERJQUxPRyAgICAgICAgICAgICA6ICcubW9kYWwtZGlhbG9nJyxcbiAgICBEQVRBX1RPR0dMRSAgICAgICAgOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuICAgIERBVEFfRElTTUlTUyAgICAgICA6ICdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLFxuICAgIEZJWEVEX0NPTlRFTlQgICAgICA6ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJyxcbiAgICBTVElDS1lfQ09OVEVOVCAgICAgOiAnLnN0aWNreS10b3AnXG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNsYXNzIE1vZGFsIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2NvbmZpZyAgICAgICAgICAgICAgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKVxuICAgICAgdGhpcy5fZWxlbWVudCAgICAgICAgICAgICA9IGVsZW1lbnRcbiAgICAgIHRoaXMuX2RpYWxvZyAgICAgICAgICAgICAgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuRElBTE9HKVxuICAgICAgdGhpcy5fYmFja2Ryb3AgICAgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX2lzU2hvd24gICAgICAgICAgICAgPSBmYWxzZVxuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgICA9IGZhbHNlXG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoICAgICAgPSAwXG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuXG4gICAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgICAgcmV0dXJuIFZFUlNJT05cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gRGVmYXVsdFxuICAgIH1cblxuICAgIC8vIFB1YmxpY1xuXG4gICAgdG9nZ2xlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldClcbiAgICB9XG5cbiAgICBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2hvd0V2ZW50ID0gJC5FdmVudChFdmVudC5TSE9XLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pXG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpXG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTaG93biA9IHRydWVcblxuICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKVxuICAgICAgdGhpcy5fc2V0U2Nyb2xsYmFyKClcblxuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcblxuICAgICAgJChkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhDbGFzc05hbWUuT1BFTilcblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKVxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKFxuICAgICAgICBFdmVudC5DTElDS19ESVNNSVNTLFxuICAgICAgICBTZWxlY3Rvci5EQVRBX0RJU01JU1MsXG4gICAgICAgIChldmVudCkgPT4gdGhpcy5oaWRlKGV2ZW50KVxuICAgICAgKVxuXG4gICAgICAkKHRoaXMuX2RpYWxvZykub24oRXZlbnQuTU9VU0VET1dOX0RJU01JU1MsICgpID0+IHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuTU9VU0VVUF9ESVNNSVNTLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoJChldmVudC50YXJnZXQpLmlzKHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcCgoKSA9PiB0aGlzLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSlcbiAgICB9XG5cbiAgICBoaWRlKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpXG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpXG5cbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZVxuICAgICAgY29uc3QgdHJhbnNpdGlvbiA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKVxuICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKVxuXG4gICAgICAkKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTilcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuQ0xJQ0tfRElTTUlTUylcbiAgICAgICQodGhpcy5fZGlhbG9nKS5vZmYoRXZlbnQuTU9VU0VET1dOX0RJU01JU1MpXG5cblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uICA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudClcblxuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpXG4gICAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCAoZXZlbnQpID0+IHRoaXMuX2hpZGVNb2RhbChldmVudCkpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcblxuICAgICAgJCh3aW5kb3csIGRvY3VtZW50LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9iYWNrZHJvcCkub2ZmKEVWRU5UX0tFWSlcblxuICAgICAgdGhpcy5fY29uZmlnICAgICAgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX2VsZW1lbnQgICAgICAgICAgICAgPSBudWxsXG4gICAgICB0aGlzLl9kaWFsb2cgICAgICAgICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5fYmFja2Ryb3AgICAgICAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX2lzU2hvd24gICAgICAgICAgICAgPSBudWxsXG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAgID0gbnVsbFxuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGxcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoICAgICAgPSBudWxsXG4gICAgfVxuXG4gICAgaGFuZGxlVXBkYXRlKCkge1xuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKClcbiAgICB9XG5cbiAgICAvLyBQcml2YXRlXG5cbiAgICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0ge1xuICAgICAgICAuLi5EZWZhdWx0LFxuICAgICAgICAuLi5jb25maWdcbiAgICAgIH1cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgfVxuXG4gICAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKVxuXG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fFxuICAgICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudClcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJylcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMFxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNob3duRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHRyYW5zaXRpb25Db21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KVxuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgICAgICQodGhpcy5fZGlhbG9nKVxuICAgICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIF9lbmZvcmNlRm9jdXMoKSB7XG4gICAgICAkKGRvY3VtZW50KVxuICAgICAgICAub2ZmKEV2ZW50LkZPQ1VTSU4pIC8vIEd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgICAub24oRXZlbnQuRk9DVVNJTiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiZcbiAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmXG4gICAgICAgICAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgX3NldEVzY2FwZUV2ZW50KCkge1xuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmtleWJvYXJkKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTl9ESVNNSVNTLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICB0aGlzLmhpZGUoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKVxuICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQod2luZG93KS5vbihFdmVudC5SRVNJWkUsIChldmVudCkgPT4gdGhpcy5oYW5kbGVVcGRhdGUoZXZlbnQpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCh3aW5kb3cpLm9mZihFdmVudC5SRVNJWkUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgX2hpZGVNb2RhbCgpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4ge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5PUEVOKVxuICAgICAgICB0aGlzLl9yZXNldEFkanVzdG1lbnRzKClcbiAgICAgICAgdGhpcy5fcmVzZXRTY3JvbGxiYXIoKVxuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuSElEREVOKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBfcmVtb3ZlQmFja2Ryb3AoKSB7XG4gICAgICBpZiAodGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJCh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKClcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgICAgY29uc3QgYW5pbWF0ZSA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpXG4gICAgICAgID8gQ2xhc3NOYW1lLkZBREUgOiAnJ1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1BcblxuICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQoYW5pbWF0ZSlcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG5cbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRlKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcClcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcClcblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKVxuICAgICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVylcblxuICAgICAgICBjb25zdCBjYWxsYmFja1JlbW92ZSA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLl9yZW1vdmVCYWNrZHJvcCgpXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgICAgY29uc3QgYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKVxuXG4gICAgICAgICAgJCh0aGlzLl9iYWNrZHJvcClcbiAgICAgICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpXG4gICAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2tSZW1vdmUoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICBfYWRqdXN0RGlhbG9nKCkge1xuICAgICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID1cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHt0aGlzLl9zY3JvbGxiYXJXaWR0aH1weGBcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHt0aGlzLl9zY3JvbGxiYXJXaWR0aH1weGBcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJ1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJ1xuICAgIH1cblxuICAgIF9jaGVja1Njcm9sbGJhcigpIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IHJlY3QubGVmdCArIHJlY3QucmlnaHQgPCB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSB0aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpXG4gICAgfVxuXG4gICAgX3NldFNjcm9sbGJhcigpIHtcbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcbiAgICAgICAgY29uc3QgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKVxuICAgICAgICBjb25zdCBzdGlja3lDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLlNUSUNLWV9DT05URU5UKSlcblxuICAgICAgICAvLyBBZGp1c3QgZml4ZWQgY29udGVudCBwYWRkaW5nXG4gICAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFjdHVhbFBhZGRpbmcgPSBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodFxuICAgICAgICAgIGNvbnN0IGNhbGN1bGF0ZWRQYWRkaW5nID0gJChlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgIC5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZylcbiAgICAgICAgICAgIC5jc3MoJ3BhZGRpbmctcmlnaHQnLCBgJHtwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRofXB4YClcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBBZGp1c3Qgc3RpY2t5IGNvbnRlbnQgbWFyZ2luXG4gICAgICAgICQoc3RpY2t5Q29udGVudCkuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBjb25zdCBhY3R1YWxNYXJnaW4gPSBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0XG4gICAgICAgICAgY29uc3QgY2FsY3VsYXRlZE1hcmdpbiA9ICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKVxuICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgIC5kYXRhKCdtYXJnaW4tcmlnaHQnLCBhY3R1YWxNYXJnaW4pXG4gICAgICAgICAgICAuY3NzKCdtYXJnaW4tcmlnaHQnLCBgJHtwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gdGhpcy5fc2Nyb2xsYmFyV2lkdGh9cHhgKVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIEFkanVzdCBib2R5IHBhZGRpbmdcbiAgICAgICAgY29uc3QgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0XG4gICAgICAgIGNvbnN0IGNhbGN1bGF0ZWRQYWRkaW5nID0gJChkb2N1bWVudC5ib2R5KS5jc3MoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgICAkKGRvY3VtZW50LmJvZHkpXG4gICAgICAgICAgLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKVxuICAgICAgICAgIC5jc3MoJ3BhZGRpbmctcmlnaHQnLCBgJHtwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRofXB4YClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgY29uc3QgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKVxuICAgICAgJChmaXhlZENvbnRlbnQpLmVhY2goKGluZGV4LCBlbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPyBwYWRkaW5nIDogJydcbiAgICAgIH0pXG5cbiAgICAgIC8vIFJlc3RvcmUgc3RpY2t5IGNvbnRlbnRcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAke1NlbGVjdG9yLlNUSUNLWV9DT05URU5UfWApKVxuICAgICAgJChlbGVtZW50cykuZWFjaCgoaW5kZXgsIGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgbWFyZ2luID0gJChlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnKVxuICAgICAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuICAgICAgY29uc3QgcGFkZGluZyA9ICQoZG9jdW1lbnQuYm9keSkuZGF0YSgncGFkZGluZy1yaWdodCcpXG4gICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKVxuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnXG4gICAgfVxuXG4gICAgX2dldFNjcm9sbGJhcldpZHRoKCkgeyAvLyB0aHggZC53YWxzaFxuICAgICAgY29uc3Qgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDbGFzc05hbWUuU0NST0xMQkFSX01FQVNVUkVSXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdilcbiAgICAgIGNvbnN0IHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdilcbiAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICAgIH1cblxuICAgIC8vIFN0YXRpY1xuXG4gICAgc3RhdGljIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpXG4gICAgICAgIGNvbnN0IF9jb25maWcgPSB7XG4gICAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgICAuLi4kKHRoaXMpLmRhdGEoKSxcbiAgICAgICAgICAuLi50eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKVxuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldClcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHtcbiAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGxldCB0YXJnZXRcbiAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9ICQodGFyZ2V0KS5kYXRhKERBVEFfS0VZKVxuICAgICAgPyAndG9nZ2xlJyA6IHtcbiAgICAgICAgLi4uJCh0YXJnZXQpLmRhdGEoKSxcbiAgICAgICAgLi4uJCh0aGlzKS5kYXRhKClcbiAgICAgIH1cblxuICAgIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIH1cblxuICAgIGNvbnN0ICR0YXJnZXQgPSAkKHRhcmdldCkub25lKEV2ZW50LlNIT1csIChzaG93RXZlbnQpID0+IHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gT25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgJHRhcmdldC5vbmUoRXZlbnQuSElEREVOLCAoKSA9PiB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgdGhpcy5mb2N1cygpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRhcmdldCksIGNvbmZpZywgdGhpcylcbiAgfSlcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2VcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IE1vZGFsXG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2VcbiAgfVxuXG4gIHJldHVybiBNb2RhbFxufSkoJClcblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IHRvb2x0aXAuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFRvb2x0aXAgPSAoKCQpID0+IHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNvbnN0IE5BTUUgICAgICAgICAgICAgICA9ICd0b29sdGlwJ1xuICBjb25zdCBWRVJTSU9OICAgICAgICAgICAgPSAnNC4xLjMnXG4gIGNvbnN0IERBVEFfS0VZICAgICAgICAgICA9ICdicy50b29sdGlwJ1xuICBjb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdXG4gIGNvbnN0IENMQVNTX1BSRUZJWCAgICAgICA9ICdicy10b29sdGlwJ1xuICBjb25zdCBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKGAoXnxcXFxccykke0NMQVNTX1BSRUZJWH1cXFxcUytgLCAnZycpXG5cbiAgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gICAgYW5pbWF0aW9uICAgICAgICAgICA6ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZSAgICAgICAgICAgIDogJ3N0cmluZycsXG4gICAgdGl0bGUgICAgICAgICAgICAgICA6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyICAgICAgICAgICAgIDogJ3N0cmluZycsXG4gICAgZGVsYXkgICAgICAgICAgICAgICA6ICcobnVtYmVyfG9iamVjdCknLFxuICAgIGh0bWwgICAgICAgICAgICAgICAgOiAnYm9vbGVhbicsXG4gICAgc2VsZWN0b3IgICAgICAgICAgICA6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICBwbGFjZW1lbnQgICAgICAgICAgIDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBvZmZzZXQgICAgICAgICAgICAgIDogJyhudW1iZXJ8c3RyaW5nKScsXG4gICAgY29udGFpbmVyICAgICAgICAgICA6ICcoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbiknLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50ICAgOiAnKHN0cmluZ3xhcnJheSknLFxuICAgIGJvdW5kYXJ5ICAgICAgICAgICAgOiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfVxuXG4gIGNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gICAgQVVUTyAgIDogJ2F1dG8nLFxuICAgIFRPUCAgICA6ICd0b3AnLFxuICAgIFJJR0hUICA6ICdyaWdodCcsXG4gICAgQk9UVE9NIDogJ2JvdHRvbScsXG4gICAgTEVGVCAgIDogJ2xlZnQnXG4gIH1cblxuICBjb25zdCBEZWZhdWx0ID0ge1xuICAgIGFuaW1hdGlvbiAgICAgICAgICAgOiB0cnVlLFxuICAgIHRlbXBsYXRlICAgICAgICAgICAgOiAnPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyICAgICAgICAgICAgIDogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZSAgICAgICAgICAgICAgIDogJycsXG4gICAgZGVsYXkgICAgICAgICAgICAgICA6IDAsXG4gICAgaHRtbCAgICAgICAgICAgICAgICA6IGZhbHNlLFxuICAgIHNlbGVjdG9yICAgICAgICAgICAgOiBmYWxzZSxcbiAgICBwbGFjZW1lbnQgICAgICAgICAgIDogJ3RvcCcsXG4gICAgb2Zmc2V0ICAgICAgICAgICAgICA6IDAsXG4gICAgY29udGFpbmVyICAgICAgICAgICA6IGZhbHNlLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50ICAgOiAnZmxpcCcsXG4gICAgYm91bmRhcnkgICAgICAgICAgICA6ICdzY3JvbGxQYXJlbnQnXG4gIH1cblxuICBjb25zdCBIb3ZlclN0YXRlID0ge1xuICAgIFNIT1cgOiAnc2hvdycsXG4gICAgT1VUICA6ICdvdXQnXG4gIH1cblxuICBjb25zdCBFdmVudCA9IHtcbiAgICBISURFICAgICAgIDogYGhpZGUke0VWRU5UX0tFWX1gLFxuICAgIEhJRERFTiAgICAgOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcbiAgICBTSE9XICAgICAgIDogYHNob3cke0VWRU5UX0tFWX1gLFxuICAgIFNIT1dOICAgICAgOiBgc2hvd24ke0VWRU5UX0tFWX1gLFxuICAgIElOU0VSVEVEICAgOiBgaW5zZXJ0ZWQke0VWRU5UX0tFWX1gLFxuICAgIENMSUNLICAgICAgOiBgY2xpY2ske0VWRU5UX0tFWX1gLFxuICAgIEZPQ1VTSU4gICAgOiBgZm9jdXNpbiR7RVZFTlRfS0VZfWAsXG4gICAgRk9DVVNPVVQgICA6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXG4gICAgTU9VU0VFTlRFUiA6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcbiAgICBNT1VTRUxFQVZFIDogYG1vdXNlbGVhdmUke0VWRU5UX0tFWX1gXG4gIH1cblxuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgRkFERSA6ICdmYWRlJyxcbiAgICBTSE9XIDogJ3Nob3cnXG4gIH1cblxuICBjb25zdCBTZWxlY3RvciA9IHtcbiAgICBUT09MVElQICAgICAgIDogJy50b29sdGlwJyxcbiAgICBUT09MVElQX0lOTkVSIDogJy50b29sdGlwLWlubmVyJyxcbiAgICBBUlJPVyAgICAgICAgIDogJy5hcnJvdydcbiAgfVxuXG4gIGNvbnN0IFRyaWdnZXIgPSB7XG4gICAgSE9WRVIgIDogJ2hvdmVyJyxcbiAgICBGT0NVUyAgOiAnZm9jdXMnLFxuICAgIENMSUNLICA6ICdjbGljaycsXG4gICAgTUFOVUFMIDogJ21hbnVhbCdcbiAgfVxuXG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBjbGFzcyBUb29sdGlwIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAqL1xuICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcCB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpXG4gICAgICB9XG5cbiAgICAgIC8vIHByaXZhdGVcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCAgICAgPSB0cnVlXG4gICAgICB0aGlzLl90aW1lb3V0ICAgICAgID0gMFxuICAgICAgdGhpcy5faG92ZXJTdGF0ZSAgICA9ICcnXG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge31cbiAgICAgIHRoaXMuX3BvcHBlciAgICAgICAgPSBudWxsXG5cbiAgICAgIC8vIFByb3RlY3RlZFxuICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxuICAgICAgdGhpcy5jb25maWcgID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZylcbiAgICAgIHRoaXMudGlwICAgICA9IG51bGxcblxuICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKClcbiAgICB9XG5cbiAgICAvLyBHZXR0ZXJzXG5cbiAgICBzdGF0aWMgZ2V0IFZFUlNJT04oKSB7XG4gICAgICByZXR1cm4gVkVSU0lPTlxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICAgIHJldHVybiBEZWZhdWx0XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgICAgcmV0dXJuIE5BTUVcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERBVEFfS0VZKCkge1xuICAgICAgcmV0dXJuIERBVEFfS0VZXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBFdmVudCgpIHtcbiAgICAgIHJldHVybiBFdmVudFxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRVZFTlRfS0VZKCkge1xuICAgICAgcmV0dXJuIEVWRU5UX0tFWVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgICByZXR1cm4gRGVmYXVsdFR5cGVcbiAgICB9XG5cbiAgICAvLyBQdWJsaWNcblxuICAgIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWVcbiAgICB9XG5cbiAgICBkaXNhYmxlKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2VcbiAgICB9XG5cbiAgICB0b2dnbGVFbmFibGVkKCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZFxuICAgIH1cblxuICAgIHRvZ2dsZShldmVudCkge1xuICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb25zdCBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWVxuICAgICAgICBsZXQgY29udGV4dCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KVxuXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihcbiAgICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgICB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpXG4gICAgICAgICAgKVxuICAgICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrXG5cbiAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICAgIGNvbnRleHQuX2VudGVyKG51bGwsIGNvbnRleHQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dClcblxuICAgICAgJC5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSlcblxuICAgICAgJCh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSlcbiAgICAgICQodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vZmYoJ2hpZGUuYnMubW9kYWwnKVxuXG4gICAgICBpZiAodGhpcy50aXApIHtcbiAgICAgICAgJCh0aGlzLnRpcCkucmVtb3ZlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNFbmFibGVkICAgICA9IG51bGxcbiAgICAgIHRoaXMuX3RpbWVvdXQgICAgICAgPSBudWxsXG4gICAgICB0aGlzLl9ob3ZlclN0YXRlICAgID0gbnVsbFxuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IG51bGxcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsXG4gICAgICB0aGlzLmVsZW1lbnQgPSBudWxsXG4gICAgICB0aGlzLmNvbmZpZyAgPSBudWxsXG4gICAgICB0aGlzLnRpcCAgICAgPSBudWxsXG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgIGlmICgkKHRoaXMuZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJylcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2hvd0V2ZW50ID0gJC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpXG4gICAgICBpZiAodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudClcblxuICAgICAgICBjb25zdCBpc0luVGhlRG9tID0gJC5jb250YWlucyhcbiAgICAgICAgICB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgICAgdGhpcy5lbGVtZW50XG4gICAgICAgIClcblxuICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0aXAgICA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpXG4gICAgICAgIGNvbnN0IHRpcElkID0gVXRpbC5nZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKVxuXG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpXG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgICB0aGlzLnNldENvbnRlbnQoKVxuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAkKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkZBREUpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwbGFjZW1lbnQgID0gdHlwZW9mIHRoaXMuY29uZmlnLnBsYWNlbWVudCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpXG4gICAgICAgICAgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnRcblxuICAgICAgICBjb25zdCBhdHRhY2htZW50ID0gdGhpcy5fZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpXG4gICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpXG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiAkKGRvY3VtZW50KS5maW5kKHRoaXMuY29uZmlnLmNvbnRhaW5lcilcblxuICAgICAgICAkKHRpcCkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKVxuXG4gICAgICAgIGlmICghJC5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMudGlwKSkge1xuICAgICAgICAgICQodGlwKS5hcHBlbmRUbyhjb250YWluZXIpXG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKVxuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHtcbiAgICAgICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXG4gICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmNvbmZpZy5vZmZzZXRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICAgIGJlaGF2aW9yOiB0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IFNlbGVjdG9yLkFSUk9XXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLmNvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgb25DcmVhdGU6IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5vcmlnaW5hbFBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblVwZGF0ZTogKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICAkKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fZml4VHJhbnNpdGlvbigpXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHByZXZIb3ZlclN0YXRlID0gdGhpcy5faG92ZXJTdGF0ZVxuICAgICAgICAgIHRoaXMuX2hvdmVyU3RhdGUgICAgID0gbnVsbFxuXG4gICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTilcblxuICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCQodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApXG5cbiAgICAgICAgICAkKHRoaXMudGlwKVxuICAgICAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGlkZShjYWxsYmFjaykge1xuICAgICAgY29uc3QgdGlwICAgICAgID0gdGhpcy5nZXRUaXBFbGVtZW50KClcbiAgICAgIGNvbnN0IGhpZGVFdmVudCA9ICQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKVxuICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jbGVhblRpcENsYXNzKClcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScpXG4gICAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKVxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudClcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgJCh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKVxuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJC5ub29wKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuQ0xJQ0tdID0gZmFsc2VcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5GT0NVU10gPSBmYWxzZVxuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlXG5cbiAgICAgIGlmICgkKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aXApXG5cbiAgICAgICAgJCh0aXApXG4gICAgICAgICAgLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJydcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUHJvdGVjdGVkXG5cbiAgICBpc1dpdGhDb250ZW50KCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKVxuICAgIH1cblxuICAgIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhgJHtDTEFTU19QUkVGSVh9LSR7YXR0YWNobWVudH1gKVxuICAgIH1cblxuICAgIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICB0aGlzLnRpcCA9IHRoaXMudGlwIHx8ICQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdXG4gICAgICByZXR1cm4gdGhpcy50aXBcbiAgICB9XG5cbiAgICBzZXRDb250ZW50KCkge1xuICAgICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KClcbiAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJCh0aXAucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5UT09MVElQX0lOTkVSKSksIHRoaXMuZ2V0VGl0bGUoKSlcbiAgICAgICQodGlwKS5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuRkFERX0gJHtDbGFzc05hbWUuU0hPV31gKVxuICAgIH1cblxuICAgIHNldEVsZW1lbnRDb250ZW50KCRlbGVtZW50LCBjb250ZW50KSB7XG4gICAgICBjb25zdCBodG1sID0gdGhpcy5jb25maWcuaHRtbFxuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgaWYgKCEkKGNvbnRlbnQpLnBhcmVudCgpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgJGVsZW1lbnQuZW1wdHkoKS5hcHBlbmQoY29udGVudClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQudGV4dCgkKGNvbnRlbnQpLnRleHQoKSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsZW1lbnRbaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10oY29udGVudClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRUaXRsZSgpIHtcbiAgICAgIGxldCB0aXRsZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKVxuXG4gICAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyB0aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudClcbiAgICAgICAgICA6IHRoaXMuY29uZmlnLnRpdGxlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aXRsZVxuICAgIH1cblxuICAgIC8vIFByaXZhdGVcblxuICAgIF9nZXRBdHRhY2htZW50KHBsYWNlbWVudCkge1xuICAgICAgcmV0dXJuIEF0dGFjaG1lbnRNYXBbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldXG4gICAgfVxuXG4gICAgX3NldExpc3RlbmVycygpIHtcbiAgICAgIGNvbnN0IHRyaWdnZXJzID0gdGhpcy5jb25maWcudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICAgIHRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAkKHRoaXMuZWxlbWVudCkub24oXG4gICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLFxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2VsZWN0b3IsXG4gICAgICAgICAgICAoZXZlbnQpID0+IHRoaXMudG9nZ2xlKGV2ZW50KVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIGlmICh0cmlnZ2VyICE9PSBUcmlnZ2VyLk1BTlVBTCkge1xuICAgICAgICAgIGNvbnN0IGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSXG4gICAgICAgICAgICA/IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUlxuICAgICAgICAgICAgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU5cbiAgICAgICAgICBjb25zdCBldmVudE91dCA9IHRyaWdnZXIgPT09IFRyaWdnZXIuSE9WRVJcbiAgICAgICAgICAgID8gdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFXG4gICAgICAgICAgICA6IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVRcblxuICAgICAgICAgICQodGhpcy5lbGVtZW50KVxuICAgICAgICAgICAgLm9uKFxuICAgICAgICAgICAgICBldmVudEluLFxuICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZWxlY3RvcixcbiAgICAgICAgICAgICAgKGV2ZW50KSA9PiB0aGlzLl9lbnRlcihldmVudClcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5vbihcbiAgICAgICAgICAgICAgZXZlbnRPdXQsXG4gICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNlbGVjdG9yLFxuICAgICAgICAgICAgICAoZXZlbnQpID0+IHRoaXMuX2xlYXZlKGV2ZW50KVxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9uKFxuICAgICAgICAgICdoaWRlLmJzLm1vZGFsJyxcbiAgICAgICAgICAoKSA9PiB0aGlzLmhpZGUoKVxuICAgICAgICApXG4gICAgICB9KVxuXG4gICAgICBpZiAodGhpcy5jb25maWcuc2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICAgICAgdHJpZ2dlcjogJ21hbnVhbCcsXG4gICAgICAgICAgc2VsZWN0b3I6ICcnXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ZpeFRpdGxlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfZml4VGl0bGUoKSB7XG4gICAgICBjb25zdCB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fFxuICAgICAgICAgdGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICdkYXRhLW9yaWdpbmFsLXRpdGxlJyxcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8ICcnXG4gICAgICAgIClcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIGNvbnN0IGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZXG5cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KVxuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKVxuICAgICAgICApXG4gICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KVxuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcbiAgICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNpbicgPyBUcmlnZ2VyLkZPQ1VTIDogVHJpZ2dlci5IT1ZFUlxuICAgICAgICBdID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoJChjb250ZXh0LmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpIHx8XG4gICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIb3ZlclN0YXRlLlNIT1cpIHtcbiAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPV1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpXG5cbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1dcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgICBjb250ZXh0LnNob3coKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgICAgY29udGV4dC5zaG93KClcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdylcbiAgICB9XG5cbiAgICBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIGNvbnN0IGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZXG5cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KVxuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKFxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKVxuICAgICAgICApXG4gICAgICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KVxuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcbiAgICAgICAgICBldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJcbiAgICAgICAgXSA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KVxuXG4gICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVRcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgY29udGV4dC5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKVxuICAgICAgICB9XG4gICAgICB9LCBjb250ZXh0LmNvbmZpZy5kZWxheS5oaWRlKVxuICAgIH1cblxuICAgIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgZm9yIChjb25zdCB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSB7XG4gICAgICAgIC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgICAgLi4uJCh0aGlzLmVsZW1lbnQpLmRhdGEoKSxcbiAgICAgICAgLi4udHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge31cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgICBzaG93OiBjb25maWcuZGVsYXksXG4gICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKVxuICAgICAgfVxuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhcbiAgICAgICAgTkFNRSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlXG4gICAgICApXG5cbiAgICAgIHJldHVybiBjb25maWdcbiAgICB9XG5cbiAgICBfZ2V0RGVsZWdhdGVDb25maWcoKSB7XG4gICAgICBjb25zdCBjb25maWcgPSB7fVxuXG4gICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5jb25maWcpIHtcbiAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2tleV0gIT09IHRoaXMuY29uZmlnW2tleV0pIHtcbiAgICAgICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5jb25maWdba2V5XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgfVxuXG4gICAgX2NsZWFuVGlwQ2xhc3MoKSB7XG4gICAgICBjb25zdCAkdGlwID0gJCh0aGlzLmdldFRpcEVsZW1lbnQoKSlcbiAgICAgIGNvbnN0IHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWClcbiAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGgpIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGEpIHtcbiAgICAgIGNvbnN0IHBvcHBlckluc3RhbmNlID0gcG9wcGVyRGF0YS5pbnN0YW5jZVxuICAgICAgdGhpcy50aXAgPSBwb3BwZXJJbnN0YW5jZS5wb3BwZXJcbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKVxuICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChwb3BwZXJEYXRhLnBsYWNlbWVudCkpXG4gICAgfVxuXG4gICAgX2ZpeFRyYW5zaXRpb24oKSB7XG4gICAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKVxuICAgICAgY29uc3QgaW5pdENvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnLmFuaW1hdGlvblxuICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAkKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUpXG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZVxuICAgICAgdGhpcy5oaWRlKClcbiAgICAgIHRoaXMuc2hvdygpXG4gICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uXG4gICAgfVxuXG4gICAgLy8gU3RhdGljXG5cbiAgICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZ1xuXG4gICAgICAgIGlmICghZGF0YSAmJiAvZGlzcG9zZXxoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBfY29uZmlnKVxuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlXG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUb29sdGlwXG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZVxuICB9XG5cbiAgcmV0dXJuIFRvb2x0aXBcbn0pKCQsIFBvcHBlcilcblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcFxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi90b29sdGlwJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFBvcG92ZXIgPSAoKCQpID0+IHtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNvbnN0IE5BTUUgICAgICAgICAgICAgICAgPSAncG9wb3ZlcidcbiAgY29uc3QgVkVSU0lPTiAgICAgICAgICAgICA9ICc0LjEuMydcbiAgY29uc3QgREFUQV9LRVkgICAgICAgICAgICA9ICdicy5wb3BvdmVyJ1xuICBjb25zdCBFVkVOVF9LRVkgICAgICAgICAgID0gYC4ke0RBVEFfS0VZfWBcbiAgY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUICA9ICQuZm5bTkFNRV1cbiAgY29uc3QgQ0xBU1NfUFJFRklYICAgICAgICA9ICdicy1wb3BvdmVyJ1xuICBjb25zdCBCU0NMU19QUkVGSVhfUkVHRVggID0gbmV3IFJlZ0V4cChgKF58XFxcXHMpJHtDTEFTU19QUkVGSVh9XFxcXFMrYCwgJ2cnKVxuXG4gIGNvbnN0IERlZmF1bHQgPSB7XG4gICAgLi4uVG9vbHRpcC5EZWZhdWx0LFxuICAgIHBsYWNlbWVudCA6ICdyaWdodCcsXG4gICAgdHJpZ2dlciAgIDogJ2NsaWNrJyxcbiAgICBjb250ZW50ICAgOiAnJyxcbiAgICB0ZW1wbGF0ZSAgOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J1xuICB9XG5cbiAgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gICAgLi4uVG9vbHRpcC5EZWZhdWx0VHlwZSxcbiAgICBjb250ZW50IDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH1cblxuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgRkFERSA6ICdmYWRlJyxcbiAgICBTSE9XIDogJ3Nob3cnXG4gIH1cblxuICBjb25zdCBTZWxlY3RvciA9IHtcbiAgICBUSVRMRSAgIDogJy5wb3BvdmVyLWhlYWRlcicsXG4gICAgQ09OVEVOVCA6ICcucG9wb3Zlci1ib2R5J1xuICB9XG5cbiAgY29uc3QgRXZlbnQgPSB7XG4gICAgSElERSAgICAgICA6IGBoaWRlJHtFVkVOVF9LRVl9YCxcbiAgICBISURERU4gICAgIDogYGhpZGRlbiR7RVZFTlRfS0VZfWAsXG4gICAgU0hPVyAgICAgICA6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgICBTSE9XTiAgICAgIDogYHNob3duJHtFVkVOVF9LRVl9YCxcbiAgICBJTlNFUlRFRCAgIDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcbiAgICBDTElDSyAgICAgIDogYGNsaWNrJHtFVkVOVF9LRVl9YCxcbiAgICBGT0NVU0lOICAgIDogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxuICAgIEZPQ1VTT1VUICAgOiBgZm9jdXNvdXQke0VWRU5UX0tFWX1gLFxuICAgIE1PVVNFRU5URVIgOiBgbW91c2VlbnRlciR7RVZFTlRfS0VZfWAsXG4gICAgTU9VU0VMRUFWRSA6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YFxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBjbGFzcyBQb3BvdmVyIGV4dGVuZHMgVG9vbHRpcCB7XG4gICAgLy8gR2V0dGVyc1xuXG4gICAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgICAgcmV0dXJuIFZFUlNJT05cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gRGVmYXVsdFxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICAgIHJldHVybiBOQU1FXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBEQVRBX0tFWSgpIHtcbiAgICAgIHJldHVybiBEQVRBX0tFWVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgRXZlbnQoKSB7XG4gICAgICByZXR1cm4gRXZlbnRcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IEVWRU5UX0tFWSgpIHtcbiAgICAgIHJldHVybiBFVkVOVF9LRVlcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgICAgcmV0dXJuIERlZmF1bHRUeXBlXG4gICAgfVxuXG4gICAgLy8gT3ZlcnJpZGVzXG5cbiAgICBpc1dpdGhDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KClcbiAgICB9XG5cbiAgICBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgICAgJCh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoYCR7Q0xBU1NfUFJFRklYfS0ke2F0dGFjaG1lbnR9YClcbiAgICB9XG5cbiAgICBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXVxuICAgICAgcmV0dXJuIHRoaXMudGlwXG4gICAgfVxuXG4gICAgc2V0Q29udGVudCgpIHtcbiAgICAgIGNvbnN0ICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKVxuXG4gICAgICAvLyBXZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5USVRMRSksIHRoaXMuZ2V0VGl0bGUoKSlcbiAgICAgIGxldCBjb250ZW50ID0gdGhpcy5fZ2V0Q29udGVudCgpXG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpXG4gICAgICB9XG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5DT05URU5UKSwgY29udGVudClcblxuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhgJHtDbGFzc05hbWUuRkFERX0gJHtDbGFzc05hbWUuU0hPV31gKVxuICAgIH1cblxuICAgIC8vIFByaXZhdGVcblxuICAgIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8XG4gICAgICAgIHRoaXMuY29uZmlnLmNvbnRlbnRcbiAgICB9XG5cbiAgICBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgIGNvbnN0ICR0aXAgPSAkKHRoaXMuZ2V0VGlwRWxlbWVudCgpKVxuICAgICAgY29uc3QgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKVxuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTdGF0aWNcblxuICAgIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBkYXRhID0gJCh0aGlzKS5kYXRhKERBVEFfS0VZKVxuICAgICAgICBjb25zdCBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsXG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpXG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2VcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFBvcG92ZXJcbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1RcbiAgICByZXR1cm4gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlXG4gIH1cblxuICByZXR1cm4gUG9wb3ZlclxufSkoJClcblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlclxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJ1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY0LjEuMyk6IHNjcm9sbHNweS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgU2Nyb2xsU3B5ID0gKCgkKSA9PiB7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBjb25zdCBOQU1FICAgICAgICAgICAgICAgPSAnc2Nyb2xsc3B5J1xuICBjb25zdCBWRVJTSU9OICAgICAgICAgICAgPSAnNC4xLjMnXG4gIGNvbnN0IERBVEFfS0VZICAgICAgICAgICA9ICdicy5zY3JvbGxzcHknXG4gIGNvbnN0IEVWRU5UX0tFWSAgICAgICAgICA9IGAuJHtEQVRBX0tFWX1gXG4gIGNvbnN0IERBVEFfQVBJX0tFWSAgICAgICA9ICcuZGF0YS1hcGknXG4gIGNvbnN0IEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV1cblxuICBjb25zdCBEZWZhdWx0ID0ge1xuICAgIG9mZnNldCA6IDEwLFxuICAgIG1ldGhvZCA6ICdhdXRvJyxcbiAgICB0YXJnZXQgOiAnJ1xuICB9XG5cbiAgY29uc3QgRGVmYXVsdFR5cGUgPSB7XG4gICAgb2Zmc2V0IDogJ251bWJlcicsXG4gICAgbWV0aG9kIDogJ3N0cmluZycsXG4gICAgdGFyZ2V0IDogJyhzdHJpbmd8ZWxlbWVudCknXG4gIH1cblxuICBjb25zdCBFdmVudCA9IHtcbiAgICBBQ1RJVkFURSAgICAgIDogYGFjdGl2YXRlJHtFVkVOVF9LRVl9YCxcbiAgICBTQ1JPTEwgICAgICAgIDogYHNjcm9sbCR7RVZFTlRfS0VZfWAsXG4gICAgTE9BRF9EQVRBX0FQSSA6IGBsb2FkJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YFxuICB9XG5cbiAgY29uc3QgQ2xhc3NOYW1lID0ge1xuICAgIERST1BET1dOX0lURU0gOiAnZHJvcGRvd24taXRlbScsXG4gICAgRFJPUERPV05fTUVOVSA6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkUgICAgICAgIDogJ2FjdGl2ZSdcbiAgfVxuXG4gIGNvbnN0IFNlbGVjdG9yID0ge1xuICAgIERBVEFfU1BZICAgICAgICA6ICdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nLFxuICAgIEFDVElWRSAgICAgICAgICA6ICcuYWN0aXZlJyxcbiAgICBOQVZfTElTVF9HUk9VUCAgOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIE5BVl9MSU5LUyAgICAgICA6ICcubmF2LWxpbmsnLFxuICAgIE5BVl9JVEVNUyAgICAgICA6ICcubmF2LWl0ZW0nLFxuICAgIExJU1RfSVRFTVMgICAgICA6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICBEUk9QRE9XTiAgICAgICAgOiAnLmRyb3Bkb3duJyxcbiAgICBEUk9QRE9XTl9JVEVNUyAgOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgIERST1BET1dOX1RPR0dMRSA6ICcuZHJvcGRvd24tdG9nZ2xlJ1xuICB9XG5cbiAgY29uc3QgT2Zmc2V0TWV0aG9kID0ge1xuICAgIE9GRlNFVCAgIDogJ29mZnNldCcsXG4gICAgUE9TSVRJT04gOiAncG9zaXRpb24nXG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIGNsYXNzIFNjcm9sbFNweSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ICAgICAgID0gZWxlbWVudFxuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudFxuICAgICAgdGhpcy5fY29uZmlnICAgICAgICA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpXG4gICAgICB0aGlzLl9zZWxlY3RvciAgICAgID0gYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTZWxlY3Rvci5OQVZfTElOS1N9LGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3RoaXMuX2NvbmZpZy50YXJnZXR9ICR7U2VsZWN0b3IuTElTVF9JVEVNU30sYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gJHtTZWxlY3Rvci5EUk9QRE9XTl9JVEVNU31gXG4gICAgICB0aGlzLl9vZmZzZXRzICAgICAgID0gW11cbiAgICAgIHRoaXMuX3RhcmdldHMgICAgICAgPSBbXVxuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICA9IG51bGxcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCAgPSAwXG5cbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub24oRXZlbnQuU0NST0xMLCAoZXZlbnQpID0+IHRoaXMuX3Byb2Nlc3MoZXZlbnQpKVxuXG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgICAgdGhpcy5fcHJvY2VzcygpXG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuXG4gICAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgICAgcmV0dXJuIFZFUlNJT05cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgICByZXR1cm4gRGVmYXVsdFxuICAgIH1cblxuICAgIC8vIFB1YmxpY1xuXG4gICAgcmVmcmVzaCgpIHtcbiAgICAgIGNvbnN0IGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvd1xuICAgICAgICA/IE9mZnNldE1ldGhvZC5PRkZTRVQgOiBPZmZzZXRNZXRob2QuUE9TSVRJT05cblxuICAgICAgY29uc3Qgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nXG4gICAgICAgID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2RcblxuICAgICAgY29uc3Qgb2Zmc2V0QmFzZSA9IG9mZnNldE1ldGhvZCA9PT0gT2Zmc2V0TWV0aG9kLlBPU0lUSU9OXG4gICAgICAgID8gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgOiAwXG5cbiAgICAgIHRoaXMuX29mZnNldHMgPSBbXVxuICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdXG5cbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpXG5cbiAgICAgIGNvbnN0IHRhcmdldHMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKVxuXG4gICAgICB0YXJnZXRzXG4gICAgICAgIC5tYXAoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICBsZXQgdGFyZ2V0XG4gICAgICAgICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudClcblxuICAgICAgICAgIGlmICh0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3RvcilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xuICAgICAgICAgICAgICAvLyBUT0RPIChmYXQpOiByZW1vdmUgc2tldGNoIHJlbGlhbmNlIG9uIGpRdWVyeSBwb3NpdGlvbi9vZmZzZXRcbiAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAkKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsXG4gICAgICAgICAgICAgICAgdGFyZ2V0U2VsZWN0b3JcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYVswXSAtIGJbMF0pXG4gICAgICAgIC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgdGhpcy5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pXG4gICAgICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSlcbiAgICAgICQodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSlcblxuICAgICAgdGhpcy5fZWxlbWVudCAgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBudWxsXG4gICAgICB0aGlzLl9jb25maWcgICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5fc2VsZWN0b3IgICAgICA9IG51bGxcbiAgICAgIHRoaXMuX29mZnNldHMgICAgICAgPSBudWxsXG4gICAgICB0aGlzLl90YXJnZXRzICAgICAgID0gbnVsbFxuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICA9IG51bGxcbiAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCAgPSBudWxsXG4gICAgfVxuXG4gICAgLy8gUHJpdmF0ZVxuXG4gICAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uRGVmYXVsdCxcbiAgICAgICAgLi4udHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge31cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBsZXQgaWQgPSAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJylcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIGlkID0gVXRpbC5nZXRVSUQoTkFNRSlcbiAgICAgICAgICAkKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJywgaWQpXG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLnRhcmdldCA9IGAjJHtpZH1gXG4gICAgICB9XG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpXG5cbiAgICAgIHJldHVybiBjb25maWdcbiAgICB9XG5cbiAgICBfZ2V0U2Nyb2xsVG9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvd1xuICAgICAgICA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcFxuICAgIH1cblxuICAgIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0XG4gICAgICApXG4gICAgfVxuXG4gICAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3dcbiAgICAgICAgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxuICAgIH1cblxuICAgIF9wcm9jZXNzKCkge1xuICAgICAgY29uc3Qgc2Nyb2xsVG9wICAgID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0XG4gICAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKVxuICAgICAgY29uc3QgbWF4U2Nyb2xsICAgID0gdGhpcy5fY29uZmlnLm9mZnNldCArXG4gICAgICAgIHNjcm9sbEhlaWdodCAtXG4gICAgICAgIHRoaXMuX2dldE9mZnNldEhlaWdodCgpXG5cbiAgICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgICB0aGlzLnJlZnJlc2goKVxuICAgICAgfVxuXG4gICAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoIC0gMV1cblxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICAgIHRoaXMuX2NsZWFyKClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9mZnNldExlbmd0aCA9IHRoaXMuX29mZnNldHMubGVuZ3RoXG4gICAgICBmb3IgKGxldCBpID0gb2Zmc2V0TGVuZ3RoOyBpLS07KSB7XG4gICAgICAgIGNvbnN0IGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmXG4gICAgICAgICAgICBzY3JvbGxUb3AgPj0gdGhpcy5fb2Zmc2V0c1tpXSAmJlxuICAgICAgICAgICAgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSlcblxuICAgICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICAgIHRoaXMuX2NsZWFyKClcblxuICAgICAgbGV0IHF1ZXJpZXMgPSB0aGlzLl9zZWxlY3Rvci5zcGxpdCgnLCcpXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyb3ctYm9keS1zdHlsZVxuICAgICAgcXVlcmllcyA9IHF1ZXJpZXMubWFwKChzZWxlY3RvcikgPT4ge1xuICAgICAgICByZXR1cm4gYCR7c2VsZWN0b3J9W2RhdGEtdGFyZ2V0PVwiJHt0YXJnZXR9XCJdLGAgK1xuICAgICAgICAgICAgICAgYCR7c2VsZWN0b3J9W2hyZWY9XCIke3RhcmdldH1cIl1gXG4gICAgICB9KVxuXG4gICAgICBjb25zdCAkbGluayA9ICQoW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJpZXMuam9pbignLCcpKSkpXG5cbiAgICAgIGlmICgkbGluay5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fSVRFTSkpIHtcbiAgICAgICAgJGxpbmsuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTikuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGlua3MgcGFyZW50cyBhcyBhY3RpdmVcbiAgICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG4gICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApLnByZXYoYCR7U2VsZWN0b3IuTkFWX0xJTktTfSwgJHtTZWxlY3Rvci5MSVNUX0lURU1TfWApLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgICAgIC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yLk5BVl9JVEVNUykuY2hpbGRyZW4oU2VsZWN0b3IuTkFWX0xJTktTKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgICB9KVxuICAgIH1cblxuICAgIF9jbGVhcigpIHtcbiAgICAgIGNvbnN0IG5vZGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSlcbiAgICAgICQobm9kZXMpLmZpbHRlcihTZWxlY3Rvci5BQ1RJVkUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpXG4gICAgfVxuXG4gICAgLy8gU3RhdGljXG5cbiAgICBzdGF0aWMgX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgZGF0YSA9ICQodGhpcykuZGF0YShEQVRBX0tFWSlcbiAgICAgICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZ1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgU2Nyb2xsU3B5KHRoaXMsIF9jb25maWcpXG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksICgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxTcHlzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfU1BZKSlcblxuICAgIGNvbnN0IHNjcm9sbFNweXNMZW5ndGggPSBzY3JvbGxTcHlzLmxlbmd0aFxuICAgIGZvciAobGV0IGkgPSBzY3JvbGxTcHlzTGVuZ3RoOyBpLS07KSB7XG4gICAgICBjb25zdCAkc3B5ID0gJChzY3JvbGxTcHlzW2ldKVxuICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSlcbiAgICB9XG4gIH0pXG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZVxuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5XG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gICAgcmV0dXJuIFNjcm9sbFNweS5falF1ZXJ5SW50ZXJmYWNlXG4gIH1cblxuICByZXR1cm4gU2Nyb2xsU3B5XG59KSgkKVxuXG5leHBvcnQgZGVmYXVsdCBTY3JvbGxTcHlcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBVdGlsIGZyb20gJy4vdXRpbCdcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NC4xLjMpOiB0YWIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFRhYiA9ICgoJCkgPT4ge1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgY29uc3QgTkFNRSAgICAgICAgICAgICAgID0gJ3RhYidcbiAgY29uc3QgVkVSU0lPTiAgICAgICAgICAgID0gJzQuMS4zJ1xuICBjb25zdCBEQVRBX0tFWSAgICAgICAgICAgPSAnYnMudGFiJ1xuICBjb25zdCBFVkVOVF9LRVkgICAgICAgICAgPSBgLiR7REFUQV9LRVl9YFxuICBjb25zdCBEQVRBX0FQSV9LRVkgICAgICAgPSAnLmRhdGEtYXBpJ1xuICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW05BTUVdXG5cbiAgY29uc3QgRXZlbnQgPSB7XG4gICAgSElERSAgICAgICAgICAgOiBgaGlkZSR7RVZFTlRfS0VZfWAsXG4gICAgSElEREVOICAgICAgICAgOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcbiAgICBTSE9XICAgICAgICAgICA6IGBzaG93JHtFVkVOVF9LRVl9YCxcbiAgICBTSE9XTiAgICAgICAgICA6IGBzaG93biR7RVZFTlRfS0VZfWAsXG4gICAgQ0xJQ0tfREFUQV9BUEkgOiBgY2xpY2ske0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gXG4gIH1cblxuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgRFJPUERPV05fTUVOVSA6ICdkcm9wZG93bi1tZW51JyxcbiAgICBBQ1RJVkUgICAgICAgIDogJ2FjdGl2ZScsXG4gICAgRElTQUJMRUQgICAgICA6ICdkaXNhYmxlZCcsXG4gICAgRkFERSAgICAgICAgICA6ICdmYWRlJyxcbiAgICBTSE9XICAgICAgICAgIDogJ3Nob3cnXG4gIH1cblxuICBjb25zdCBTZWxlY3RvciA9IHtcbiAgICBEUk9QRE9XTiAgICAgICAgICAgICAgOiAnLmRyb3Bkb3duJyxcbiAgICBOQVZfTElTVF9HUk9VUCAgICAgICAgOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgIEFDVElWRSAgICAgICAgICAgICAgICA6ICcuYWN0aXZlJyxcbiAgICBBQ1RJVkVfVUwgICAgICAgICAgICAgOiAnPiBsaSA+IC5hY3RpdmUnLFxuICAgIERBVEFfVE9HR0xFICAgICAgICAgICA6ICdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLFxuICAgIERST1BET1dOX1RPR0dMRSAgICAgICA6ICcuZHJvcGRvd24tdG9nZ2xlJyxcbiAgICBEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQgOiAnPiAuZHJvcGRvd24tbWVudSAuYWN0aXZlJ1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBjbGFzcyBUYWIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50XG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuXG4gICAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xuICAgICAgcmV0dXJuIFZFUlNJT05cbiAgICB9XG5cbiAgICAvLyBQdWJsaWNcblxuICAgIHNob3coKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmXG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJlxuICAgICAgICAgICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkgfHxcbiAgICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGxldCB0YXJnZXRcbiAgICAgIGxldCBwcmV2aW91c1xuICAgICAgY29uc3QgbGlzdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApWzBdXG4gICAgICBjb25zdCBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KVxuXG4gICAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgPyBTZWxlY3Rvci5BQ1RJVkVfVUwgOiBTZWxlY3Rvci5BQ1RJVkVcbiAgICAgICAgcHJldmlvdXMgPSAkLm1ha2VBcnJheSgkKGxpc3RFbGVtZW50KS5maW5kKGl0ZW1TZWxlY3RvcikpXG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV1cbiAgICAgIH1cblxuICAgICAgY29uc3QgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSlcblxuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8XG4gICAgICAgICBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9hY3RpdmF0ZShcbiAgICAgICAgdGhpcy5fZWxlbWVudCxcbiAgICAgICAgbGlzdEVsZW1lbnRcbiAgICAgIClcblxuICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3Qgc2hvd25FdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgICB9KVxuXG4gICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpXG4gICAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KVxuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpXG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbFxuICAgIH1cblxuICAgIC8vIFByaXZhdGVcblxuICAgIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICBsZXQgYWN0aXZlRWxlbWVudHNcbiAgICAgIGlmIChjb250YWluZXIubm9kZU5hbWUgPT09ICdVTCcpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudHMgPSAkKGNvbnRhaW5lcikuZmluZChTZWxlY3Rvci5BQ1RJVkVfVUwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVFbGVtZW50cyA9ICQoY29udGFpbmVyKS5jaGlsZHJlbihTZWxlY3Rvci5BQ1RJVkUpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzWzBdXG4gICAgICBjb25zdCBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJlxuICAgICAgICAoYWN0aXZlICYmICQoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpXG5cbiAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4gdGhpcy5fdHJhbnNpdGlvbkNvbXBsZXRlKFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBhY3RpdmUsXG4gICAgICAgIGNhbGxiYWNrXG4gICAgICApXG5cbiAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlKVxuXG4gICAgICAgICQoYWN0aXZlKVxuICAgICAgICAgIC5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKGAke0NsYXNzTmFtZS5TSE9XfSAke0NsYXNzTmFtZS5BQ1RJVkV9YClcblxuICAgICAgICBjb25zdCBkcm9wZG93bkNoaWxkID0gJChhY3RpdmUucGFyZW50Tm9kZSkuZmluZChcbiAgICAgICAgICBTZWxlY3Rvci5EUk9QRE9XTl9BQ1RJVkVfQ0hJTERcbiAgICAgICAgKVswXVxuXG4gICAgICAgIGlmIChkcm9wZG93bkNoaWxkKSB7XG4gICAgICAgICAgJChkcm9wZG93bkNoaWxkKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKVxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgVXRpbC5yZWZsb3coZWxlbWVudClcbiAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpXG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiZcbiAgICAgICAgICAkKGVsZW1lbnQucGFyZW50Tm9kZSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BET1dOX01FTlUpKSB7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duRWxlbWVudCA9ICQoZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTilbMF1cbiAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgIGNvbnN0IGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKSlcbiAgICAgICAgICAkKGRyb3Bkb3duVG9nZ2xlTGlzdCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSlcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTdGF0aWNcblxuICAgIHN0YXRpYyBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKVxuICAgICAgICBsZXQgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpXG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBUYWIodGhpcylcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApXG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJChkb2N1bWVudClcbiAgICAub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0aGlzKSwgJ3Nob3cnKVxuICAgIH0pXG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZVxuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gVGFiXG4gICQuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUXG4gICAgcmV0dXJuIFRhYi5falF1ZXJ5SW50ZXJmYWNlXG4gIH1cblxuICByZXR1cm4gVGFiXG59KSgkKVxuXG5leHBvcnQgZGVmYXVsdCBUYWJcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSdcbmltcG9ydCBBbGVydCBmcm9tICcuL2FsZXJ0J1xuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL2J1dHRvbidcbmltcG9ydCBDYXJvdXNlbCBmcm9tICcuL2Nhcm91c2VsJ1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4vY29sbGFwc2UnXG5pbXBvcnQgRHJvcGRvd24gZnJvbSAnLi9kcm9wZG93bidcbmltcG9ydCBNb2RhbCBmcm9tICcuL21vZGFsJ1xuaW1wb3J0IFBvcG92ZXIgZnJvbSAnLi9wb3BvdmVyJ1xuaW1wb3J0IFNjcm9sbHNweSBmcm9tICcuL3Njcm9sbHNweSdcbmltcG9ydCBUYWIgZnJvbSAnLi90YWInXG5pbXBvcnQgVG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnXG5pbXBvcnQgVXRpbCBmcm9tICcuL3V0aWwnXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjQuMS4zKTogaW5kZXguanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbigoJCkgPT4ge1xuICBpZiAodHlwZW9mICQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdC4nKVxuICB9XG5cbiAgY29uc3QgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVxuICBjb25zdCBtaW5NYWpvciA9IDFcbiAgY29uc3QgbHRNYWpvciA9IDJcbiAgY29uc3QgbWluTWlub3IgPSA5XG4gIGNvbnN0IG1pblBhdGNoID0gMVxuICBjb25zdCBtYXhNYWpvciA9IDRcblxuICBpZiAodmVyc2lvblswXSA8IGx0TWFqb3IgJiYgdmVyc2lvblsxXSA8IG1pbk1pbm9yIHx8IHZlcnNpb25bMF0gPT09IG1pbk1ham9yICYmIHZlcnNpb25bMV0gPT09IG1pbk1pbm9yICYmIHZlcnNpb25bMl0gPCBtaW5QYXRjaCB8fCB2ZXJzaW9uWzBdID49IG1heE1ham9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcXCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgYXQgbGVhc3QgalF1ZXJ5IHYxLjkuMSBidXQgbGVzcyB0aGFuIHY0LjAuMCcpXG4gIH1cbn0pKCQpXG5cbmV4cG9ydCB7XG4gIFV0aWwsXG4gIEFsZXJ0LFxuICBCdXR0b24sXG4gIENhcm91c2VsLFxuICBDb2xsYXBzZSxcbiAgRHJvcGRvd24sXG4gIE1vZGFsLFxuICBQb3BvdmVyLFxuICBTY3JvbGxzcHksXG4gIFRhYixcbiAgVG9vbHRpcFxufVxuIl19";
            var bytes = Convert.FromBase64String(s);
            return File(bytes, "application/octet-stream");
        }
    }
}