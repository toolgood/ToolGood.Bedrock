using Microsoft.AspNetCore.Mvc;
using System;
namespace ToolGood.WwwRoot.Test
{
    public partial class WwwRootController : Controller
    {
        [HttpGet("lib/bootstrap/dist/js/bootstrap.bundle.js")]
        public IActionResult lib_bootstrap_dist_js_bootstrap_bundle_js()
        {
            if (Request.Headers["If-None-Match"]  == "5B87EBC219E20A079F8C05BE8F176BE6") {
                Response.Headers["Expires"] = DateTime.Now.AddYears(100).ToString("r");
                return StatusCode(304);
            }
            Response.Headers["Cache-Control"] = "max-age=315360000";
            Response.Headers["Etag"] = "5B87EBC219E20A079F8C05BE8F176BE6";
            Response.Headers["Date"] = DateTime.Now.ToString("r");
            Response.Headers["Expires"] = DateTime.Now.AddYears(100).ToString("r");
            const string s = "LyohDQogICogQm9vdHN0cmFwIHY0LjEuMyAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLykNCiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE4IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpDQogICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkNCiAgKi8NCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7DQogIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnanF1ZXJ5JykpIDoNCiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdqcXVlcnknXSwgZmFjdG9yeSkgOg0KICAoZmFjdG9yeSgoZ2xvYmFsLmJvb3RzdHJhcCA9IHt9KSxnbG9iYWwualF1ZXJ5KSk7DQp9KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cywkKSB7ICd1c2Ugc3RyaWN0JzsNCg0KICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkOw0KDQogIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOw0KICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOw0KICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOw0KICAgICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7DQogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgew0KICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOw0KICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsNCiAgICByZXR1cm4gQ29uc3RydWN0b3I7DQogIH0NCg0KICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7DQogICAgaWYgKGtleSBpbiBvYmopIHsNCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgew0KICAgICAgICB2YWx1ZTogdmFsdWUsDQogICAgICAgIGVudW1lcmFibGU6IHRydWUsDQogICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwNCiAgICAgICAgd3JpdGFibGU6IHRydWUNCiAgICAgIH0pOw0KICAgIH0gZWxzZSB7DQogICAgICBvYmpba2V5XSA9IHZhbHVlOw0KICAgIH0NCg0KICAgIHJldHVybiBvYmo7DQogIH0NCg0KICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgew0KICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsNCiAgICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsNCg0KICAgICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7DQogICAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsNCiAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsNCiAgICAgICAgfSkpOw0KICAgICAgfQ0KDQogICAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgew0KICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsNCiAgICAgIH0pOw0KICAgIH0NCg0KICAgIHJldHVybiB0YXJnZXQ7DQogIH0NCg0KICBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgew0KICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOw0KICAgIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOw0KICAgIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7DQogIH0NCg0KICAvKioNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiB1dGlsLmpzDQogICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqLw0KDQogIHZhciBVdGlsID0gZnVuY3Rpb24gKCQkJDEpIHsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVycw0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KICAgIHZhciBUUkFOU0lUSU9OX0VORCA9ICd0cmFuc2l0aW9uZW5kJzsNCiAgICB2YXIgTUFYX1VJRCA9IDEwMDAwMDA7DQogICAgdmFyIE1JTExJU0VDT05EU19NVUxUSVBMSUVSID0gMTAwMDsgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKQ0KDQogICAgZnVuY3Rpb24gdG9UeXBlKG9iaikgew0KICAgICAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7DQogICAgICByZXR1cm4gew0KICAgICAgICBiaW5kVHlwZTogVFJBTlNJVElPTl9FTkQsDQogICAgICAgIGRlbGVnYXRlVHlwZTogVFJBTlNJVElPTl9FTkQsDQogICAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7DQogICAgICAgICAgaWYgKCQkJDEoZXZlbnQudGFyZ2V0KS5pcyh0aGlzKSkgew0KICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zDQogICAgICAgICAgfQ0KDQogICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZmluZWQNCiAgICAgICAgfQ0KICAgICAgfTsNCiAgICB9DQoNCiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kRW11bGF0b3IoZHVyYXRpb24pIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIHZhciBjYWxsZWQgPSBmYWxzZTsNCiAgICAgICQkJDEodGhpcykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgY2FsbGVkID0gdHJ1ZTsNCiAgICAgIH0pOw0KICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmICghY2FsbGVkKSB7DQogICAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7DQogICAgICAgIH0NCiAgICAgIH0sIGR1cmF0aW9uKTsNCiAgICAgIHJldHVybiB0aGlzOw0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkgew0KICAgICAgJCQkMS5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmRFbXVsYXRvcjsNCiAgICAgICQkJDEuZXZlbnQuc3BlY2lhbFtVdGlsLlRSQU5TSVRJT05fRU5EXSA9IGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKTsNCiAgICB9DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBQdWJsaWMgVXRpbCBBcGkNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQoNCiAgICB2YXIgVXRpbCA9IHsNCiAgICAgIFRSQU5TSVRJT05fRU5EOiAnYnNUcmFuc2l0aW9uRW5kJywNCiAgICAgIGdldFVJRDogZnVuY3Rpb24gZ2V0VUlEKHByZWZpeCkgew0KICAgICAgICBkbyB7DQogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2UNCiAgICAgICAgICBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpOyAvLyAifn4iIGFjdHMgbGlrZSBhIGZhc3RlciBNYXRoLmZsb29yKCkgaGVyZQ0KICAgICAgICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTsNCg0KICAgICAgICByZXR1cm4gcHJlZml4Ow0KICAgICAgfSwNCiAgICAgIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCkgew0KICAgICAgICB2YXIgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKTsNCg0KICAgICAgICBpZiAoIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSAnIycpIHsNCiAgICAgICAgICBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJyc7DQogICAgICAgIH0NCg0KICAgICAgICB0cnkgew0KICAgICAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDsNCiAgICAgICAgfSBjYXRjaCAoZXJyKSB7DQogICAgICAgICAgcmV0dXJuIG51bGw7DQogICAgICAgIH0NCiAgICAgIH0sDQogICAgICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZWxlbWVudCkgew0KICAgICAgICBpZiAoIWVsZW1lbnQpIHsNCiAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfSAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudA0KDQoNCiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9ICQkJDEoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJyk7DQogICAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTsgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZA0KDQogICAgICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24pIHsNCiAgICAgICAgICByZXR1cm4gMDsNCiAgICAgICAgfSAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0DQoNCg0KICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXTsNCiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSAqIE1JTExJU0VDT05EU19NVUxUSVBMSUVSOw0KICAgICAgfSwNCiAgICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHsNCiAgICAgICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0Ow0KICAgICAgfSwNCiAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7DQogICAgICAgICQkJDEoZWxlbWVudCkudHJpZ2dlcihUUkFOU0lUSU9OX0VORCk7DQogICAgICB9LA0KICAgICAgLy8gVE9ETzogUmVtb3ZlIGluIHY1DQogICAgICBzdXBwb3J0c1RyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHsNCiAgICAgICAgcmV0dXJuIEJvb2xlYW4oVFJBTlNJVElPTl9FTkQpOw0KICAgICAgfSwNCiAgICAgIGlzRWxlbWVudDogZnVuY3Rpb24gaXNFbGVtZW50KG9iaikgew0KICAgICAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlOw0KICAgICAgfSwNCiAgICAgIHR5cGVDaGVja0NvbmZpZzogZnVuY3Rpb24gdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHsNCiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHsNCiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZ1R5cGVzLCBwcm9wZXJ0eSkpIHsNCiAgICAgICAgICAgIHZhciBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldOw0KICAgICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTsNCiAgICAgICAgICAgIHZhciB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBVdGlsLmlzRWxlbWVudCh2YWx1ZSkgPyAnZWxlbWVudCcgOiB0b1R5cGUodmFsdWUpOw0KDQogICAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7DQogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCkgKyAiOiAiICsgKCJPcHRpb24gXCIiICsgcHJvcGVydHkgKyAiXCIgcHJvdmlkZWQgdHlwZSBcIiIgKyB2YWx1ZVR5cGUgKyAiXCIgIikgKyAoImJ1dCBleHBlY3RlZCB0eXBlIFwiIiArIGV4cGVjdGVkVHlwZXMgKyAiXCIuIikpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH07DQogICAgc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKTsNCiAgICByZXR1cm4gVXRpbDsNCiAgfSgkKTsNCg0KICAvKioNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBhbGVydC5qcw0KICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKQ0KICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgKi8NCg0KICB2YXIgQWxlcnQgPSBmdW5jdGlvbiAoJCQkMSkgew0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIENvbnN0YW50cw0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KICAgIHZhciBOQU1FID0gJ2FsZXJ0JzsNCiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7DQogICAgdmFyIERBVEFfS0VZID0gJ2JzLmFsZXJ0JzsNCiAgICB2YXIgRVZFTlRfS0VZID0gIi4iICsgREFUQV9LRVk7DQogICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknOw0KICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdOw0KICAgIHZhciBTZWxlY3RvciA9IHsNCiAgICAgIERJU01JU1M6ICdbZGF0YS1kaXNtaXNzPSJhbGVydCJdJw0KICAgIH07DQogICAgdmFyIEV2ZW50ID0gew0KICAgICAgQ0xPU0U6ICJjbG9zZSIgKyBFVkVOVF9LRVksDQogICAgICBDTE9TRUQ6ICJjbG9zZWQiICsgRVZFTlRfS0VZLA0KICAgICAgQ0xJQ0tfREFUQV9BUEk6ICJjbGljayIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkNCiAgICB9Ow0KICAgIHZhciBDbGFzc05hbWUgPSB7DQogICAgICBBTEVSVDogJ2FsZXJ0JywNCiAgICAgIEZBREU6ICdmYWRlJywNCiAgICAgIFNIT1c6ICdzaG93Jw0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIEFsZXJ0ID0NCiAgICAvKiNfX1BVUkVfXyovDQogICAgZnVuY3Rpb24gKCkgew0KICAgICAgZnVuY3Rpb24gQWxlcnQoZWxlbWVudCkgew0KICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDsNCiAgICAgIH0gLy8gR2V0dGVycw0KDQoNCiAgICAgIHZhciBfcHJvdG8gPSBBbGVydC5wcm90b3R5cGU7DQoNCiAgICAgIC8vIFB1YmxpYw0KICAgICAgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZWxlbWVudCkgew0KICAgICAgICB2YXIgcm9vdEVsZW1lbnQgPSB0aGlzLl9lbGVtZW50Ow0KDQogICAgICAgIGlmIChlbGVtZW50KSB7DQogICAgICAgICAgcm9vdEVsZW1lbnQgPSB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KTsNCg0KICAgICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHsNCiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7DQogICAgICB9OyAvLyBQcml2YXRlDQoNCg0KICAgICAgX3Byb3RvLl9nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7DQogICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTsNCiAgICAgICAgdmFyIHBhcmVudCA9IGZhbHNlOw0KDQogICAgICAgIGlmIChzZWxlY3Rvcikgew0KICAgICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFwYXJlbnQpIHsNCiAgICAgICAgICBwYXJlbnQgPSAkJCQxKGVsZW1lbnQpLmNsb3Nlc3QoIi4iICsgQ2xhc3NOYW1lLkFMRVJUKVswXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwYXJlbnQ7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX3RyaWdnZXJDbG9zZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJDbG9zZUV2ZW50KGVsZW1lbnQpIHsNCiAgICAgICAgdmFyIGNsb3NlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkNMT1NFKTsNCiAgICAgICAgJCQkMShlbGVtZW50KS50cmlnZ2VyKGNsb3NlRXZlbnQpOw0KICAgICAgICByZXR1cm4gY2xvc2VFdmVudDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fcmVtb3ZlRWxlbWVudCA9IGZ1bmN0aW9uIF9yZW1vdmVFbGVtZW50KGVsZW1lbnQpIHsNCiAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgICAkJCQxKGVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTsNCg0KICAgICAgICBpZiAoISQkJDEoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7DQogICAgICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7DQoNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KTsNCiAgICAgICAgJCQkMShlbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgcmV0dXJuIF90aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50LCBldmVudCk7DQogICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2Rlc3Ryb3lFbGVtZW50ID0gZnVuY3Rpb24gX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpIHsNCiAgICAgICAgJCQkMShlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEV2ZW50LkNMT1NFRCkucmVtb3ZlKCk7DQogICAgICB9OyAvLyBTdGF0aWMNCg0KDQogICAgICBBbGVydC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgdmFyICRlbGVtZW50ID0gJCQkMSh0aGlzKTsNCiAgICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkpOw0KDQogICAgICAgICAgaWYgKCFkYXRhKSB7DQogICAgICAgICAgICBkYXRhID0gbmV3IEFsZXJ0KHRoaXMpOw0KICAgICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSwgZGF0YSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKGNvbmZpZyA9PT0gJ2Nsb3NlJykgew0KICAgICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9Ow0KDQogICAgICBBbGVydC5faGFuZGxlRGlzbWlzcyA9IGZ1bmN0aW9uIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHsNCiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgIGlmIChldmVudCkgew0KICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBhbGVydEluc3RhbmNlLmNsb3NlKHRoaXMpOw0KICAgICAgICB9Ow0KICAgICAgfTsNCg0KICAgICAgX2NyZWF0ZUNsYXNzKEFsZXJ0LCBudWxsLCBbew0KICAgICAgICBrZXk6ICJWRVJTSU9OIiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIFZFUlNJT047DQogICAgICAgIH0NCiAgICAgIH1dKTsNCg0KICAgICAgcmV0dXJuIEFsZXJ0Ow0KICAgIH0oKTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvbg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQoNCiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBqUXVlcnkNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCg0KICAgICQkJDEuZm5bTkFNRV0gPSBBbGVydC5falF1ZXJ5SW50ZXJmYWNlOw0KICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydDsNCg0KICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7DQogICAgICByZXR1cm4gQWxlcnQuX2pRdWVyeUludGVyZmFjZTsNCiAgICB9Ow0KDQogICAgcmV0dXJuIEFsZXJ0Ow0KICB9KCQpOw0KDQogIC8qKg0KICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGJ1dHRvbi5qcw0KICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKQ0KICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgKi8NCg0KICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKCQkJDEpIHsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBDb25zdGFudHMNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCiAgICB2YXIgTkFNRSA9ICdidXR0b24nOw0KICAgIHZhciBWRVJTSU9OID0gJzQuMS4zJzsNCiAgICB2YXIgREFUQV9LRVkgPSAnYnMuYnV0dG9uJzsNCiAgICB2YXIgRVZFTlRfS0VZID0gIi4iICsgREFUQV9LRVk7DQogICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknOw0KICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdOw0KICAgIHZhciBDbGFzc05hbWUgPSB7DQogICAgICBBQ1RJVkU6ICdhY3RpdmUnLA0KICAgICAgQlVUVE9OOiAnYnRuJywNCiAgICAgIEZPQ1VTOiAnZm9jdXMnDQogICAgfTsNCiAgICB2YXIgU2VsZWN0b3IgPSB7DQogICAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePSJidXR0b24iXScsDQogICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT0iYnV0dG9ucyJdJywNCiAgICAgIElOUFVUOiAnaW5wdXQnLA0KICAgICAgQUNUSVZFOiAnLmFjdGl2ZScsDQogICAgICBCVVRUT046ICcuYnRuJw0KICAgIH07DQogICAgdmFyIEV2ZW50ID0gew0KICAgICAgQ0xJQ0tfREFUQV9BUEk6ICJjbGljayIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksDQogICAgICBGT0NVU19CTFVSX0RBVEFfQVBJOiAiZm9jdXMiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZICsgIiAiICsgKCJibHVyIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSkNCiAgICAgIC8qKg0KICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgKiBDbGFzcyBEZWZpbml0aW9uDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqLw0KDQogICAgfTsNCg0KICAgIHZhciBCdXR0b24gPQ0KICAgIC8qI19fUFVSRV9fKi8NCiAgICBmdW5jdGlvbiAoKSB7DQogICAgICBmdW5jdGlvbiBCdXR0b24oZWxlbWVudCkgew0KICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDsNCiAgICAgIH0gLy8gR2V0dGVycw0KDQoNCiAgICAgIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlOw0KDQogICAgICAvLyBQdWJsaWMNCiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7DQogICAgICAgIHZhciB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlOw0KICAgICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlOw0KICAgICAgICB2YXIgcm9vdEVsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuREFUQV9UT0dHTEUpWzBdOw0KDQogICAgICAgIGlmIChyb290RWxlbWVudCkgew0KICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTlBVVCk7DQoNCiAgICAgICAgICBpZiAoaW5wdXQpIHsNCiAgICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7DQogICAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKSB7DQogICAgICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2U7DQogICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRSk7DQoNCiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudCkgew0KICAgICAgICAgICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkgew0KICAgICAgICAgICAgICBpZiAoaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IHJvb3RFbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBpbnB1dC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKTsNCiAgICAgICAgICAgICAgJCQkMShpbnB1dCkudHJpZ2dlcignY2hhbmdlJyk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7DQogICAgICAgICAgICBhZGRBcmlhUHJlc3NlZCA9IGZhbHNlOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhZGRBcmlhUHJlc3NlZCkgew0KICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkFDVElWRSkpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkgew0KICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHsNCiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7DQogICAgICB9OyAvLyBTdGF0aWMNCg0KDQogICAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTsNCg0KICAgICAgICAgIGlmICghZGF0YSkgew0KICAgICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7DQogICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7DQogICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTsNCiAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgfTsNCg0KICAgICAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgbnVsbCwgW3sNCiAgICAgICAga2V5OiAiVkVSU0lPTiIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBWRVJTSU9OOw0KICAgICAgICB9DQogICAgICB9XSk7DQoNCiAgICAgIHJldHVybiBCdXR0b247DQogICAgfSgpOw0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQoNCg0KICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgIHZhciBidXR0b24gPSBldmVudC50YXJnZXQ7DQoNCiAgICAgIGlmICghJCQkMShidXR0b24pLmhhc0NsYXNzKENsYXNzTmFtZS5CVVRUT04pKSB7DQogICAgICAgIGJ1dHRvbiA9ICQkJDEoYnV0dG9uKS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTik7DQogICAgICB9DQoNCiAgICAgIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMShidXR0b24pLCAndG9nZ2xlJyk7DQogICAgfSkub24oRXZlbnQuRk9DVVNfQkxVUl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEVfQ0FSUk9ULCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgIHZhciBidXR0b24gPSAkJCQxKGV2ZW50LnRhcmdldCkuY2xvc2VzdChTZWxlY3Rvci5CVVRUT04pWzBdOw0KICAgICAgJCQkMShidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSk7DQogICAgfSk7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogalF1ZXJ5DQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQoNCiAgICAkJCQxLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IEJ1dHRvbjsNCg0KICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7DQogICAgICByZXR1cm4gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgfTsNCg0KICAgIHJldHVybiBCdXR0b247DQogIH0oJCk7DQoNCiAgLyoqDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqIEJvb3RzdHJhcCAodjQuMS4zKTogY2Fyb3VzZWwuanMNCiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICovDQoNCiAgdmFyIENhcm91c2VsID0gZnVuY3Rpb24gKCQkJDEpIHsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBDb25zdGFudHMNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCiAgICB2YXIgTkFNRSA9ICdjYXJvdXNlbCc7DQogICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnOw0KICAgIHZhciBEQVRBX0tFWSA9ICdicy5jYXJvdXNlbCc7DQogICAgdmFyIEVWRU5UX0tFWSA9ICIuIiArIERBVEFfS0VZOw0KICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJzsNCiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTsNCiAgICB2YXIgQVJST1dfTEVGVF9LRVlDT0RFID0gMzc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIGxlZnQgYXJyb3cga2V5DQoNCiAgICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXkNCg0KICAgIHZhciBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUID0gNTAwOyAvLyBUaW1lIGZvciBtb3VzZSBjb21wYXQgZXZlbnRzIHRvIGZpcmUgYWZ0ZXIgdG91Y2gNCg0KICAgIHZhciBEZWZhdWx0ID0gew0KICAgICAgaW50ZXJ2YWw6IDUwMDAsDQogICAgICBrZXlib2FyZDogdHJ1ZSwNCiAgICAgIHNsaWRlOiBmYWxzZSwNCiAgICAgIHBhdXNlOiAnaG92ZXInLA0KICAgICAgd3JhcDogdHJ1ZQ0KICAgIH07DQogICAgdmFyIERlZmF1bHRUeXBlID0gew0KICAgICAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJywNCiAgICAgIGtleWJvYXJkOiAnYm9vbGVhbicsDQogICAgICBzbGlkZTogJyhib29sZWFufHN0cmluZyknLA0KICAgICAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJywNCiAgICAgIHdyYXA6ICdib29sZWFuJw0KICAgIH07DQogICAgdmFyIERpcmVjdGlvbiA9IHsNCiAgICAgIE5FWFQ6ICduZXh0JywNCiAgICAgIFBSRVY6ICdwcmV2JywNCiAgICAgIExFRlQ6ICdsZWZ0JywNCiAgICAgIFJJR0hUOiAncmlnaHQnDQogICAgfTsNCiAgICB2YXIgRXZlbnQgPSB7DQogICAgICBTTElERTogInNsaWRlIiArIEVWRU5UX0tFWSwNCiAgICAgIFNMSUQ6ICJzbGlkIiArIEVWRU5UX0tFWSwNCiAgICAgIEtFWURPV046ICJrZXlkb3duIiArIEVWRU5UX0tFWSwNCiAgICAgIE1PVVNFRU5URVI6ICJtb3VzZWVudGVyIiArIEVWRU5UX0tFWSwNCiAgICAgIE1PVVNFTEVBVkU6ICJtb3VzZWxlYXZlIiArIEVWRU5UX0tFWSwNCiAgICAgIFRPVUNIRU5EOiAidG91Y2hlbmQiICsgRVZFTlRfS0VZLA0KICAgICAgTE9BRF9EQVRBX0FQSTogImxvYWQiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLA0KICAgICAgQ0xJQ0tfREFUQV9BUEk6ICJjbGljayIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkNCiAgICB9Ow0KICAgIHZhciBDbGFzc05hbWUgPSB7DQogICAgICBDQVJPVVNFTDogJ2Nhcm91c2VsJywNCiAgICAgIEFDVElWRTogJ2FjdGl2ZScsDQogICAgICBTTElERTogJ3NsaWRlJywNCiAgICAgIFJJR0hUOiAnY2Fyb3VzZWwtaXRlbS1yaWdodCcsDQogICAgICBMRUZUOiAnY2Fyb3VzZWwtaXRlbS1sZWZ0JywNCiAgICAgIE5FWFQ6ICdjYXJvdXNlbC1pdGVtLW5leHQnLA0KICAgICAgUFJFVjogJ2Nhcm91c2VsLWl0ZW0tcHJldicsDQogICAgICBJVEVNOiAnY2Fyb3VzZWwtaXRlbScNCiAgICB9Ow0KICAgIHZhciBTZWxlY3RvciA9IHsNCiAgICAgIEFDVElWRTogJy5hY3RpdmUnLA0KICAgICAgQUNUSVZFX0lURU06ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nLA0KICAgICAgSVRFTTogJy5jYXJvdXNlbC1pdGVtJywNCiAgICAgIE5FWFRfUFJFVjogJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnLA0KICAgICAgSU5ESUNBVE9SUzogJy5jYXJvdXNlbC1pbmRpY2F0b3JzJywNCiAgICAgIERBVEFfU0xJREU6ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsDQogICAgICBEQVRBX1JJREU6ICdbZGF0YS1yaWRlPSJjYXJvdXNlbCJdJw0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIENhcm91c2VsID0NCiAgICAvKiNfX1BVUkVfXyovDQogICAgZnVuY3Rpb24gKCkgew0KICAgICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7DQogICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDsNCiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsOw0KICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDsNCiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTsNCiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7DQogICAgICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7DQogICAgICAgIHRoaXMuX2VsZW1lbnQgPSAkJCQxKGVsZW1lbnQpWzBdOw0KICAgICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTkRJQ0FUT1JTKTsNCg0KICAgICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpOw0KICAgICAgfSAvLyBHZXR0ZXJzDQoNCg0KICAgICAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTsNCg0KICAgICAgLy8gUHVibGljDQogICAgICBfcHJvdG8ubmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7DQogICAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7DQogICAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLk5FWFQpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8ubmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gbmV4dFdoZW5WaXNpYmxlKCkgew0KICAgICAgICAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlDQogICAgICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGUNCiAgICAgICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5pcygnOnZpc2libGUnKSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmNzcygndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJykgew0KICAgICAgICAgIHRoaXMubmV4dCgpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8ucHJldiA9IGZ1bmN0aW9uIHByZXYoKSB7DQogICAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7DQogICAgICAgICAgdGhpcy5fc2xpZGUoRGlyZWN0aW9uLlBSRVYpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShldmVudCkgew0KICAgICAgICBpZiAoIWV2ZW50KSB7DQogICAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5ORVhUX1BSRVYpKSB7DQogICAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTsNCiAgICAgICAgICB0aGlzLmN5Y2xlKHRydWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7DQogICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7DQogICAgICAgIGlmICghZXZlbnQpIHsNCiAgICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7DQogICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7DQogICAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pbnRlcnZhbCAmJiAhdGhpcy5faXNQYXVzZWQpIHsNCiAgICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLnRvID0gZnVuY3Rpb24gdG8oaW5kZXgpIHsNCiAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKTsNCg0KICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7DQoNCiAgICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7DQogICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuU0xJRCwgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRvKGluZGV4KTsNCiAgICAgICAgICB9KTsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7DQogICAgICAgICAgdGhpcy5wYXVzZSgpOw0KICAgICAgICAgIHRoaXMuY3ljbGUoKTsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7DQoNCiAgICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uLCB0aGlzLl9pdGVtc1tpbmRleF0pOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkgew0KICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpOw0KICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpOw0KICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7DQogICAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7DQogICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsOw0KICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7DQogICAgICAgIHRoaXMuX2lzUGF1c2VkID0gbnVsbDsNCiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gbnVsbDsNCiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7DQogICAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gbnVsbDsNCiAgICAgIH07IC8vIFByaXZhdGUNCg0KDQogICAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7DQogICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7DQogICAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpOw0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHsNCiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7DQoNCiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkgew0KICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICByZXR1cm4gX3RoaXMyLl9rZXlkb3duKGV2ZW50KTsNCiAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHsNCiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50Lk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5wYXVzZShldmVudCk7DQogICAgICAgICAgfSkub24oRXZlbnQuTU9VU0VMRUFWRSwgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTsNCiAgICAgICAgICB9KTsNCg0KICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHsNCiAgICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXMNCiAgICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbA0KICAgICAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDsNCiAgICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsDQogICAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudA0KICAgICAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eQ0KICAgICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nDQogICAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlRPVUNIRU5ELCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgIF90aGlzMi5wYXVzZSgpOw0KDQogICAgICAgICAgICAgIGlmIChfdGhpczIudG91Y2hUaW1lb3V0KSB7DQogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi50b3VjaFRpbWVvdXQpOw0KICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgX3RoaXMyLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jeWNsZShldmVudCk7DQogICAgICAgICAgICAgIH0sIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyBfdGhpczIuX2NvbmZpZy5pbnRlcnZhbCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7DQogICAgICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHN3aXRjaCAoZXZlbnQud2hpY2gpIHsNCiAgICAgICAgICBjYXNlIEFSUk9XX0xFRlRfS0VZQ09ERToNCiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7DQogICAgICAgICAgICB0aGlzLnByZXYoKTsNCiAgICAgICAgICAgIGJyZWFrOw0KDQogICAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOg0KICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICAgIHRoaXMubmV4dCgpOw0KICAgICAgICAgICAgYnJlYWs7DQoNCiAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2dldEl0ZW1JbmRleCA9IGZ1bmN0aW9uIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkgew0KICAgICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5JVEVNKSkgOiBbXTsNCiAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZWxlbWVudCk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7DQogICAgICAgIHZhciBpc05leHREaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUOw0KICAgICAgICB2YXIgaXNQcmV2RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uUFJFVjsNCg0KICAgICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7DQoNCiAgICAgICAgdmFyIGxhc3RJdGVtSW5kZXggPSB0aGlzLl9pdGVtcy5sZW5ndGggLSAxOw0KICAgICAgICB2YXIgaXNHb2luZ1RvV3JhcCA9IGlzUHJldkRpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gMCB8fCBpc05leHREaXJlY3Rpb24gJiYgYWN0aXZlSW5kZXggPT09IGxhc3RJdGVtSW5kZXg7DQoNCiAgICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7DQogICAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnQ7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxOw0KICAgICAgICB2YXIgaXRlbUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgZGVsdGEpICUgdGhpcy5faXRlbXMubGVuZ3RoOw0KICAgICAgICByZXR1cm4gaXRlbUluZGV4ID09PSAtMSA/IHRoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aCAtIDFdIDogdGhpcy5faXRlbXNbaXRlbUluZGV4XTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fdHJpZ2dlclNsaWRlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7DQogICAgICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTsNCg0KICAgICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkVfSVRFTSkpOw0KDQogICAgICAgIHZhciBzbGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElERSwgew0KICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsDQogICAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsDQogICAgICAgICAgZnJvbTogZnJvbUluZGV4LA0KICAgICAgICAgIHRvOiB0YXJnZXRJbmRleA0KICAgICAgICB9KTsNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRlRXZlbnQpOw0KICAgICAgICByZXR1cm4gc2xpZGVFdmVudDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCA9IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHsNCiAgICAgICAgaWYgKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSB7DQogICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFKSk7DQogICAgICAgICAgJCQkMShpbmRpY2F0b3JzKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsNCg0KICAgICAgICAgIHZhciBuZXh0SW5kaWNhdG9yID0gdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQuY2hpbGRyZW5bdGhpcy5fZ2V0SXRlbUluZGV4KGVsZW1lbnQpXTsNCg0KICAgICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7DQogICAgICAgICAgICAkJCQxKG5leHRJbmRpY2F0b3IpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9zbGlkZSA9IGZ1bmN0aW9uIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHsNCiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7DQoNCiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pOw0KDQogICAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7DQoNCiAgICAgICAgdmFyIG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpOw0KDQogICAgICAgIHZhciBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTsNCg0KICAgICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7DQogICAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZTsNCiAgICAgICAgdmFyIG9yZGVyQ2xhc3NOYW1lOw0KICAgICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lOw0KDQogICAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7DQogICAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuTEVGVDsNCiAgICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5ORVhUOw0KICAgICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlJJR0hUOw0KICAgICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7DQogICAgICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRGlyZWN0aW9uLlJJR0hUOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQkJDEobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7DQogICAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIHNsaWRlRXZlbnQgPSB0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChuZXh0RWxlbWVudCwgZXZlbnREaXJlY3Rpb25OYW1lKTsNCg0KICAgICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHsNCiAgICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWwNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlOw0KDQogICAgICAgIGlmIChpc0N5Y2xpbmcpIHsNCiAgICAgICAgICB0aGlzLnBhdXNlKCk7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50KTsNCg0KICAgICAgICB2YXIgc2xpZEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TTElELCB7DQogICAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsDQogICAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsDQogICAgICAgICAgZnJvbTogYWN0aXZlRWxlbWVudEluZGV4LA0KICAgICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4DQogICAgICAgIH0pOw0KDQogICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TTElERSkpIHsNCiAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhvcmRlckNsYXNzTmFtZSk7DQogICAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpOw0KICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpOw0KICAgICAgICAgICQkJDEobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTsNCiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTsNCiAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5yZW1vdmVDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSArICIgIiArIG9yZGVyQ2xhc3NOYW1lKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsNCiAgICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSArICIgIiArIG9yZGVyQ2xhc3NOYW1lICsgIiAiICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpOw0KICAgICAgICAgICAgX3RoaXMzLl9pc1NsaWRpbmcgPSBmYWxzZTsNCiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgICByZXR1cm4gJCQkMShfdGhpczMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTsNCiAgICAgICAgICAgIH0sIDApOw0KICAgICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsNCiAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsNCiAgICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTsNCiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChpc0N5Y2xpbmcpIHsNCiAgICAgICAgICB0aGlzLmN5Y2xlKCk7DQogICAgICAgIH0NCiAgICAgIH07IC8vIFN0YXRpYw0KDQoNCiAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykgew0KICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7DQoNCiAgICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsICQkJDEodGhpcykuZGF0YSgpKTsNCg0KICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0Jykgew0KICAgICAgICAgICAgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIF9jb25maWcsIGNvbmZpZyk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgdmFyIGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTsNCg0KICAgICAgICAgIGlmICghZGF0YSkgew0KICAgICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTsNCiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7DQogICAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7DQogICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykgew0KICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7DQogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIk5vIG1ldGhvZCBuYW1lZCBcIiIgKyBhY3Rpb24gKyAiXCIiKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZGF0YVthY3Rpb25dKCk7DQogICAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7DQogICAgICAgICAgICBkYXRhLnBhdXNlKCk7DQogICAgICAgICAgICBkYXRhLmN5Y2xlKCk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHsNCiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpOw0KDQogICAgICAgIGlmICghc2VsZWN0b3IpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgdGFyZ2V0ID0gJCQkMShzZWxlY3RvcilbMF07DQoNCiAgICAgICAgaWYgKCF0YXJnZXQgfHwgISQkJDEodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUuQ0FST1VTRUwpKSB7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sICQkJDEodGFyZ2V0KS5kYXRhKCksICQkJDEodGhpcykuZGF0YSgpKTsNCg0KICAgICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7DQoNCiAgICAgICAgaWYgKHNsaWRlSW5kZXgpIHsNCiAgICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRhcmdldCksIGNvbmZpZyk7DQoNCiAgICAgICAgaWYgKHNsaWRlSW5kZXgpIHsNCiAgICAgICAgICAkJCQxKHRhcmdldCkuZGF0YShEQVRBX0tFWSkudG8oc2xpZGVJbmRleCk7DQogICAgICAgIH0NCg0KICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgfTsNCg0KICAgICAgX2NyZWF0ZUNsYXNzKENhcm91c2VsLCBudWxsLCBbew0KICAgICAgICBrZXk6ICJWRVJTSU9OIiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIFZFUlNJT047DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiRGVmYXVsdCIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBEZWZhdWx0Ow0KICAgICAgICB9DQogICAgICB9XSk7DQoNCiAgICAgIHJldHVybiBDYXJvdXNlbDsNCiAgICB9KCk7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb24NCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCg0KDQogICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTsNCiAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIGNhcm91c2VscyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1JJREUpKTsNCg0KICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykgew0KICAgICAgICB2YXIgJGNhcm91c2VsID0gJCQkMShjYXJvdXNlbHNbaV0pOw0KDQogICAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpOw0KICAgICAgfQ0KICAgIH0pOw0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIGpRdWVyeQ0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQogICAgJCQkMS5mbltOQU1FXSA9IENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENhcm91c2VsOw0KDQogICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDsNCiAgICAgIHJldHVybiBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlOw0KICAgIH07DQoNCiAgICByZXR1cm4gQ2Fyb3VzZWw7DQogIH0oJCk7DQoNCiAgLyoqDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqIEJvb3RzdHJhcCAodjQuMS4zKTogY29sbGFwc2UuanMNCiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICovDQoNCiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKCQkJDEpIHsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBDb25zdGFudHMNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCiAgICB2YXIgTkFNRSA9ICdjb2xsYXBzZSc7DQogICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnOw0KICAgIHZhciBEQVRBX0tFWSA9ICdicy5jb2xsYXBzZSc7DQogICAgdmFyIEVWRU5UX0tFWSA9ICIuIiArIERBVEFfS0VZOw0KICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJzsNCiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTsNCiAgICB2YXIgRGVmYXVsdCA9IHsNCiAgICAgIHRvZ2dsZTogdHJ1ZSwNCiAgICAgIHBhcmVudDogJycNCiAgICB9Ow0KICAgIHZhciBEZWZhdWx0VHlwZSA9IHsNCiAgICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLA0KICAgICAgcGFyZW50OiAnKHN0cmluZ3xlbGVtZW50KScNCiAgICB9Ow0KICAgIHZhciBFdmVudCA9IHsNCiAgICAgIFNIT1c6ICJzaG93IiArIEVWRU5UX0tFWSwNCiAgICAgIFNIT1dOOiAic2hvd24iICsgRVZFTlRfS0VZLA0KICAgICAgSElERTogImhpZGUiICsgRVZFTlRfS0VZLA0KICAgICAgSElEREVOOiAiaGlkZGVuIiArIEVWRU5UX0tFWSwNCiAgICAgIENMSUNLX0RBVEFfQVBJOiAiY2xpY2siICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZDQogICAgfTsNCiAgICB2YXIgQ2xhc3NOYW1lID0gew0KICAgICAgU0hPVzogJ3Nob3cnLA0KICAgICAgQ09MTEFQU0U6ICdjb2xsYXBzZScsDQogICAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsDQogICAgICBDT0xMQVBTRUQ6ICdjb2xsYXBzZWQnDQogICAgfTsNCiAgICB2YXIgRGltZW5zaW9uID0gew0KICAgICAgV0lEVEg6ICd3aWR0aCcsDQogICAgICBIRUlHSFQ6ICdoZWlnaHQnDQogICAgfTsNCiAgICB2YXIgU2VsZWN0b3IgPSB7DQogICAgICBBQ1RJVkVTOiAnLnNob3csIC5jb2xsYXBzaW5nJywNCiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPSJjb2xsYXBzZSJdJw0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIENvbGxhcHNlID0NCiAgICAvKiNfX1BVUkVfXyovDQogICAgZnVuY3Rpb24gKCkgew0KICAgICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7DQogICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlOw0KICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDsNCiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7DQogICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9ICQkJDEubWFrZUFycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIltkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjIiArIGVsZW1lbnQuaWQgKyAiXCJdLCIgKyAoIltkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIyIgKyBlbGVtZW50LmlkICsgIlwiXSIpKSk7DQogICAgICAgIHZhciB0b2dnbGVMaXN0ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7DQoNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgICAgICB2YXIgZWxlbSA9IHRvZ2dsZUxpc3RbaV07DQogICAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pOw0KICAgICAgICAgIHZhciBmaWx0ZXJFbGVtZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkuZmlsdGVyKGZ1bmN0aW9uIChmb3VuZEVsZW0pIHsNCiAgICAgICAgICAgIHJldHVybiBmb3VuZEVsZW0gPT09IGVsZW1lbnQ7DQogICAgICAgICAgfSk7DQoNCiAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwgJiYgZmlsdGVyRWxlbWVudC5sZW5ndGggPiAwKSB7DQogICAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yOw0KDQogICAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsOw0KDQogICAgICAgIGlmICghdGhpcy5fY29uZmlnLnBhcmVudCkgew0KICAgICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy50b2dnbGUpIHsNCiAgICAgICAgICB0aGlzLnRvZ2dsZSgpOw0KICAgICAgICB9DQogICAgICB9IC8vIEdldHRlcnMNCg0KDQogICAgICB2YXIgX3Byb3RvID0gQ29sbGFwc2UucHJvdG90eXBlOw0KDQogICAgICAvLyBQdWJsaWMNCiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7DQogICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkgew0KICAgICAgICAgIHRoaXMuaGlkZSgpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRoaXMuc2hvdygpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7DQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBhY3RpdmVzOw0KICAgICAgICB2YXIgYWN0aXZlc0RhdGE7DQoNCiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCkgew0KICAgICAgICAgIGFjdGl2ZXMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkFDVElWRVMpKS5maWx0ZXIoZnVuY3Rpb24gKGVsZW0pIHsNCiAgICAgICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1wYXJlbnQnKSA9PT0gX3RoaXMuX2NvbmZpZy5wYXJlbnQ7DQogICAgICAgICAgfSk7DQoNCiAgICAgICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHsNCiAgICAgICAgICAgIGFjdGl2ZXMgPSBudWxsOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChhY3RpdmVzKSB7DQogICAgICAgICAgYWN0aXZlc0RhdGEgPSAkJCQxKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShEQVRBX0tFWSk7DQoNCiAgICAgICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBzdGFydEV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XKTsNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpOw0KDQogICAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGFjdGl2ZXMpIHsNCiAgICAgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMShhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLCAnaGlkZScpOw0KDQogICAgICAgICAgaWYgKCFhY3RpdmVzRGF0YSkgew0KICAgICAgICAgICAgJCQkMShhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7DQoNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKTsNCiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDsNCg0KICAgICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkgew0KICAgICAgICAgICQkJDEodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7DQoNCiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7DQogICAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOw0KICAgICAgICAgIF90aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJzsNCg0KICAgICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpOw0KDQogICAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTik7DQogICAgICAgIH07DQoNCiAgICAgICAgdmFyIGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7DQogICAgICAgIHZhciBzY3JvbGxTaXplID0gInNjcm9sbCIgKyBjYXBpdGFsaXplZERpbWVuc2lvbjsNCiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7DQogICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pOw0KICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdICsgInB4IjsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHsNCiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7DQoNCiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgc3RhcnRFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSk7DQogICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzdGFydEV2ZW50KTsNCg0KICAgICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTsNCg0KICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSB0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl0gKyAicHgiOw0KICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTsNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7DQogICAgICAgIHZhciB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoOw0KDQogICAgICAgIGlmICh0cmlnZ2VyQXJyYXlMZW5ndGggPiAwKSB7DQogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07DQogICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodHJpZ2dlcik7DQoNCiAgICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICB2YXIgJGVsZW0gPSAkJCQxKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKTsNCg0KICAgICAgICAgICAgICBpZiAoISRlbGVtLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkgew0KICAgICAgICAgICAgICAgICQkJDEodHJpZ2dlcikuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuc2V0VHJhbnNpdGlvbmluZyh0cnVlKTsNCg0KICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHsNCiAgICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7DQoNCiAgICAgICAgICAkJCQxKF90aGlzMi5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkudHJpZ2dlcihFdmVudC5ISURERU4pOw0KICAgICAgICB9Ow0KDQogICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnOw0KICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTsNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uc2V0VHJhbnNpdGlvbmluZyA9IGZ1bmN0aW9uIHNldFRyYW5zaXRpb25pbmcoaXNUcmFuc2l0aW9uaW5nKSB7DQogICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGlzVHJhbnNpdGlvbmluZzsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHsNCiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTsNCiAgICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDsNCiAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7DQogICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IG51bGw7DQogICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7DQogICAgICB9OyAvLyBQcml2YXRlDQoNCg0KICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykgew0KICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCBjb25maWcpOw0KICAgICAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXMNCg0KICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTsNCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHsNCiAgICAgICAgdmFyIGhhc1dpZHRoID0gJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhEaW1lbnNpb24uV0lEVEgpOw0KICAgICAgICByZXR1cm4gaGFzV2lkdGggPyBEaW1lbnNpb24uV0lEVEggOiBEaW1lbnNpb24uSEVJR0hUOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9nZXRQYXJlbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50KCkgew0KICAgICAgICB2YXIgX3RoaXMzID0gdGhpczsNCg0KICAgICAgICB2YXIgcGFyZW50ID0gbnVsbDsNCg0KICAgICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHsNCiAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50OyAvLyBJdCdzIGEgalF1ZXJ5IG9iamVjdA0KDQogICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF07DQogICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnBhcmVudCk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgc2VsZWN0b3IgPSAiW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCIiICsgdGhpcy5fY29uZmlnLnBhcmVudCArICJcIl0iOw0KICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7DQogICAgICAgICQkJDEoY2hpbGRyZW4pLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHsNCiAgICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gcGFyZW50Ow0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkgew0KICAgICAgICBpZiAoZWxlbWVudCkgew0KICAgICAgICAgIHZhciBpc09wZW4gPSAkJCQxKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTsNCg0KICAgICAgICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7DQogICAgICAgICAgICAkJCQxKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbikuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9OyAvLyBTdGF0aWMNCg0KDQogICAgICBDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCkgew0KICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7DQogICAgICAgIHJldHVybiBzZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpIDogbnVsbDsNCiAgICAgIH07DQoNCiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykgew0KICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICB2YXIgJHRoaXMgPSAkJCQxKHRoaXMpOw0KICAgICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7DQoNCiAgICAgICAgICB2YXIgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsICR0aGlzLmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pOw0KDQogICAgICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkgew0KICAgICAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAoIWRhdGEpIHsNCiAgICAgICAgICAgIGRhdGEgPSBuZXcgQ29sbGFwc2UodGhpcywgX2NvbmZpZyk7DQogICAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykgew0KICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJObyBtZXRob2QgbmFtZWQgXCIiICsgY29uZmlnICsgIlwiIik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9Ow0KDQogICAgICBfY3JlYXRlQ2xhc3MoQ29sbGFwc2UsIG51bGwsIFt7DQogICAgICAgIGtleTogIlZFUlNJT04iLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gVkVSU0lPTjsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJEZWZhdWx0IiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIERlZmF1bHQ7DQogICAgICAgIH0NCiAgICAgIH1dKTsNCg0KICAgICAgcmV0dXJuIENvbGxhcHNlOw0KICAgIH0oKTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvbg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQoNCiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudA0KICAgICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7DQogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7DQogICAgICB9DQoNCiAgICAgIHZhciAkdHJpZ2dlciA9ICQkJDEodGhpcyk7DQogICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7DQogICAgICB2YXIgc2VsZWN0b3JzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7DQogICAgICAkJCQxKHNlbGVjdG9ycykuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciAkdGFyZ2V0ID0gJCQkMSh0aGlzKTsNCiAgICAgICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoREFUQV9LRVkpOw0KICAgICAgICB2YXIgY29uZmlnID0gZGF0YSA/ICd0b2dnbGUnIDogJHRyaWdnZXIuZGF0YSgpOw0KDQogICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpOw0KICAgICAgfSk7DQogICAgfSk7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogalF1ZXJ5DQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQoNCiAgICAkJCQxLmZuW05BTUVdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTsNCiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7DQoNCiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUOw0KICAgICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgfTsNCg0KICAgIHJldHVybiBDb2xsYXBzZTsNCiAgfSgkKTsNCg0KICAvKiohDQogICAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy4NCiAgICogQHZlcnNpb24gMS4xNC4zDQogICAqIEBsaWNlbnNlDQogICAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9ycw0KICAgKg0KICAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5DQogICAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsDQogICAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMNCiAgICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbA0KICAgKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMNCiAgICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoNCiAgICoNCiAgICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsDQogICAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuDQogICAqDQogICAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SDQogICAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLA0KICAgKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUNCiAgICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUg0KICAgKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLA0KICAgKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQ0KICAgKiBTT0ZUV0FSRS4NCiAgICovDQogIHZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnOw0KDQogIHZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107DQogIHZhciB0aW1lb3V0RHVyYXRpb24gPSAwOw0KICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkgew0KICAgIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkgew0KICAgICAgdGltZW91dER1cmF0aW9uID0gMTsNCiAgICAgIGJyZWFrOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7DQogICAgdmFyIGNhbGxlZCA9IGZhbHNlOw0KICAgIHJldHVybiBmdW5jdGlvbiAoKSB7DQogICAgICBpZiAoY2FsbGVkKSB7DQogICAgICAgIHJldHVybjsNCiAgICAgIH0NCiAgICAgIGNhbGxlZCA9IHRydWU7DQogICAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7DQogICAgICAgIGNhbGxlZCA9IGZhbHNlOw0KICAgICAgICBmbigpOw0KICAgICAgfSk7DQogICAgfTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikgew0KICAgIHZhciBzY2hlZHVsZWQgPSBmYWxzZTsNCiAgICByZXR1cm4gZnVuY3Rpb24gKCkgew0KICAgICAgaWYgKCFzY2hlZHVsZWQpIHsNCiAgICAgICAgc2NoZWR1bGVkID0gdHJ1ZTsNCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7DQogICAgICAgICAgZm4oKTsNCiAgICAgICAgfSwgdGltZW91dER1cmF0aW9uKTsNCiAgICAgIH0NCiAgICB9Ow0KICB9DQoNCiAgdmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTsNCg0KICAvKioNCiAgKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkDQogICogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLg0KICAqDQogICogQG1ldGhvZA0KICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmbg0KICAqIEByZXR1cm5zIHtGdW5jdGlvbn0NCiAgKi8NCiAgdmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7DQoNCiAgLyoqDQogICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2sNCiAgICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj8NCiAgICovDQogIGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7DQogICAgdmFyIGdldFR5cGUgPSB7fTsNCiAgICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nOw0KICB9DQoNCiAgLyoqDQogICAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnQNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50DQogICAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eQ0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7DQogICAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHsNCiAgICAgIHJldHVybiBbXTsNCiAgICB9DQogICAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmUNCiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTsNCiAgICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzOw0KICB9DQoNCiAgLyoqDQogICAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnQNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudA0KICAgKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50DQogICAqLw0KICBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHsNCiAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7DQogICAgICByZXR1cm4gZWxlbWVudDsNCiAgICB9DQogICAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7DQogIH0NCg0KICAvKioNCiAgICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudA0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50DQogICAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50DQogICAqLw0KICBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkgew0KICAgIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdA0KICAgIGlmICghZWxlbWVudCkgew0KICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7DQogICAgfQ0KDQogICAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7DQogICAgICBjYXNlICdIVE1MJzoNCiAgICAgIGNhc2UgJ0JPRFknOg0KICAgICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7DQogICAgICBjYXNlICcjZG9jdW1lbnQnOg0KICAgICAgICByZXR1cm4gZWxlbWVudC5ib2R5Ow0KICAgIH0NCg0KICAgIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbA0KDQogICAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSwNCiAgICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csDQogICAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsDQogICAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7DQoNCiAgICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHsNCiAgICAgIHJldHVybiBlbGVtZW50Ow0KICAgIH0NCg0KICAgIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7DQogIH0NCg0KICB2YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpOw0KICB2YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOw0KDQogIC8qKg0KICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVjaw0KICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRQ0KICAgKi8NCiAgZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7DQogICAgaWYgKHZlcnNpb24gPT09IDExKSB7DQogICAgICByZXR1cm4gaXNJRTExOw0KICAgIH0NCiAgICBpZiAodmVyc2lvbiA9PT0gMTApIHsNCiAgICAgIHJldHVybiBpc0lFMTA7DQogICAgfQ0KICAgIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwOw0KICB9DQoNCiAgLyoqDQogICAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnQNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudA0KICAgKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudA0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHsNCiAgICBpZiAoIWVsZW1lbnQpIHsNCiAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7DQogICAgfQ0KDQogICAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDsNCg0KICAgIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlDQogICAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50Ow0KICAgIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50DQogICAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHsNCiAgICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDsNCiAgICB9DQoNCiAgICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lOw0KDQogICAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHsNCiAgICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsNCiAgICB9DQoNCiAgICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFREIG9yIFRBQkxFIGluIGNhc2UNCiAgICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uDQogICAgaWYgKFsnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykgew0KICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpOw0KICAgIH0NCg0KICAgIHJldHVybiBvZmZzZXRQYXJlbnQ7DQogIH0NCg0KICBmdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7DQogICAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTsNCg0KICAgIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7DQogICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KICAgIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDsNCiAgfQ0KDQogIC8qKg0KICAgKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50DQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGUNCiAgICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZQ0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7DQogICAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkgew0KICAgICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTsNCiAgICB9DQoNCiAgICByZXR1cm4gbm9kZTsNCiAgfQ0KDQogIC8qKg0KICAgKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlcw0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MQ0KICAgKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyDQogICAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudA0KICAgKi8NCiAgZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHsNCiAgICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb24NCiAgICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7DQogICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Ow0KICAgIH0NCg0KICAgIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgInN0YXJ0IiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET00NCiAgICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORzsNCiAgICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7DQogICAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTsNCg0KICAgIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyDQogICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTsNCiAgICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7DQogICAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7DQogICAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7DQoNCiAgICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50DQoNCiAgICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7DQogICAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7DQogICAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjsNCiAgICAgIH0NCg0KICAgICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7DQogICAgfQ0KDQogICAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZQ0KICAgIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTsNCiAgICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHsNCiAgICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7DQogICAgfSBlbHNlIHsNCiAgICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTsNCiAgICB9DQogIH0NCg0KICAvKioNCiAgICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQNCiAgICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgDQogICAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHMNCiAgICovDQogIGZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7DQogICAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnOw0KDQogICAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7DQogICAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTsNCg0KICAgIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHsNCiAgICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsNCiAgICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDsNCiAgICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07DQogICAgfQ0KDQogICAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTsNCiAgfQ0KDQogIC8qDQogICAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdA0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2UNCiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzDQogICAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlcw0KICAgKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3QNCiAgICovDQogIGZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkgew0KICAgIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7DQoNCiAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTsNCiAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpOw0KICAgIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxOw0KICAgIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyOw0KICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyOw0KICAgIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7DQogICAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7DQogICAgcmV0dXJuIHJlY3Q7DQogIH0NCg0KICAvKg0KICAgKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50DQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlcw0KICAgKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnQNCiAgICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgDQogICAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXMNCiAgICovDQoNCiAgZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7DQogICAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7DQogICAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJzsNCg0KICAgIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApOw0KICB9DQoNCiAgZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7DQogICAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IGh0bWxbJ29mZnNldCcgKyBheGlzXSArIGNvbXB1dGVkU3R5bGVbJ21hcmdpbicgKyAoYXhpcyA9PT0gJ0hlaWdodCcgPyAnVG9wJyA6ICdMZWZ0JyldICsgY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldIDogMCk7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRXaW5kb3dTaXplcygpIHsNCiAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7DQogICAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7DQogICAgdmFyIGNvbXB1dGVkU3R5bGUgPSBpc0lFKDEwKSAmJiBnZXRDb21wdXRlZFN0eWxlKGh0bWwpOw0KDQogICAgcmV0dXJuIHsNCiAgICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksDQogICAgICB3aWR0aDogZ2V0U2l6ZSgnV2lkdGgnLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKQ0KICAgIH07DQogIH0NCg0KICB2YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7DQogICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsNCiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOw0KICAgIH0NCiAgfTsNCg0KICB2YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7DQogICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07DQogICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsNCiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOw0KICAgICAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsNCiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7DQogICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOw0KICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7DQogICAgICByZXR1cm4gQ29uc3RydWN0b3I7DQogICAgfTsNCiAgfSgpOw0KDQoNCg0KDQoNCiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkgew0KICAgIGlmIChrZXkgaW4gb2JqKSB7DQogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsNCiAgICAgICAgdmFsdWU6IHZhbHVlLA0KICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgICBjb25maWd1cmFibGU6IHRydWUsDQogICAgICAgIHdyaXRhYmxlOiB0cnVlDQogICAgICB9KTsNCiAgICB9IGVsc2Ugew0KICAgICAgb2JqW2tleV0gPSB2YWx1ZTsNCiAgICB9DQoNCiAgICByZXR1cm4gb2JqOw0KICB9Ow0KDQogIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgew0KICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOw0KDQogICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7DQogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7DQogICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiB0YXJnZXQ7DQogIH07DQoNCiAgLyoqDQogICAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0DQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0cw0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBDbGllbnRSZWN0IGxpa2Ugb3V0cHV0DQogICAqLw0KICBmdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHsNCiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG9mZnNldHMsIHsNCiAgICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLA0KICAgICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0DQogICAgfSk7DQogIH0NCg0KICAvKioNCiAgICogR2V0IGJvdW5kaW5nIGNsaWVudCByZWN0IG9mIGdpdmVuIGVsZW1lbnQNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQNCiAgICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdA0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpIHsNCiAgICB2YXIgcmVjdCA9IHt9Ow0KDQogICAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndA0KICAgIC8vIGNvbnNpZGVyZWQgaW4gRE9NIGluIHNvbWUgY2lyY3Vtc3RhbmNlcy4uLg0KICAgIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTENCiAgICB0cnkgew0KICAgICAgaWYgKGlzSUUoMTApKSB7DQogICAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOw0KICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTsNCiAgICAgICAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTsNCiAgICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wOw0KICAgICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDsNCiAgICAgICAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wOw0KICAgICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsNCiAgICAgIH0NCiAgICB9IGNhdGNoIChlKSB7fQ0KDQogICAgdmFyIHJlc3VsdCA9IHsNCiAgICAgIGxlZnQ6IHJlY3QubGVmdCwNCiAgICAgIHRvcDogcmVjdC50b3AsDQogICAgICB3aWR0aDogcmVjdC5yaWdodCAtIHJlY3QubGVmdCwNCiAgICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcA0KICAgIH07DQoNCiAgICAvLyBzdWJ0cmFjdCBzY3JvbGxiYXIgc2l6ZSBmcm9tIHNpemVzDQogICAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoKSA6IHt9Ow0KICAgIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LnJpZ2h0IC0gcmVzdWx0LmxlZnQ7DQogICAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuYm90dG9tIC0gcmVzdWx0LnRvcDsNCg0KICAgIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDsNCiAgICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0Ow0KDQogICAgLy8gaWYgYW4gaHlwb3RoZXRpY2FsIHNjcm9sbGJhciBpcyBkZXRlY3RlZCwgd2UgbXVzdCBiZSBzdXJlIGl0J3Mgbm90IGEgYGJvcmRlcmANCiAgICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMNCiAgICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikgew0KICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KTsNCiAgICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTsNCiAgICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpOw0KDQogICAgICByZXN1bHQud2lkdGggLT0gaG9yaXpTY3JvbGxiYXI7DQogICAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7DQogICAgfQ0KDQogICAgcmV0dXJuIGdldENsaWVudFJlY3QocmVzdWx0KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7DQogICAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOw0KDQogICAgdmFyIGlzSUUxMCA9IGlzSUUoMTApOw0KICAgIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJzsNCiAgICB2YXIgY2hpbGRyZW5SZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGNoaWxkcmVuKTsNCiAgICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpOw0KICAgIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pOw0KDQogICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShwYXJlbnQpOw0KICAgIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7DQogICAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApOw0KDQogICAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjDQogICAgaWYgKGZpeGVkUG9zaXRpb24gJiYgcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHsNCiAgICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApOw0KICAgICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTsNCiAgICB9DQogICAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHsNCiAgICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsDQogICAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCwNCiAgICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsDQogICAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHQNCiAgICB9KTsNCiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7DQogICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDsNCg0KICAgIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudA0KICAgIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlcw0KICAgIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluDQogICAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90Lg0KICAgIGlmICghaXNJRTEwICYmIGlzSFRNTCkgew0KICAgICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApOw0KICAgICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7DQoNCiAgICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wOw0KICAgICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7DQogICAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDsNCiAgICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDsNCg0KICAgICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtDQogICAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDsNCiAgICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7DQogICAgfQ0KDQogICAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHsNCiAgICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7DQogICAgfQ0KDQogICAgcmV0dXJuIG9mZnNldHM7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkgew0KICAgIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTsNCg0KICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsNCiAgICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7DQogICAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7DQogICAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7DQoNCiAgICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwOw0KICAgIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7DQoNCiAgICB2YXIgb2Zmc2V0ID0gew0KICAgICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsDQogICAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsDQogICAgICB3aWR0aDogd2lkdGgsDQogICAgICBoZWlnaHQ6IGhlaWdodA0KICAgIH07DQoNCiAgICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpOw0KICB9DQoNCiAgLyoqDQogICAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudA0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50DQogICAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyDQogICAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gImlzRml4ZWQ/Ig0KICAgKi8NCiAgZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7DQogICAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTsNCiAgICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7DQogICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KICAgIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHsNCiAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCiAgICByZXR1cm4gaXNGaXhlZChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQNCiAgICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnQNCiAgICovDQoNCiAgZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7DQogICAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uDQogICAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7DQogICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Ow0KICAgIH0NCiAgICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7DQogICAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHsNCiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDsNCiAgICB9DQogICAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsNCiAgfQ0KDQogIC8qKg0KICAgKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXINCiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlDQogICAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nDQogICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllcw0KICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlDQogICAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzDQogICAqLw0KICBmdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkgew0KICAgIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTsNCg0KICAgIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlDQoNCiAgICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07DQogICAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTsNCg0KICAgIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlDQogICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7DQogICAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7DQogICAgfSBlbHNlIHsNCiAgICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXMNCiAgICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDsNCiAgICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHsNCiAgICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTsNCiAgICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHsNCiAgICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHsNCiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7DQogICAgICB9IGVsc2Ugew0KICAgICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50Ow0KICAgICAgfQ0KDQogICAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTsNCg0KICAgICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uDQogICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7DQogICAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcygpLA0KICAgICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCwNCiAgICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoOw0KDQogICAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7DQogICAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7DQogICAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7DQogICAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZA0KICAgICAgICBib3VuZGFyaWVzID0gb2Zmc2V0czsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBBZGQgcGFkZGluZ3MNCiAgICBib3VuZGFyaWVzLmxlZnQgKz0gcGFkZGluZzsNCiAgICBib3VuZGFyaWVzLnRvcCArPSBwYWRkaW5nOw0KICAgIGJvdW5kYXJpZXMucmlnaHQgLT0gcGFkZGluZzsNCiAgICBib3VuZGFyaWVzLmJvdHRvbSAtPSBwYWRkaW5nOw0KDQogICAgcmV0dXJuIGJvdW5kYXJpZXM7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHsNCiAgICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLA0KICAgICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDsNCg0KICAgIHJldHVybiB3aWR0aCAqIGhlaWdodDsNCiAgfQ0KDQogIC8qKg0KICAgKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlDQogICAqIGF2YWlsYWJsZSBzcGFjZS4NCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMNCiAgICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZA0KICAgKi8NCiAgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHsNCiAgICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDsNCg0KICAgIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkgew0KICAgICAgcmV0dXJuIHBsYWNlbWVudDsNCiAgICB9DQoNCiAgICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTsNCg0KICAgIHZhciByZWN0cyA9IHsNCiAgICAgIHRvcDogew0KICAgICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCwNCiAgICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wDQogICAgICB9LA0KICAgICAgcmlnaHQ6IHsNCiAgICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LA0KICAgICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0DQogICAgICB9LA0KICAgICAgYm90dG9tOiB7DQogICAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLA0KICAgICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b20NCiAgICAgIH0sDQogICAgICBsZWZ0OiB7DQogICAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsDQogICAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHQNCiAgICAgIH0NCiAgICB9Ow0KDQogICAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7DQogICAgICByZXR1cm4gX2V4dGVuZHMoew0KICAgICAgICBrZXk6IGtleQ0KICAgICAgfSwgcmVjdHNba2V5XSwgew0KICAgICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pDQogICAgICB9KTsNCiAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7DQogICAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhOw0KICAgIH0pOw0KDQogICAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7DQogICAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCwNCiAgICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7DQogICAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0Ow0KICAgIH0pOw0KDQogICAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7DQoNCiAgICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07DQoNCiAgICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpOw0KICB9DQoNCiAgLyoqDQogICAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudA0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlDQogICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50DQogICAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcykNCiAgICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZQ0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcg0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHsNCiAgICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDsNCg0KICAgIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIHJlZmVyZW5jZSk7DQogICAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7DQogIH0NCg0KICAvKioNCiAgICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKQ0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50DQogICAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcw0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7DQogICAgdmFyIHN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7DQogICAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tKTsNCiAgICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQpICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQpOw0KICAgIHZhciByZXN1bHQgPSB7DQogICAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksDQogICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeA0KICAgIH07DQogICAgcmV0dXJuIHJlc3VsdDsNCiAgfQ0KDQogIC8qKg0KICAgKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50DQogICAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50DQogICAqLw0KICBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHsNCiAgICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9Ow0KICAgIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7DQogICAgICByZXR1cm4gaGFzaFttYXRjaGVkXTsNCiAgICB9KTsNCiAgfQ0KDQogIC8qKg0KICAgKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkDQogICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudA0KICAgKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpDQogICAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zDQogICAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcg0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkgew0KICAgIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdOw0KDQogICAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzDQogICAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7DQoNCiAgICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0DQogICAgdmFyIHBvcHBlck9mZnNldHMgPSB7DQogICAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCwNCiAgICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHQNCiAgICB9Ow0KDQogICAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseQ0KICAgIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTsNCiAgICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7DQogICAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7DQogICAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJzsNCiAgICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJzsNCg0KICAgIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7DQogICAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkgew0KICAgICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTsNCiAgICB9IGVsc2Ugew0KICAgICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldOw0KICAgIH0NCg0KICAgIHJldHVybiBwb3BwZXJPZmZzZXRzOw0KICB9DQoNCiAgLyoqDQogICAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheQ0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQGFyZ3VtZW50IHtBcnJheX0gYXJyDQogICAqIEBhcmd1bWVudCBwcm9wDQogICAqIEBhcmd1bWVudCB2YWx1ZQ0KICAgKiBAcmV0dXJucyBpbmRleCBvciAtMQ0KICAgKi8NCiAgZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7DQogICAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZA0KICAgIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkgew0KICAgICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTsNCiAgICB9DQoNCiAgICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYA0KICAgIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTsNCiAgfQ0KDQogIC8qKg0KICAgKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3QNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7QXJyYXl9IGFycg0KICAgKiBAYXJndW1lbnQgcHJvcA0KICAgKiBAYXJndW1lbnQgdmFsdWUNCiAgICogQHJldHVybnMgaW5kZXggb3IgLTENCiAgICovDQogIGZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7DQogICAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkDQogICAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHsNCiAgICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHsNCiAgICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7DQogICAgICB9KTsNCiAgICB9DQoNCiAgICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZA0KICAgIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7DQogICAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTsNCiAgICB9KTsNCiAgICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpOw0KICB9DQoNCiAgLyoqDQogICAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsDQogICAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGENCiAgICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzDQogICAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXINCiAgICogQHJldHVybnMge2RhdGFPYmplY3R9DQogICAqLw0KICBmdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7DQogICAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpOw0KDQogICAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHsNCiAgICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkgew0KICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvbg0KICAgICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7DQogICAgICB9DQogICAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb24NCiAgICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7DQogICAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3QNCiAgICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0DQogICAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXMNCiAgICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7DQogICAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpOw0KDQogICAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7DQogICAgICB9DQogICAgfSk7DQoNCiAgICByZXR1cm4gZGF0YTsNCiAgfQ0KDQogIC8qKg0KICAgKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZw0KICAgKiB0aGUgbmV3IHN0eWxlLjxiciAvPg0KICAgKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy4NCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyDQogICAqLw0KICBmdW5jdGlvbiB1cGRhdGUoKSB7DQogICAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGUNCiAgICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkgew0KICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIHZhciBkYXRhID0gew0KICAgICAgaW5zdGFuY2U6IHRoaXMsDQogICAgICBzdHlsZXM6IHt9LA0KICAgICAgYXJyb3dTdHlsZXM6IHt9LA0KICAgICAgYXR0cmlidXRlczoge30sDQogICAgICBmbGlwcGVkOiBmYWxzZSwNCiAgICAgIG9mZnNldHM6IHt9DQogICAgfTsNCg0KICAgIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0cw0KICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpOw0KDQogICAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsDQogICAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZA0KICAgIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZQ0KICAgIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTsNCg0KICAgIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGANCiAgICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7DQoNCiAgICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDsNCg0KICAgIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzDQogICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTsNCg0KICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnOw0KDQogICAgLy8gcnVuIHRoZSBtb2RpZmllcnMNCiAgICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTsNCg0KICAgIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFjaw0KICAgIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrDQogICAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkgew0KICAgICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlOw0KICAgICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpOw0KICAgIH0gZWxzZSB7DQogICAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7DQogICAgfQ0KICB9DQoNCiAgLyoqDQogICAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0NCiAgICovDQogIGZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7DQogICAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7DQogICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSwNCiAgICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkOw0KICAgICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lOw0KICAgIH0pOw0KICB9DQoNCiAgLyoqDQogICAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWUNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKQ0KICAgKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeCkNCiAgICovDQogIGZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkgew0KICAgIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddOw0KICAgIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpOw0KDQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldOw0KICAgICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5Ow0KICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykgew0KICAgICAgICByZXR1cm4gdG9DaGVjazsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG51bGw7DQogIH0NCg0KICAvKioNCiAgICogRGVzdHJveSB0aGUgcG9wcGVyDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlcg0KICAgKi8NCiAgZnVuY3Rpb24gZGVzdHJveSgpIHsNCiAgICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTsNCg0KICAgIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkDQogICAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7DQogICAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7DQogICAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnOw0KICAgICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7DQogICAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7DQogICAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnOw0KICAgICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7DQogICAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7DQogICAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnOw0KICAgIH0NCg0KICAgIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7DQoNCiAgICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0eSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3kNCiAgICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXQNCiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkgew0KICAgICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7DQogICAgfQ0KICAgIHJldHVybiB0aGlzOw0KICB9DQoNCiAgLyoqDQogICAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudA0KICAgKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQNCiAgICogQHJldHVybnMge1dpbmRvd30NCiAgICovDQogIGZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7DQogICAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7DQogICAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93Ow0KICB9DQoNCiAgZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7DQogICAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknOw0KICAgIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDsNCiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTsNCg0KICAgIGlmICghaXNCb2R5KSB7DQogICAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTsNCiAgICB9DQogICAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7DQogIH0NCg0KICAvKioNCiAgICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAcHJpdmF0ZQ0KICAgKi8NCiAgZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkgew0KICAgIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3cNCiAgICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kOw0KICAgIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7DQoNCiAgICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHMNCiAgICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpOw0KICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpOw0KICAgIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50Ow0KICAgIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlOw0KDQogICAgcmV0dXJuIHN0YXRlOw0KICB9DQoNCiAgLyoqDQogICAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nDQogICAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4NCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyDQogICAqLw0KICBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHsNCiAgICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkgew0KICAgICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7DQogICAgfQ0KICB9DQoNCiAgLyoqDQogICAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvbg0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQHByaXZhdGUNCiAgICovDQogIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHsNCiAgICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvdw0KICAgIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTsNCg0KICAgIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHMNCiAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkgew0KICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTsNCiAgICB9KTsNCg0KICAgIC8vIFJlc2V0IHN0YXRlDQogICAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsOw0KICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTsNCiAgICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDsNCiAgICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7DQogICAgcmV0dXJuIHN0YXRlOw0KICB9DQoNCiAgLyoqDQogICAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb24NCiAgICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBvblVwZGF0ZSBjYWxsYmFjayBhbnltb3JlLA0KICAgKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5Lg0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXINCiAgICovDQogIGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHsNCiAgICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7DQogICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTsNCiAgICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7DQogICAgfQ0KICB9DQoNCiAgLyoqDQogICAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXINCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2sNCiAgICogQHJldHVybiB7Qm9vbGVhbn0NCiAgICovDQogIGZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7DQogICAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXINCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXMNCiAgICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQNCiAgICovDQogIGZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHsNCiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsNCiAgICAgIHZhciB1bml0ID0gJyc7DQogICAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmcNCiAgICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkgew0KICAgICAgICB1bml0ID0gJ3B4JzsNCiAgICAgIH0NCiAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0Ow0KICAgIH0pOw0KICB9DQoNCiAgLyoqDQogICAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXMNCiAgICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQNCiAgICovDQogIGZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykgew0KICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsNCiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07DQogICAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7DQogICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7DQogICAgICB9DQogICAgfSk7DQogIH0NCg0KICAvKioNCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiBNb2RpZmllcnMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZA0KICAgKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnQNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnQNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucw0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdA0KICAgKi8NCiAgZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7DQogICAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciwNCiAgICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdA0KICAgIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXMNCiAgICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIQ0KICAgIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpOw0KDQogICAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsDQogICAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnQNCiAgICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpOw0KDQogICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXMNCiAgICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7DQogICAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpOw0KICAgIH0NCg0KICAgIHJldHVybiBkYXRhOw0KICB9DQoNCiAgLyoqDQogICAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkDQogICAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGUNCiAgICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy4NCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVycw0KICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyDQogICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXINCiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9ucw0KICAgKi8NCiAgZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkgew0KICAgIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0cw0KICAgIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7DQoNCiAgICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCwNCiAgICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkDQogICAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlDQogICAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTsNCg0KICAgIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTsNCg0KICAgIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2UNCiAgICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9ucw0KICAgIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pOw0KDQogICAgcmV0dXJuIG9wdGlvbnM7DQogIH0NCg0KICAvKioNCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiBNb2RpZmllcnMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZA0KICAgKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zDQogICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQNCiAgICovDQogIGZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7DQogICAgdmFyIHggPSBvcHRpb25zLngsDQogICAgICAgIHkgPSBvcHRpb25zLnk7DQogICAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7DQoNCiAgICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjINCg0KICAgIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHsNCiAgICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7DQogICAgfSkuZ3B1QWNjZWxlcmF0aW9uOw0KICAgIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkgew0KICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpOw0KICAgIH0NCiAgICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjsNCg0KICAgIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpOw0KICAgIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7DQoNCiAgICAvLyBTdHlsZXMNCiAgICB2YXIgc3R5bGVzID0gew0KICAgICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvbg0KICAgIH07DQoNCiAgICAvLyBBdm9pZCBibHVycnkgdGV4dCBieSB1c2luZyBmdWxsIHBpeGVsIGludGVnZXJzLg0KICAgIC8vIEZvciBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLCB0b3AvYm90dG9tIHByZWZlcnMgcm91bmRlZA0KICAgIC8vIHZhbHVlcywgd2hpbGUgbGVmdC9yaWdodCBwcmVmZXJzIGZsb29yZWQgdmFsdWVzLg0KICAgIHZhciBvZmZzZXRzID0gew0KICAgICAgbGVmdDogTWF0aC5mbG9vcihwb3BwZXIubGVmdCksDQogICAgICB0b3A6IE1hdGgucm91bmQocG9wcGVyLnRvcCksDQogICAgICBib3R0b206IE1hdGgucm91bmQocG9wcGVyLmJvdHRvbSksDQogICAgICByaWdodDogTWF0aC5mbG9vcihwb3BwZXIucmlnaHQpDQogICAgfTsNCg0KICAgIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJzsNCiAgICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JzsNCg0KICAgIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLA0KICAgIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZQ0KICAgIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWQNCiAgICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7DQoNCiAgICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pDQogICAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdA0KICAgIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50DQogICAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50DQogICAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3cNCiAgICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLg0KICAgIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0DQogICAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mDQogICAgLy8gaXRzIGJvdHRvbS4NCiAgICB2YXIgbGVmdCA9IHZvaWQgMCwNCiAgICAgICAgdG9wID0gdm9pZCAwOw0KICAgIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHsNCiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tOw0KICAgIH0gZWxzZSB7DQogICAgICB0b3AgPSBvZmZzZXRzLnRvcDsNCiAgICB9DQogICAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7DQogICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0Ow0KICAgIH0gZWxzZSB7DQogICAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0Ow0KICAgIH0NCiAgICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHsNCiAgICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknOw0KICAgICAgc3R5bGVzW3NpZGVBXSA9IDA7DQogICAgICBzdHlsZXNbc2lkZUJdID0gMDsNCiAgICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7DQogICAgfSBlbHNlIHsNCiAgICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzDQogICAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxOw0KICAgICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTsNCiAgICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7DQogICAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7DQogICAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCOw0KICAgIH0NCg0KICAgIC8vIEF0dHJpYnV0ZXMNCiAgICB2YXIgYXR0cmlidXRlcyA9IHsNCiAgICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50DQogICAgfTsNCg0KICAgIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlcw0KICAgIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpOw0KICAgIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpOw0KICAgIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTsNCg0KICAgIHJldHVybiBkYXRhOw0KICB9DQoNCiAgLyoqDQogICAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz4NCiAgICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLg0KICAgKiBAbWV0aG9kDQogICAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHMNCiAgICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnMNCiAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyDQogICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXINCiAgICogQHJldHVybnMge0Jvb2xlYW59DQogICAqLw0KICBmdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkgew0KICAgIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7DQogICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTsNCiAgICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTsNCiAgICB9KTsNCg0KICAgIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikgew0KICAgICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7DQogICAgfSk7DQoNCiAgICBpZiAoIWlzUmVxdWlyZWQpIHsNCiAgICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnOw0KICAgICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7DQogICAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTsNCiAgICB9DQogICAgcmV0dXJuIGlzUmVxdWlyZWQ7DQogIH0NCg0KICAvKioNCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiBNb2RpZmllcnMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucw0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkDQogICAqLw0KICBmdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7DQogICAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7DQoNCiAgICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrDQogICAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkgew0KICAgICAgcmV0dXJuIGRhdGE7DQogICAgfQ0KDQogICAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDsNCg0KICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yDQogICAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7DQogICAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7DQoNCiAgICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXINCiAgICAgIGlmICghYXJyb3dFbGVtZW50KSB7DQogICAgICAgIHJldHVybiBkYXRhOw0KICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZQ0KICAgICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlDQogICAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHsNCiAgICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7DQogICAgICAgIHJldHVybiBkYXRhOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdOw0KICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLA0KICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlciwNCiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7DQoNCiAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7DQoNCiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJzsNCiAgICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnOw0KICAgIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7DQogICAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7DQogICAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7DQogICAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTsNCg0KICAgIC8vDQogICAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzDQogICAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdWN0aW9uDQogICAgLy8NCg0KICAgIC8vIHRvcC9sZWZ0IHNpZGUNCiAgICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7DQogICAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpOw0KICAgIH0NCiAgICAvLyBib3R0b20vcmlnaHQgc2lkZQ0KICAgIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHsNCiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdOw0KICAgIH0NCiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTsNCg0KICAgIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXINCiAgICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7DQoNCiAgICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHMNCiAgICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZQ0KICAgIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpOw0KICAgIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7DQogICAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddLCAxMCk7DQogICAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTsNCg0KICAgIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlcg0KICAgIHNpZGVWYWx1ZSA9IE1hdGgubWF4KE1hdGgubWluKHBvcHBlcltsZW5dIC0gYXJyb3dFbGVtZW50U2l6ZSwgc2lkZVZhbHVlKSwgMCk7DQoNCiAgICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDsNCiAgICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpOw0KDQogICAgcmV0dXJuIGRhdGE7DQogIH0NCg0KICAvKioNCiAgICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgdmFyaWF0aW9uIG9mIHRoZSBnaXZlbiBvbmUNCiAgICogQG1ldGhvZA0KICAgKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzDQogICAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgdmFyaWF0aW9uDQogICAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvbg0KICAgKi8NCiAgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKSB7DQogICAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHsNCiAgICAgIHJldHVybiAnc3RhcnQnOw0KICAgIH0gZWxzZSBpZiAodmFyaWF0aW9uID09PSAnc3RhcnQnKSB7DQogICAgICByZXR1cm4gJ2VuZCc7DQogICAgfQ0KICAgIHJldHVybiB2YXJpYXRpb247DQogIH0NCg0KICAvKioNCiAgICogTGlzdCBvZiBhY2NlcHRlZCBwbGFjZW1lbnRzIHRvIHVzZSBhcyB2YWx1ZXMgb2YgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbi48YnIgLz4NCiAgICogVmFsaWQgcGxhY2VtZW50cyBhcmU6DQogICAqIC0gYGF1dG9gDQogICAqIC0gYHRvcGANCiAgICogLSBgcmlnaHRgDQogICAqIC0gYGJvdHRvbWANCiAgICogLSBgbGVmdGANCiAgICoNCiAgICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6DQogICAqIC0gYC1zdGFydGANCiAgICogLSBgLWVuZGANCiAgICoNCiAgICogVmFyaWF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgZWFzaWx5IGlmIHlvdSB0aGluayBvZiB0aGVtIGFzIHRoZSBsZWZ0IHRvIHJpZ2h0DQogICAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGANCiAgICogaXMgcmlnaHQuPGJyIC8+DQogICAqIFZlcnRpY2FsbHkgKGBsZWZ0YCBhbmQgYHJpZ2h0YCksIGBzdGFydGAgaXMgdG9wIGFuZCBgZW5kYCBpcyBib3R0b20uDQogICAqDQogICAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOg0KICAgKiAtIGB0b3AtZW5kYCAob24gdG9wIG9mIHJlZmVyZW5jZSwgcmlnaHQgYWxpZ25lZCkNCiAgICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKQ0KICAgKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKQ0KICAgKiAtIGBhdXRvLXJpZ2h0YCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KQ0KICAgKg0KICAgKiBAc3RhdGljDQogICAqIEB0eXBlIHtBcnJheX0NCiAgICogQGVudW0ge1N0cmluZ30NCiAgICogQHJlYWRvbmx5DQogICAqIEBtZXRob2QgcGxhY2VtZW50cw0KICAgKiBAbWVtYmVyb2YgUG9wcGVyDQogICAqLw0KICB2YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddOw0KDQogIC8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYA0KICB2YXIgdmFsaWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5zbGljZSgzKTsNCg0KICAvKioNCiAgICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHMNCiAgICogY2xvY2t3aXNlIChvciBjb3VudGVyLWNsb2Nrd2lzZSkuDQogICAqDQogICAqIEBtZXRob2QNCiAgICogQG1lbWJlcm9mIFBvcHBlci5VdGlscw0KICAgKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucykNCiAgICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlDQogICAqIEByZXR1cm5zIHtBcnJheX0gcGxhY2VtZW50cyBpbmNsdWRpbmcgdGhlaXIgdmFyaWF0aW9ucw0KICAgKi8NCiAgZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkgew0KICAgIHZhciBjb3VudGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTsNCg0KICAgIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7DQogICAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTsNCiAgICByZXR1cm4gY291bnRlciA/IGFyci5yZXZlcnNlKCkgOiBhcnI7DQogIH0NCg0KICB2YXIgQkVIQVZJT1JTID0gew0KICAgIEZMSVA6ICdmbGlwJywNCiAgICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLA0KICAgIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJw0KICB9Ow0KDQogIC8qKg0KICAgKiBAZnVuY3Rpb24NCiAgICogQG1lbWJlcm9mIE1vZGlmaWVycw0KICAgKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZA0KICAgKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zDQogICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQNCiAgICovDQogIGZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykgew0KICAgIC8vIGlmIGBpbm5lcmAgbW9kaWZpZXIgaXMgZW5hYmxlZCwgd2UgY2FuJ3QgdXNlIHRoZSBgZmxpcGAgbW9kaWZpZXINCiAgICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7DQogICAgICByZXR1cm4gZGF0YTsNCiAgICB9DQoNCiAgICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7DQogICAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlcw0KICAgICAgcmV0dXJuIGRhdGE7DQogICAgfQ0KDQogICAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpOw0KDQogICAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07DQogICAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTsNCiAgICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJzsNCg0KICAgIHZhciBmbGlwT3JkZXIgPSBbXTsNCg0KICAgIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikgew0KICAgICAgY2FzZSBCRUhBVklPUlMuRkxJUDoNCiAgICAgICAgZmxpcE9yZGVyID0gW3BsYWNlbWVudCwgcGxhY2VtZW50T3Bwb3NpdGVdOw0KICAgICAgICBicmVhazsNCiAgICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRToNCiAgICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCk7DQogICAgICAgIGJyZWFrOw0KICAgICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRToNCiAgICAgICAgZmxpcE9yZGVyID0gY2xvY2t3aXNlKHBsYWNlbWVudCwgdHJ1ZSk7DQogICAgICAgIGJyZWFrOw0KICAgICAgZGVmYXVsdDoNCiAgICAgICAgZmxpcE9yZGVyID0gb3B0aW9ucy5iZWhhdmlvcjsNCiAgICB9DQoNCiAgICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHsNCiAgICAgIGlmIChwbGFjZW1lbnQgIT09IHN0ZXAgfHwgZmxpcE9yZGVyLmxlbmd0aCA9PT0gaW5kZXggKyAxKSB7DQogICAgICAgIHJldHVybiBkYXRhOw0KICAgICAgfQ0KDQogICAgICBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdOw0KICAgICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpOw0KDQogICAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7DQogICAgICB2YXIgcmVmT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7DQoNCiAgICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZQ0KICAgICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjsNCiAgICAgIHZhciBvdmVybGFwc1JlZiA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IocmVmT2Zmc2V0cy5sZWZ0KSB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKHJlZk9mZnNldHMucmlnaHQpIHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IocmVmT2Zmc2V0cy50b3ApIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IocmVmT2Zmc2V0cy5ib3R0b20pOw0KDQogICAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpOw0KICAgICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTsNCiAgICAgIHZhciBvdmVyZmxvd3NUb3AgPSBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihib3VuZGFyaWVzLnRvcCk7DQogICAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pOw0KDQogICAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tOw0KDQogICAgICAvLyBmbGlwIHRoZSB2YXJpYXRpb24gaWYgcmVxdWlyZWQNCiAgICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTsNCiAgICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uID0gISFvcHRpb25zLmZsaXBWYXJpYXRpb25zICYmIChpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NSaWdodCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzVG9wIHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzQm90dG9tKTsNCg0KICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikgew0KICAgICAgICAvLyB0aGlzIGJvb2xlYW4gdG8gZGV0ZWN0IGFueSBmbGlwIGxvb3ANCiAgICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTsNCg0KICAgICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykgew0KICAgICAgICAgIHBsYWNlbWVudCA9IGZsaXBPcmRlcltpbmRleCArIDFdOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHsNCiAgICAgICAgICB2YXJpYXRpb24gPSBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pOw0KICAgICAgICB9DQoNCiAgICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpOw0KDQogICAgICAgIC8vIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGBwb3NpdGlvbmAsIHdlIHdhbnQgdG8gcHJlc2VydmUgaXQgYWxvbmcgd2l0aA0KICAgICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmUNCiAgICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpOw0KDQogICAgICAgIGRhdGEgPSBydW5Nb2RpZmllcnMoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGRhdGEsICdmbGlwJyk7DQogICAgICB9DQogICAgfSk7DQogICAgcmV0dXJuIGRhdGE7DQogIH0NCg0KICAvKioNCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiBNb2RpZmllcnMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucw0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkDQogICAqLw0KICBmdW5jdGlvbiBrZWVwVG9nZXRoZXIoZGF0YSkgew0KICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLA0KICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlciwNCiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7DQoNCiAgICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsNCiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yOw0KICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTsNCiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7DQogICAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJzsNCiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnOw0KDQogICAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkgew0KICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTsNCiAgICB9DQogICAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkgew0KICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTsNCiAgICB9DQoNCiAgICByZXR1cm4gZGF0YTsNCiAgfQ0KDQogIC8qKg0KICAgKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyDQogICAqIEBmdW5jdGlvbg0KICAgKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9DQogICAqIEBwcml2YXRlDQogICAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nDQogICAqIEBhcmd1bWVudCB7U3RyaW5nfSBtZWFzdXJlbWVudCAtIGBoZWlnaHRgIG9yIGB3aWR0aGANCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMNCiAgICogQHJldHVybnMge051bWJlcnxTdHJpbmd9DQogICAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZA0KICAgKi8NCiAgZnVuY3Rpb24gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKSB7DQogICAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0DQogICAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XC18XCspP1xkKlwuP1xkKikoLiopLyk7DQogICAgdmFyIHZhbHVlID0gK3NwbGl0WzFdOw0KICAgIHZhciB1bml0ID0gc3BsaXRbMl07DQoNCiAgICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzDQogICAgaWYgKCF2YWx1ZSkgew0KICAgICAgcmV0dXJuIHN0cjsNCiAgICB9DQoNCiAgICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHsNCiAgICAgIHZhciBlbGVtZW50ID0gdm9pZCAwOw0KICAgICAgc3dpdGNoICh1bml0KSB7DQogICAgICAgIGNhc2UgJyVwJzoNCiAgICAgICAgICBlbGVtZW50ID0gcG9wcGVyT2Zmc2V0czsNCiAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAnJSc6DQogICAgICAgIGNhc2UgJyVyJzoNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0czsNCiAgICAgIH0NCg0KICAgICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpOw0KICAgICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7DQogICAgfSBlbHNlIGlmICh1bml0ID09PSAndmgnIHx8IHVuaXQgPT09ICd2dycpIHsNCiAgICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnQNCiAgICAgIHZhciBzaXplID0gdm9pZCAwOw0KICAgICAgaWYgKHVuaXQgPT09ICd2aCcpIHsNCiAgICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHNpemUgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTsNCiAgICB9IGVsc2Ugew0KICAgICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWUNCiAgICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWUNCiAgICAgIHJldHVybiB2YWx1ZTsNCiAgICB9DQogIH0NCg0KICAvKioNCiAgICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy4NCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH0NCiAgICogQHByaXZhdGUNCiAgICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldA0KICAgKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0cw0KICAgKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cw0KICAgKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudA0KICAgKiBAcmV0dXJucyB7QXJyYXl9IGEgdHdvIGNlbGxzIGFycmF5IHdpdGggeCBhbmQgeSBvZmZzZXRzIGluIG51bWJlcnMNCiAgICovDQogIGZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkgew0KICAgIHZhciBvZmZzZXRzID0gWzAsIDBdOw0KDQogICAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoDQogICAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZQ0KICAgIC8vIHdpbGwgdXNlIHRoZSBvdGhlciBvbmUNCiAgICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7DQoNCiAgICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMNCiAgICAvLyBUaGUgcmVnZXggYWRkcmVzc2VzIHZhbHVlcyB3aXRoIHRoZSBwbHVzIG9yIG1pbnVzIHNpZ24gaW4gZnJvbnQgKCsxMCwgLTIwLCBldGMpDQogICAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFwrfFwtKS8pLm1hcChmdW5jdGlvbiAoZnJhZykgew0KICAgICAgcmV0dXJuIGZyYWcudHJpbSgpOw0KICAgIH0pOw0KDQogICAgLy8gRGV0ZWN0IGlmIHRoZSBvZmZzZXQgc3RyaW5nIGNvbnRhaW5zIGEgcGFpciBvZiB2YWx1ZXMgb3IgYSBzaW5nbGUgb25lDQogICAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2UNCiAgICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykgew0KICAgICAgcmV0dXJuIGZyYWcuc2VhcmNoKC8sfFxzLykgIT09IC0xOw0KICAgIH0pKTsNCg0KICAgIGlmIChmcmFnbWVudHNbZGl2aWRlcl0gJiYgZnJhZ21lbnRzW2RpdmlkZXJdLmluZGV4T2YoJywnKSA9PT0gLTEpIHsNCiAgICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpOw0KICAgIH0NCg0KICAgIC8vIElmIGRpdmlkZXIgaXMgZm91bmQsIHdlIGRpdmlkZSB0aGUgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzIHRvIGRpdmlkZQ0KICAgIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS4NCiAgICB2YXIgc3BsaXRSZWdleCA9IC9ccyosXHMqfFxzKy87DQogICAgdmFyIG9wcyA9IGRpdmlkZXIgIT09IC0xID8gW2ZyYWdtZW50cy5zbGljZSgwLCBkaXZpZGVyKS5jb25jYXQoW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVswXV0pLCBbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzFdXS5jb25jYXQoZnJhZ21lbnRzLnNsaWNlKGRpdmlkZXIgKyAxKSldIDogW2ZyYWdtZW50c107DQoNCiAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9ucw0KICAgIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkgew0KICAgICAgLy8gTW9zdCBvZiB0aGUgdW5pdHMgcmVseSBvbiB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBvcHBlcg0KICAgICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7DQogICAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTsNCiAgICAgIHJldHVybiBvcA0KICAgICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnMNCiAgICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV0NCiAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsNCiAgICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkgew0KICAgICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7DQogICAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSB0cnVlOw0KICAgICAgICAgIHJldHVybiBhOw0KICAgICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7DQogICAgICAgICAgYVthLmxlbmd0aCAtIDFdICs9IGI7DQogICAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTsNCiAgICAgICAgICByZXR1cm4gYTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7DQogICAgICAgIH0NCiAgICAgIH0sIFtdKQ0KICAgICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpDQogICAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHsNCiAgICAgICAgcmV0dXJuIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cyk7DQogICAgICB9KTsNCiAgICB9KTsNCg0KICAgIC8vIExvb3AgdHJvdWdoIHRoZSBvZmZzZXRzIGFycmF5cyBhbmQgZXhlY3V0ZSB0aGUgb3BlcmF0aW9ucw0KICAgIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHsNCiAgICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikgew0KICAgICAgICBpZiAoaXNOdW1lcmljKGZyYWcpKSB7DQogICAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTsNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfSk7DQogICAgcmV0dXJuIG9mZnNldHM7DQogIH0NCg0KICAvKioNCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiBNb2RpZmllcnMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2QNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucw0KICAgKiBAYXJndW1lbnQge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTANCiAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uDQogICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQNCiAgICovDQogIGZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7DQogICAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0Ow0KICAgIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudCwNCiAgICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cywNCiAgICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsDQogICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlOw0KDQogICAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTsNCg0KICAgIHZhciBvZmZzZXRzID0gdm9pZCAwOw0KICAgIGlmIChpc051bWVyaWMoK29mZnNldCkpIHsNCiAgICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07DQogICAgfSBlbHNlIHsNCiAgICAgIG9mZnNldHMgPSBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlciwgcmVmZXJlbmNlLCBiYXNlUGxhY2VtZW50KTsNCiAgICB9DQoNCiAgICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7DQogICAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07DQogICAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdOw0KICAgIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykgew0KICAgICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdOw0KICAgICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTsNCiAgICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7DQogICAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdOw0KICAgICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdOw0KICAgIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHsNCiAgICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07DQogICAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07DQogICAgfQ0KDQogICAgZGF0YS5wb3BwZXIgPSBwb3BwZXI7DQogICAgcmV0dXJuIGRhdGE7DQogIH0NCg0KICAvKioNCiAgICogQGZ1bmN0aW9uDQogICAqIEBtZW1iZXJvZiBNb2RpZmllcnMNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZA0KICAgKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zDQogICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWQNCiAgICovDQogIGZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7DQogICAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpOw0KDQogICAgLy8gSWYgb2Zmc2V0UGFyZW50IGlzIHRoZSByZWZlcmVuY2UgZWxlbWVudCwgd2UgcmVhbGx5IHdhbnQgdG8NCiAgICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG8NCiAgICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuDQogICAgaWYgKGRhdGEuaW5zdGFuY2UucmVmZXJlbmNlID09PSBib3VuZGFyaWVzRWxlbWVudCkgew0KICAgICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpOw0KICAgIH0NCg0KICAgIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZQ0KICAgIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmcNCiAgICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmDQogICAgdmFyIHRyYW5zZm9ybVByb3AgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpOw0KICAgIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvbg0KICAgIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLA0KICAgICAgICBsZWZ0ID0gcG9wcGVyU3R5bGVzLmxlZnQsDQogICAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTsNCg0KICAgIHBvcHBlclN0eWxlcy50b3AgPSAnJzsNCiAgICBwb3BwZXJTdHlsZXMubGVmdCA9ICcnOw0KICAgIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnOw0KDQogICAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTsNCg0KICAgIC8vIE5PVEU6IERPTSBhY2Nlc3MgaGVyZQ0KICAgIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZA0KICAgIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7DQogICAgcG9wcGVyU3R5bGVzLmxlZnQgPSBsZWZ0Ow0KICAgIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTsNCg0KICAgIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7DQoNCiAgICB2YXIgb3JkZXIgPSBvcHRpb25zLnByaW9yaXR5Ow0KICAgIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyOw0KDQogICAgdmFyIGNoZWNrID0gew0KICAgICAgcHJpbWFyeTogZnVuY3Rpb24gcHJpbWFyeShwbGFjZW1lbnQpIHsNCiAgICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07DQogICAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7DQogICAgICAgICAgdmFsdWUgPSBNYXRoLm1heChwb3BwZXJbcGxhY2VtZW50XSwgYm91bmRhcmllc1twbGFjZW1lbnRdKTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpOw0KICAgICAgfSwNCiAgICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkgew0KICAgICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJzsNCiAgICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW21haW5TaWRlXTsNCiAgICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHsNCiAgICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpOw0KICAgICAgfQ0KICAgIH07DQoNCiAgICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHsNCiAgICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JzsNCiAgICAgIHBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIGNoZWNrW3NpZGVdKHBsYWNlbWVudCkpOw0KICAgIH0pOw0KDQogICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjsNCg0KICAgIHJldHVybiBkYXRhOw0KICB9DQoNCiAgLyoqDQogICAqIEBmdW5jdGlvbg0KICAgKiBAbWVtYmVyb2YgTW9kaWZpZXJzDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2QNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucw0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkDQogICAqLw0KICBmdW5jdGlvbiBzaGlmdChkYXRhKSB7DQogICAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50Ow0KICAgIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07DQogICAgdmFyIHNoaWZ0dmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07DQoNCiAgICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXINCiAgICBpZiAoc2hpZnR2YXJpYXRpb24pIHsNCiAgICAgIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLA0KICAgICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLA0KICAgICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyOw0KDQogICAgICB2YXIgaXNWZXJ0aWNhbCA9IFsnYm90dG9tJywgJ3RvcCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xOw0KICAgICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7DQogICAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnOw0KDQogICAgICB2YXIgc2hpZnRPZmZzZXRzID0gew0KICAgICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksDQogICAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKQ0KICAgICAgfTsNCg0KICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pOw0KICAgIH0NCg0KICAgIHJldHVybiBkYXRhOw0KICB9DQoNCiAgLyoqDQogICAqIEBmdW5jdGlvbg0KICAgKiBAbWVtYmVyb2YgTW9kaWZpZXJzDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnMNCiAgICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZA0KICAgKi8NCiAgZnVuY3Rpb24gaGlkZShkYXRhKSB7DQogICAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7DQogICAgICByZXR1cm4gZGF0YTsNCiAgICB9DQoNCiAgICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7DQogICAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7DQogICAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ3ByZXZlbnRPdmVyZmxvdyc7DQogICAgfSkuYm91bmRhcmllczsNCg0KICAgIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkgew0KICAgICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkDQogICAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7DQogICAgICAgIHJldHVybiBkYXRhOw0KICAgICAgfQ0KDQogICAgICBkYXRhLmhpZGUgPSB0cnVlOw0KICAgICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJzsNCiAgICB9IGVsc2Ugew0KICAgICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkDQogICAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gZGF0YTsNCiAgICAgIH0NCg0KICAgICAgZGF0YS5oaWRlID0gZmFsc2U7DQogICAgICBkYXRhLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXSA9IGZhbHNlOw0KICAgIH0NCg0KICAgIHJldHVybiBkYXRhOw0KICB9DQoNCiAgLyoqDQogICAqIEBmdW5jdGlvbg0KICAgKiBAbWVtYmVyb2YgTW9kaWZpZXJzDQogICAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2QNCiAgICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9ucw0KICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkDQogICAqLw0KICBmdW5jdGlvbiBpbm5lcihkYXRhKSB7DQogICAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50Ow0KICAgIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07DQogICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsDQogICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLA0KICAgICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTsNCg0KICAgIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7DQoNCiAgICB2YXIgc3VidHJhY3RMZW5ndGggPSBbJ3RvcCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA9PT0gLTE7DQoNCiAgICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApOw0KDQogICAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpOw0KICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KHBvcHBlcik7DQoNCiAgICByZXR1cm4gZGF0YTsNCiAgfQ0KDQogIC8qKg0KICAgKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZA0KICAgKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz4NCiAgICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkIG9uIGVhY2ggdXBkYXRlLCB0aGlzIG1lYW5zIHRoYXQgeW91IG11c3QNCiAgICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLg0KICAgKg0KICAgKiBAZnVuY3Rpb24gTW9kaWZpZXJGbg0KICAgKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZA0KICAgKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zDQogICAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkDQogICAqLw0KDQogIC8qKg0KICAgKiBNb2RpZmllcnMgYXJlIHBsdWdpbnMgdXNlZCB0byBhbHRlciB0aGUgYmVoYXZpb3Igb2YgeW91ciBwb3BwZXJzLjxiciAvPg0KICAgKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzDQogICAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS4NCiAgICoNCiAgICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuDQogICAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLg0KICAgKiBAbmFtZXNwYWNlIG1vZGlmaWVycw0KICAgKi8NCiAgdmFyIG1vZGlmaWVycyA9IHsNCiAgICAvKioNCiAgICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlDQogICAgICogZWxlbWVudC48YnIgLz4NCiAgICAgKiBJdCB3aWxsIHJlYWQgdGhlIHZhcmlhdGlvbiBvZiB0aGUgYHBsYWNlbWVudGAgcHJvcGVydHkuPGJyIC8+DQogICAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBzaGlmdDogew0KICAgICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTEwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8NCiAgICAgIG9yZGVyOiAxMDAsDQogICAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovDQogICAgICBlbmFibGVkOiB0cnVlLA0KICAgICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLw0KICAgICAgZm46IHNoaWZ0DQogICAgfSwNCg0KICAgIC8qKg0KICAgICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy4NCiAgICAgKg0KICAgICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czoNCiAgICAgKiAtIGBweGAgb3IgdW5pdGxlc3MsIGludGVycHJldGVkIGFzIHBpeGVscw0KICAgICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQNCiAgICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnQNCiAgICAgKiAtIGB2d2AsIENTUyB2aWV3cG9ydCB3aWR0aCB1bml0DQogICAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXQNCiAgICAgKg0KICAgICAqIEZvciBsZW5ndGggaXMgaW50ZW5kZWQgdGhlIG1haW4gYXhpcyByZWxhdGl2ZSB0byB0aGUgcGxhY2VtZW50IG9mIHRoZSBwb3BwZXIuPGJyIC8+DQogICAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGUNCiAgICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBoZWlnaHQuDQogICAgICoNCiAgICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgdmFsdWUgKGFzIGBOdW1iZXJgIG9yIGBTdHJpbmdgKSwgb3IgYSBwYWlyIG9mIHZhbHVlcw0KICAgICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz4NCiAgICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmUNCiAgICAgKiByZW1vdmVkIGluIHYyLjxiciAvPg0KICAgICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy4NCiAgICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC4NCiAgICAgKg0KICAgICAqIFZhbGlkIGV4YW1wbGVzIGFyZToNCiAgICAgKiBgYGANCiAgICAgKiAxMA0KICAgICAqICcxMCUnDQogICAgICogJzEwLCAxMCcNCiAgICAgKiAnMTAlLCAxMCcNCiAgICAgKiAnMTAgKyAxMCUnDQogICAgICogJzEwIC0gNXZoICsgMyUnDQogICAgICogJy0xMHB4ICsgNXZoLCA1cHggLSA2JScNCiAgICAgKiBgYGANCiAgICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcA0KICAgICAqID4gd2l0aCB0aGVpciByZWZlcmVuY2UgZWxlbWVudCwgdW5mb3J0dW5hdGVseSwgeW91IHdpbGwgaGF2ZSB0byBkaXNhYmxlIHRoZSBgZmxpcGAgbW9kaWZpZXIuDQogICAgICogPiBNb3JlIG9uIHRoaXMgW3JlYWRpbmcgdGhpcyBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvaXNzdWVzLzM3MykNCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBvZmZzZXQ6IHsNCiAgICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovDQogICAgICBvcmRlcjogMjAwLA0KICAgICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqLw0KICAgICAgZW5hYmxlZDogdHJ1ZSwNCiAgICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi8NCiAgICAgIGZuOiBvZmZzZXQsDQogICAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wDQogICAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb24NCiAgICAgICAqLw0KICAgICAgb2Zmc2V0OiAwDQogICAgfSwNCg0KICAgIC8qKg0KICAgICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS4NCiAgICAgKg0KICAgICAqIEFuIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPg0KICAgICAqIFdlIGNhbiBzYXkgaXQgaGFzICJlc2NhcGVkIHRoZSBib3VuZGFyaWVzIiDigJQgb3IganVzdCAiZXNjYXBlZCIuPGJyIC8+DQogICAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOg0KICAgICAqDQogICAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gInRyYXBwZWQiIGluIHRoZSBib3VuZGFyaWVzLCBvcg0KICAgICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kICJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlIg0KICAgICAqDQogICAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseQ0KICAgICAqIG91dHNpZGUgaXRzIGJvdW5kYXJpZXMsIHRoZSBwb3BwZXIgd2lsbCBvdmVyZmxvdyAob3IgY29tcGxldGVseSBsZWF2ZSkNCiAgICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS4NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBwcmV2ZW50T3ZlcmZsb3c6IHsNCiAgICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovDQogICAgICBvcmRlcjogMzAwLA0KICAgICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqLw0KICAgICAgZW5hYmxlZDogdHJ1ZSwNCiAgICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi8NCiAgICAgIGZuOiBwcmV2ZW50T3ZlcmZsb3csDQogICAgICAvKioNCiAgICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dDQogICAgICAgKiBQb3BwZXIgd2lsbCB0cnkgdG8gcHJldmVudCBvdmVyZmxvdyBmb2xsb3dpbmcgdGhlc2UgcHJpb3JpdGllcyBieSBkZWZhdWx0LA0KICAgICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YA0KICAgICAgICovDQogICAgICBwcmlvcml0eTogWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSwNCiAgICAgIC8qKg0KICAgICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01DQogICAgICAgKiBBbW91bnQgb2YgcGl4ZWwgdXNlZCB0byBkZWZpbmUgYSBtaW5pbXVtIGRpc3RhbmNlIGJldHdlZW4gdGhlIGJvdW5kYXJpZXMNCiAgICAgICAqIGFuZCB0aGUgcG9wcGVyIHRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGhhcyBhbHdheXMgYSBsaXR0bGUgcGFkZGluZw0KICAgICAgICogYmV0d2VlbiB0aGUgZWRnZXMgb2YgaXRzIGNvbnRhaW5lcg0KICAgICAgICovDQogICAgICBwYWRkaW5nOiA1LA0KICAgICAgLyoqDQogICAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50Jw0KICAgICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllciwgY2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCwNCiAgICAgICAqIGB2aWV3cG9ydGAgb3IgYW55IERPTSBlbGVtZW50Lg0KICAgICAgICovDQogICAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCcNCiAgICB9LA0KDQogICAgLyoqDQogICAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaG90aGVycw0KICAgICAqIHdpdGhvdXQgbGVhdmluZyBhbnkgZ2FwIGJldHdlZW4gdGhlIHR3by4gRXhwZWNpYWxseSB1c2VmdWwgd2hlbiB0aGUgYXJyb3cgaXMNCiAgICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBhc3N1cmUgaXQgdG8gcG9pbnQgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50Lg0KICAgICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMsIHlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luDQogICAgICogYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuDQogICAgICogQG1lbWJlcm9mIG1vZGlmaWVycw0KICAgICAqIEBpbm5lcg0KICAgICAqLw0KICAgIGtlZXBUb2dldGhlcjogew0KICAgICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8NCiAgICAgIG9yZGVyOiA0MDAsDQogICAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovDQogICAgICBlbmFibGVkOiB0cnVlLA0KICAgICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLw0KICAgICAgZm46IGtlZXBUb2dldGhlcg0KICAgIH0sDQoNCiAgICAvKioNCiAgICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlDQogICAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuDQogICAgICogSXQgd2lsbCByZWFkIHRoZSBvdXRlciBzaXplIG9mIHRoZSBgYXJyb3dFbGVtZW50YCBub2RlIHRvIGRldGVjdCBob3cgbWFueQ0KICAgICAqIHBpeGVscyBvZiBjb25qdWN0aW9uIGFyZSBuZWVkZWQuDQogICAgICoNCiAgICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBhcnJvdzogew0KICAgICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTUwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi8NCiAgICAgIG9yZGVyOiA1MDAsDQogICAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovDQogICAgICBlbmFibGVkOiB0cnVlLA0KICAgICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLw0KICAgICAgZm46IGFycm93LA0KICAgICAgLyoqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGVsZW1lbnQ9J1t4LWFycm93XScgLSBTZWxlY3RvciBvciBub2RlIHVzZWQgYXMgYXJyb3cgKi8NCiAgICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nDQogICAgfSwNCg0KICAgIC8qKg0KICAgICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzDQogICAgICogcmVmZXJlbmNlIGVsZW1lbnQuDQogICAgICoNCiAgICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuDQogICAgICoNCiAgICAgKiAqKk5PVEU6KiogdGhpcyBtb2RpZmllciB3aWxsIGludGVycnVwdCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUgYW5kIHdpbGwNCiAgICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50Lg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBmbGlwOiB7DQogICAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NjAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqLw0KICAgICAgb3JkZXI6IDYwMCwNCiAgICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8NCiAgICAgIGVuYWJsZWQ6IHRydWUsDQogICAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovDQogICAgICBmbjogZmxpcCwNCiAgICAgIC8qKg0KICAgICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnDQogICAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZg0KICAgICAgICogYGZsaXBgLCBgY2xvY2t3aXNlYCwgYGNvdW50ZXJjbG9ja3dpc2VgIG9yIGFuIGFycmF5IHdpdGggYSBsaXN0IG9mIHZhbGlkDQogICAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpLg0KICAgICAgICovDQogICAgICBiZWhhdmlvcjogJ2ZsaXAnLA0KICAgICAgLyoqDQogICAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTUNCiAgICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgDQogICAgICAgKi8NCiAgICAgIHBhZGRpbmc6IDUsDQogICAgICAvKioNCiAgICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSd2aWV3cG9ydCcNCiAgICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24sDQogICAgICAgKiB0aGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllcw0KICAgICAgICogKGV4Y2VwdCBpZiBrZWVwVG9nZXRoZXIgaXMgZW5hYmxlZCkNCiAgICAgICAqLw0KICAgICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcNCiAgICB9LA0KDQogICAgLyoqDQogICAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC4NCiAgICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZQ0KICAgICAqIHRoZSByZWZlcmVuY2UgZWxlbWVudC4NCiAgICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzDQogICAgICogQGlubmVyDQogICAgICovDQogICAgaW5uZXI6IHsNCiAgICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovDQogICAgICBvcmRlcjogNzAwLA0KICAgICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8NCiAgICAgIGVuYWJsZWQ6IGZhbHNlLA0KICAgICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqLw0KICAgICAgZm46IGlubmVyDQogICAgfSwNCg0KICAgIC8qKg0KICAgICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlDQogICAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW4NCiAgICAgKiBiZSB1c2VkIHRvIGhpZGUgd2l0aCBhIENTUyBzZWxlY3RvciB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBpcw0KICAgICAqIG91dCBvZiBib3VuZGFyaWVzLg0KICAgICAqDQogICAgICogUmVxdWlyZXMgdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIG1vZGlmaWVyIGJlZm9yZSBpdCBpbiBvcmRlciB0byB3b3JrLg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBoaWRlOiB7DQogICAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqLw0KICAgICAgb3JkZXI6IDgwMCwNCiAgICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8NCiAgICAgIGVuYWJsZWQ6IHRydWUsDQogICAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovDQogICAgICBmbjogaGlkZQ0KICAgIH0sDQoNCiAgICAvKioNCiAgICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHMNCiAgICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLg0KICAgICAqDQogICAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzDQogICAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsDQogICAgICogaW4gY2FzZSB5b3UgbmVlZCB0byByZXBsYWNlIGBhcHBseVN0eWxlYCB3aXRoIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uLg0KICAgICAqDQogICAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5DQogICAgICogd2l0aCBwcmV2aW91cyB2ZXJzaW9ucyBvZiBQb3BwZXIuanMuIEV4cGVjdCB0aGUgbW9kaWZpZXJzIG9yZGVyaW5nIG1ldGhvZA0KICAgICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuDQogICAgICoNCiAgICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzDQogICAgICogQGlubmVyDQogICAgICovDQogICAgY29tcHV0ZVN0eWxlOiB7DQogICAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqLw0KICAgICAgb3JkZXI6IDg1MCwNCiAgICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8NCiAgICAgIGVuYWJsZWQ6IHRydWUsDQogICAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovDQogICAgICBmbjogY29tcHV0ZVN0eWxlLA0KICAgICAgLyoqDQogICAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWUNCiAgICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzZCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLg0KICAgICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzLg0KICAgICAgICovDQogICAgICBncHVBY2NlbGVyYXRpb246IHRydWUsDQogICAgICAvKioNCiAgICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXQ0KICAgICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi4NCiAgICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGBib3R0b21gDQogICAgICAgKi8NCiAgICAgIHg6ICdib3R0b20nLA0KICAgICAgLyoqDQogICAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddDQogICAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLg0KICAgICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYHJpZ2h0YA0KICAgICAgICovDQogICAgICB5OiAncmlnaHQnDQogICAgfSwNCg0KICAgIC8qKg0KICAgICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuDQogICAgICoNCiAgICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2UNCiAgICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdQ0KICAgICAqIHdhbnQgdG8gZGVsZWdhdGUgYWxsIHRoZSBET00gbWFuaXB1bGF0aW9ucyB0byBpdC4NCiAgICAgKg0KICAgICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50DQogICAgICogaGFzIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGFic29sdXRlYCBiZWZvcmUgUG9wcGVyLmpzIGNhbiBkbyBpdHMgd29yayENCiAgICAgKg0KICAgICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91IG93biB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC4NCiAgICAgKg0KICAgICAqIEBtZW1iZXJvZiBtb2RpZmllcnMNCiAgICAgKiBAaW5uZXINCiAgICAgKi8NCiAgICBhcHBseVN0eWxlOiB7DQogICAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9OTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqLw0KICAgICAgb3JkZXI6IDkwMCwNCiAgICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi8NCiAgICAgIGVuYWJsZWQ6IHRydWUsDQogICAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovDQogICAgICBmbjogYXBwbHlTdHlsZSwNCiAgICAgIC8qKiBAcHJvcCB7RnVuY3Rpb259ICovDQogICAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsDQogICAgICAvKioNCiAgICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS4xMC4wLCB0aGUgcHJvcGVydHkgbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXINCiAgICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZQ0KICAgICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNkIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuDQogICAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXMuDQogICAgICAgKi8NCiAgICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkDQogICAgfQ0KICB9Ow0KDQogIC8qKg0KICAgKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb25zIHVzZWQgYnkgUG9wcGVyLmpzDQogICAqIHRoaXMgb2JqZWN0IGdldCBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuDQogICAqIEBuYW1lIGRhdGFPYmplY3QNCiAgICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZQ0KICAgKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyDQogICAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50IFBsYWNlbWVudCBvcmlnaW5hbGx5IGRlZmluZWQgb24gaW5pdA0KICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXINCiAgICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyLg0KICAgKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXINCiAgICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuc3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLCBpdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKQ0KICAgKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdywgaXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYCkNCiAgICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllcw0KICAgKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzIFRoZSBtZWFzdXJlbWVudHMgb2YgcG9wcGVyLCByZWZlcmVuY2UgYW5kIGFycm93IGVsZW1lbnRzLg0KICAgKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnBvcHBlciBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXMNCiAgICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzDQogICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDANCiAgICovDQoNCiAgLyoqDQogICAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+DQogICAqIFRoZXNlIGNhbiBiZSBvdmVycmlkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+DQogICAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYXMgM3JkIGFyZ3VtZW50IGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lDQogICAqIHN0cnVjdHVyZSBvZiB0aGlzIG9iamVjdCwgZXhhbXBsZToNCiAgICogYGBgDQogICAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHsNCiAgICogICBtb2RpZmllcnM6IHsNCiAgICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9DQogICAqICAgfQ0KICAgKiB9KQ0KICAgKiBgYGANCiAgICogQHR5cGUge09iamVjdH0NCiAgICogQHN0YXRpYw0KICAgKiBAbWVtYmVyb2YgUG9wcGVyDQogICAqLw0KICB2YXIgRGVmYXVsdHMgPSB7DQogICAgLyoqDQogICAgICogUG9wcGVyJ3MgcGxhY2VtZW50DQogICAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbScNCiAgICAgKi8NCiAgICBwbGFjZW1lbnQ6ICdib3R0b20nLA0KDQogICAgLyoqDQogICAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGUNCiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gcG9zaXRpb25GaXhlZD1mYWxzZQ0KICAgICAqLw0KICAgIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLA0KDQogICAgLyoqDQogICAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQNCiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZXZlbnRzRW5hYmxlZD10cnVlDQogICAgICovDQogICAgZXZlbnRzRW5hYmxlZDogdHJ1ZSwNCg0KICAgIC8qKg0KICAgICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlbg0KICAgICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLg0KICAgICAqIEBwcm9wIHtCb29sZWFufSByZW1vdmVPbkRlc3Ryb3k9ZmFsc2UNCiAgICAgKi8NCiAgICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLA0KDQogICAgLyoqDQogICAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPg0KICAgICAqIEJ5IGRlZmF1bHQsIGlzIHNldCB0byBuby1vcC48YnIgLz4NCiAgICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLg0KICAgICAqIEBwcm9wIHtvbkNyZWF0ZX0NCiAgICAgKi8NCiAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoKSB7fSwNCg0KICAgIC8qKg0KICAgICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZCwgdGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkDQogICAgICogb24gdGhlIGluaXRpYWxpemF0aW9uL2NyZWF0aW9uIG9mIHRoZSBwb3BwZXIsIGJ1dCBvbmx5IG9uIHN1YnNlcXVlbnQNCiAgICAgKiB1cGRhdGVzLjxiciAvPg0KICAgICAqIEJ5IGRlZmF1bHQsIGlzIHNldCB0byBuby1vcC48YnIgLz4NCiAgICAgKiBBY2Nlc3MgUG9wcGVyLmpzIGluc3RhbmNlIHdpdGggYGRhdGEuaW5zdGFuY2VgLg0KICAgICAqIEBwcm9wIHtvblVwZGF0ZX0NCiAgICAgKi8NCiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoKSB7fSwNCg0KICAgIC8qKg0KICAgICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuDQogICAgICogVGhleSBwcm92aWRlIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdGllcyBvZiBQb3BwZXIuanMNCiAgICAgKiBAcHJvcCB7bW9kaWZpZXJzfQ0KICAgICAqLw0KICAgIG1vZGlmaWVyczogbW9kaWZpZXJzDQogIH07DQoNCiAgLyoqDQogICAqIEBjYWxsYmFjayBvbkNyZWF0ZQ0KICAgKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGENCiAgICovDQoNCiAgLyoqDQogICAqIEBjYWxsYmFjayBvblVwZGF0ZQ0KICAgKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGENCiAgICovDQoNCiAgLy8gVXRpbHMNCiAgLy8gTWV0aG9kcw0KICB2YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkgew0KICAgIC8qKg0KICAgICAqIENyZWF0ZSBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UNCiAgICAgKiBAY2xhc3MgUG9wcGVyDQogICAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxyZWZlcmVuY2VPYmplY3R9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXINCiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyLg0KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKQ0KICAgICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZQ0KICAgICAqLw0KICAgIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9Ow0KICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTsNCg0KICAgICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShfdGhpcy51cGRhdGUpOw0KICAgICAgfTsNCg0KICAgICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGljaw0KICAgICAgdGhpcy51cGRhdGUgPSBkZWJvdW5jZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKTsNCg0KICAgICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0DQogICAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTsNCg0KICAgICAgLy8gaW5pdCBzdGF0ZQ0KICAgICAgdGhpcy5zdGF0ZSA9IHsNCiAgICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLA0KICAgICAgICBpc0NyZWF0ZWQ6IGZhbHNlLA0KICAgICAgICBzY3JvbGxQYXJlbnRzOiBbXQ0KICAgICAgfTsNCg0KICAgICAgLy8gZ2V0IHJlZmVyZW5jZSBhbmQgcG9wcGVyIGVsZW1lbnRzIChhbGxvdyBqUXVlcnkgd3JhcHBlcnMpDQogICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlOw0KICAgICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjsNCg0KICAgICAgLy8gRGVlcCBtZXJnZSBtb2RpZmllcnMgb3B0aW9ucw0KICAgICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9Ow0KICAgICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgew0KICAgICAgICBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA9IF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzW25hbWVdIHx8IHt9LCBvcHRpb25zLm1vZGlmaWVycyA/IG9wdGlvbnMubW9kaWZpZXJzW25hbWVdIDoge30pOw0KICAgICAgfSk7DQoNCiAgICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KQ0KICAgICAgdGhpcy5tb2RpZmllcnMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsNCiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHsNCiAgICAgICAgICBuYW1lOiBuYW1lDQogICAgICAgIH0sIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdKTsNCiAgICAgIH0pDQogICAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXINCiAgICAgIC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7DQogICAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjsNCiAgICAgIH0pOw0KDQogICAgICAvLyBtb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIHdoZW4gUG9wcGVyLmpzIGdldCBpbml0ZWQNCiAgICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXINCiAgICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvbg0KICAgICAgLy8gQkUgQVdBUkU6IGRvbid0IGFkZCBvcHRpb25zIHRvIGBvcHRpb25zLm1vZGlmaWVycy5uYW1lYCBidXQgdG8gYG1vZGlmaWVyT3B0aW9uc2AhDQogICAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHsNCiAgICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHsNCiAgICAgICAgICBtb2RpZmllck9wdGlvbnMub25Mb2FkKF90aGlzLnJlZmVyZW5jZSwgX3RoaXMucG9wcGVyLCBfdGhpcy5vcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIF90aGlzLnN0YXRlKTsNCiAgICAgICAgfQ0KICAgICAgfSk7DQoNCiAgICAgIC8vIGZpcmUgdGhlIGZpcnN0IHVwZGF0ZSB0byBwb3NpdGlvbiB0aGUgcG9wcGVyIGluIHRoZSByaWdodCBwbGFjZQ0KICAgICAgdGhpcy51cGRhdGUoKTsNCg0KICAgICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDsNCiAgICAgIGlmIChldmVudHNFbmFibGVkKSB7DQogICAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnMNCiAgICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpOw0KICAgICAgfQ0KDQogICAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkOw0KICAgIH0NCg0KICAgIC8vIFdlIGNhbid0IHVzZSBjbGFzcyBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBkb24ndCBnZXQgbGlzdGVkIGluIHRoZQ0KICAgIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVicw0KDQoNCiAgICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7DQogICAgICBrZXk6ICd1cGRhdGUnLA0KICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHsNCiAgICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpOw0KICAgICAgfQ0KICAgIH0sIHsNCiAgICAgIGtleTogJ2Rlc3Ryb3knLA0KICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3kkJDEoKSB7DQogICAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7DQogICAgICB9DQogICAgfSwgew0KICAgICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLA0KICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkgew0KICAgICAgICByZXR1cm4gZW5hYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTsNCiAgICAgIH0NCiAgICB9LCB7DQogICAgICBrZXk6ICdkaXNhYmxlRXZlbnRMaXN0ZW5lcnMnLA0KICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHsNCiAgICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpOw0KICAgICAgfQ0KDQogICAgICAvKioNCiAgICAgICAqIFNjaGVkdWxlIGFuIHVwZGF0ZSwgaXQgd2lsbCBydW4gb24gdGhlIG5leHQgVUkgdXBkYXRlIGF2YWlsYWJsZQ0KICAgICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZQ0KICAgICAgICogQG1lbWJlcm9mIFBvcHBlcg0KICAgICAgICovDQoNCg0KICAgICAgLyoqDQogICAgICAgKiBDb2xsZWN0aW9uIG9mIHV0aWxpdGllcyB1c2VmdWwgd2hlbiB3cml0aW5nIGN1c3RvbSBtb2RpZmllcnMuDQogICAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3UNCiAgICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLg0KICAgICAgICoNCiAgICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWQNCiAgICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuDQogICAgICAgKiBEdWUgdG8gdGhlIGhpZ2ggaW5zdGFiaWxpdHkgb2YgdGhlIG1ldGhvZHMgY29udGFpbmVkIGluIFV0aWxzLCB3ZSBjYW4ndA0KICAgICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayENCiAgICAgICAqIEBzdGF0aWMNCiAgICAgICAqIEBwcml2YXRlDQogICAgICAgKiBAdHlwZSB7T2JqZWN0fQ0KICAgICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjgNCiAgICAgICAqIEBtZW1iZXIgVXRpbHMNCiAgICAgICAqIEBtZW1iZXJvZiBQb3BwZXINCiAgICAgICAqLw0KDQogICAgfV0pOw0KICAgIHJldHVybiBQb3BwZXI7DQogIH0oKTsNCg0KICAvKioNCiAgICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzDQogICAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPg0KICAgKiBZb3UgY2FuIHVzZSB0aGlzIG1ldGhvZCB0byBwb3NpdGlvbiBhIHBvcHBlciByZWxhdGl2ZWx5IHRvIGEgc2V0IG9mIGNvb3JkaW5hdGVzDQogICAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLg0KICAgKg0KICAgKiBgYGANCiAgICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpOw0KICAgKiBgYGANCiAgICoNCiAgICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTANCiAgICogQG5hbWUgcmVmZXJlbmNlT2JqZWN0DQogICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0DQogICAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC4NCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50V2lkdGgNCiAgICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC4NCiAgICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0DQogICAqIEFuIEVTNiBnZXR0ZXIgdGhhdCB3aWxsIHJldHVybiB0aGUgaGVpZ2h0IG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50Lg0KICAgKi8NCg0KDQogIFBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7DQogIFBvcHBlci5wbGFjZW1lbnRzID0gcGxhY2VtZW50czsNCiAgUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7DQoNCiAgLyoqDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqIEJvb3RzdHJhcCAodjQuMS4zKTogZHJvcGRvd24uanMNCiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICovDQoNCiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKCQkJDEpIHsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBDb25zdGFudHMNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCiAgICB2YXIgTkFNRSA9ICdkcm9wZG93bic7DQogICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnOw0KICAgIHZhciBEQVRBX0tFWSA9ICdicy5kcm9wZG93bic7DQogICAgdmFyIEVWRU5UX0tFWSA9ICIuIiArIERBVEFfS0VZOw0KICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJzsNCiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTsNCiAgICB2YXIgRVNDQVBFX0tFWUNPREUgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleQ0KDQogICAgdmFyIFNQQUNFX0tFWUNPREUgPSAzMjsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3Igc3BhY2Uga2V5DQoNCiAgICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5DQoNCiAgICB2YXIgQVJST1dfVVBfS0VZQ09ERSA9IDM4OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB1cCBhcnJvdyBrZXkNCg0KICAgIHZhciBBUlJPV19ET1dOX0tFWUNPREUgPSA0MDsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgZG93biBhcnJvdyBrZXkNCg0KICAgIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSkNCg0KICAgIHZhciBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoQVJST1dfVVBfS0VZQ09ERSArICJ8IiArIEFSUk9XX0RPV05fS0VZQ09ERSArICJ8IiArIEVTQ0FQRV9LRVlDT0RFKTsNCiAgICB2YXIgRXZlbnQgPSB7DQogICAgICBISURFOiAiaGlkZSIgKyBFVkVOVF9LRVksDQogICAgICBISURERU46ICJoaWRkZW4iICsgRVZFTlRfS0VZLA0KICAgICAgU0hPVzogInNob3ciICsgRVZFTlRfS0VZLA0KICAgICAgU0hPV046ICJzaG93biIgKyBFVkVOVF9LRVksDQogICAgICBDTElDSzogImNsaWNrIiArIEVWRU5UX0tFWSwNCiAgICAgIENMSUNLX0RBVEFfQVBJOiAiY2xpY2siICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLA0KICAgICAgS0VZRE9XTl9EQVRBX0FQSTogImtleWRvd24iICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLA0KICAgICAgS0VZVVBfREFUQV9BUEk6ICJrZXl1cCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkNCiAgICB9Ow0KICAgIHZhciBDbGFzc05hbWUgPSB7DQogICAgICBESVNBQkxFRDogJ2Rpc2FibGVkJywNCiAgICAgIFNIT1c6ICdzaG93JywNCiAgICAgIERST1BVUDogJ2Ryb3B1cCcsDQogICAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLA0KICAgICAgRFJPUExFRlQ6ICdkcm9wbGVmdCcsDQogICAgICBNRU5VUklHSFQ6ICdkcm9wZG93bi1tZW51LXJpZ2h0JywNCiAgICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JywNCiAgICAgIFBPU0lUSU9OX1NUQVRJQzogJ3Bvc2l0aW9uLXN0YXRpYycNCiAgICB9Ow0KICAgIHZhciBTZWxlY3RvciA9IHsNCiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPSJkcm9wZG93biJdJywNCiAgICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsDQogICAgICBNRU5VOiAnLmRyb3Bkb3duLW1lbnUnLA0KICAgICAgTkFWQkFSX05BVjogJy5uYXZiYXItbmF2JywNCiAgICAgIFZJU0lCTEVfSVRFTVM6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKScNCiAgICB9Ow0KICAgIHZhciBBdHRhY2htZW50TWFwID0gew0KICAgICAgVE9QOiAndG9wLXN0YXJ0JywNCiAgICAgIFRPUEVORDogJ3RvcC1lbmQnLA0KICAgICAgQk9UVE9NOiAnYm90dG9tLXN0YXJ0JywNCiAgICAgIEJPVFRPTUVORDogJ2JvdHRvbS1lbmQnLA0KICAgICAgUklHSFQ6ICdyaWdodC1zdGFydCcsDQogICAgICBSSUdIVEVORDogJ3JpZ2h0LWVuZCcsDQogICAgICBMRUZUOiAnbGVmdC1zdGFydCcsDQogICAgICBMRUZURU5EOiAnbGVmdC1lbmQnDQogICAgfTsNCiAgICB2YXIgRGVmYXVsdCA9IHsNCiAgICAgIG9mZnNldDogMCwNCiAgICAgIGZsaXA6IHRydWUsDQogICAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsDQogICAgICByZWZlcmVuY2U6ICd0b2dnbGUnLA0KICAgICAgZGlzcGxheTogJ2R5bmFtaWMnDQogICAgfTsNCiAgICB2YXIgRGVmYXVsdFR5cGUgPSB7DQogICAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLA0KICAgICAgZmxpcDogJ2Jvb2xlYW4nLA0KICAgICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJywNCiAgICAgIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudCknLA0KICAgICAgZGlzcGxheTogJ3N0cmluZycNCiAgICAgIC8qKg0KICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgKiBDbGFzcyBEZWZpbml0aW9uDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqLw0KDQogICAgfTsNCg0KICAgIHZhciBEcm9wZG93biA9DQogICAgLyojX19QVVJFX18qLw0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykgew0KICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDsNCiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDsNCiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7DQogICAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpOw0KICAgICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpOw0KDQogICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7DQogICAgICB9IC8vIEdldHRlcnMNCg0KDQogICAgICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlOw0KDQogICAgICAvLyBQdWJsaWMNCiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7DQogICAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7DQoNCiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7DQoNCiAgICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKTsNCg0KICAgICAgICBpZiAoaXNBY3RpdmUpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsNCiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50DQogICAgICAgIH07DQogICAgICAgIHZhciBzaG93RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1csIHJlbGF0ZWRUYXJnZXQpOw0KICAgICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpOw0KDQogICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0gLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyDQoNCg0KICAgICAgICBpZiAoIXRoaXMuX2luTmF2YmFyKSB7DQogICAgICAgICAgLyoqDQogICAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5DQogICAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnDQogICAgICAgICAgICovDQogICAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7DQogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXAgZHJvcGRvd24gcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7DQoNCiAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHsNCiAgICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBwYXJlbnQ7DQogICAgICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkgew0KICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7IC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnQNCg0KICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF07DQogICAgICAgICAgICB9DQogICAgICAgICAgfSAvLyBJZiBib3VuZGFyeSBpcyBub3QgYHNjcm9sbFBhcmVudGAsIHRoZW4gc2V0IHBvc2l0aW9uIHRvIGBzdGF0aWNgDQogICAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gImVzY2FwZSIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzDQogICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8yNDI1MQ0KDQoNCiAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLmJvdW5kYXJ5ICE9PSAnc2Nyb2xsUGFyZW50Jykgew0KICAgICAgICAgICAgJCQkMShwYXJlbnQpLmFkZENsYXNzKENsYXNzTmFtZS5QT1NJVElPTl9TVEFUSUMpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIocmVmZXJlbmNlRWxlbWVudCwgdGhpcy5fbWVudSwgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpOw0KICAgICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmENCiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjsNCiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1MNCiAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sDQoNCg0KICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICQkJDEocGFyZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVkJBUl9OQVYpLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vbignbW91c2VvdmVyJywgbnVsbCwgJCQkMS5ub29wKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTsNCg0KICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpOw0KDQogICAgICAgICQkJDEodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOw0KICAgICAgICAkJCQxKHBhcmVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpLnRyaWdnZXIoJCQkMS5FdmVudChFdmVudC5TSE9XTiwgcmVsYXRlZFRhcmdldCkpOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkgew0KICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpOw0KICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpOw0KICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fbWVudSA9IG51bGw7DQoNCiAgICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkgew0KICAgICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7DQoNCiAgICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkgew0KICAgICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpOw0KDQogICAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHsNCiAgICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTsNCiAgICAgICAgfQ0KICAgICAgfTsgLy8gUHJpdmF0ZQ0KDQoNCiAgICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7DQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDSywgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsNCg0KICAgICAgICAgIF90aGlzLnRvZ2dsZSgpOw0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHsNCiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkJCQxKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTsNCiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTsNCiAgICAgICAgcmV0dXJuIGNvbmZpZzsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZ2V0TWVudUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0TWVudUVsZW1lbnQoKSB7DQogICAgICAgIGlmICghdGhpcy5fbWVudSkgew0KICAgICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7DQoNCiAgICAgICAgICBpZiAocGFyZW50KSB7DQogICAgICAgICAgICB0aGlzLl9tZW51ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuTUVOVSk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRoaXMuX21lbnU7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2dldFBsYWNlbWVudCA9IGZ1bmN0aW9uIF9nZXRQbGFjZW1lbnQoKSB7DQogICAgICAgIHZhciAkcGFyZW50RHJvcGRvd24gPSAkJCQxKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSk7DQogICAgICAgIHZhciBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cA0KDQogICAgICAgIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BVUCkpIHsNCiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUDsNCg0KICAgICAgICAgIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7DQogICAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlRPUEVORDsNCiAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QUklHSFQpKSB7DQogICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5SSUdIVDsNCiAgICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BMRUZUKSkgew0KICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuTEVGVDsNCiAgICAgICAgfSBlbHNlIGlmICgkJCQxKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7DQogICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5CT1RUT01FTkQ7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gcGxhY2VtZW50Ow0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkgew0KICAgICAgICByZXR1cm4gJCQkMSh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KCcubmF2YmFyJykubGVuZ3RoID4gMDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZ2V0UG9wcGVyQ29uZmlnID0gZnVuY3Rpb24gX2dldFBvcHBlckNvbmZpZygpIHsNCiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7DQoNCiAgICAgICAgdmFyIG9mZnNldENvbmYgPSB7fTsNCg0KICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5vZmZzZXQgPT09ICdmdW5jdGlvbicpIHsNCiAgICAgICAgICBvZmZzZXRDb25mLmZuID0gZnVuY3Rpb24gKGRhdGEpIHsNCiAgICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9vYmplY3RTcHJlYWQoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cykgfHwge30pOw0KICAgICAgICAgICAgcmV0dXJuIGRhdGE7DQogICAgICAgICAgfTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBvZmZzZXRDb25mLm9mZnNldCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQ7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgcG9wcGVyQ29uZmlnID0gew0KICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksDQogICAgICAgICAgbW9kaWZpZXJzOiB7DQogICAgICAgICAgICBvZmZzZXQ6IG9mZnNldENvbmYsDQogICAgICAgICAgICBmbGlwOiB7DQogICAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7DQogICAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9IC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheQ0KDQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykgew0KICAgICAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHsNCiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlDQogICAgICAgICAgfTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBwb3BwZXJDb25maWc7DQogICAgICB9OyAvLyBTdGF0aWMNCg0KDQogICAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpOw0KDQogICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7DQoNCiAgICAgICAgICBpZiAoIWRhdGEpIHsNCiAgICAgICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcywgX2NvbmZpZyk7DQogICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykgew0KICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7DQogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIk5vIG1ldGhvZCBuYW1lZCBcIiIgKyBjb25maWcgKyAiXCIiKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZGF0YVtjb25maWddKCk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzID0gZnVuY3Rpb24gX2NsZWFyTWVudXMoZXZlbnQpIHsNCiAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC53aGljaCA9PT0gUklHSFRfTU9VU0VfQlVUVE9OX1dISUNIIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggIT09IFRBQl9LRVlDT0RFKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciB0b2dnbGVzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7DQoNCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRvZ2dsZXNbaV0pOw0KDQogICAgICAgICAgdmFyIGNvbnRleHQgPSAkJCQxKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpOw0KICAgICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0gew0KICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXQ0KICAgICAgICAgIH07DQoNCiAgICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykgew0KICAgICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKCFjb250ZXh0KSB7DQogICAgICAgICAgICBjb250aW51ZTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudTsNCg0KICAgICAgICAgIGlmICghJCQkMShwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkgew0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKGV2ZW50ICYmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQud2hpY2ggPT09IFRBQl9LRVlDT0RFKSAmJiAkJCQxLmNvbnRhaW5zKHBhcmVudCwgZXZlbnQudGFyZ2V0KSkgew0KICAgICAgICAgICAgY29udGludWU7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldCk7DQogICAgICAgICAgJCQkMShwYXJlbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTsNCg0KICAgICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmENCiAgICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydA0KDQoNCiAgICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7DQogICAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7DQogICAgICAgICAgJCQkMShkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTsNCiAgICAgICAgICAkJCQxKHBhcmVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpLnRyaWdnZXIoJCQkMS5FdmVudChFdmVudC5ISURERU4sIHJlbGF0ZWRUYXJnZXQpKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHsNCiAgICAgICAgdmFyIHBhcmVudDsNCiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpOw0KDQogICAgICAgIGlmIChzZWxlY3Rvcikgew0KICAgICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOw0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHBhcmVudCB8fCBlbGVtZW50LnBhcmVudE5vZGU7DQogICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eQ0KDQoNCiAgICAgIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7DQogICAgICAgIC8vIElmIG5vdCBpbnB1dC90ZXh0YXJlYToNCiAgICAgICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kDQogICAgICAgIC8vIElmIGlucHV0L3RleHRhcmVhOg0KICAgICAgICAvLyAgLSBJZiBzcGFjZSBrZXkgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZA0KICAgICAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGUNCiAgICAgICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZA0KICAgICAgICAvLyAgICAtIElmIHRyaWdnZXIgaW5zaWRlIHRoZSBtZW51ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmQNCiAgICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpID8gZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFICYmIChldmVudC53aGljaCAhPT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGV2ZW50LndoaWNoICE9PSBBUlJPV19VUF9LRVlDT0RFIHx8ICQkJDEoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLk1FTlUpLmxlbmd0aCkgOiAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC53aGljaCkpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsNCg0KICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAkJCQxKHRoaXMpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpOw0KDQogICAgICAgIHZhciBpc0FjdGl2ZSA9ICQkJDEocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7DQoNCiAgICAgICAgaWYgKCFpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoICE9PSBTUEFDRV9LRVlDT0RFKSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkgew0KICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHsNCiAgICAgICAgICAgIHZhciB0b2dnbGUgPSBwYXJlbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5EQVRBX1RPR0dMRSk7DQogICAgICAgICAgICAkJCQxKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICAkJCQxKHRoaXMpLnRyaWdnZXIoJ2NsaWNrJyk7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIGl0ZW1zID0gW10uc2xpY2UuY2FsbChwYXJlbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKSk7DQoNCiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTsNCg0KICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX1VQX0tFWUNPREUgJiYgaW5kZXggPiAwKSB7DQogICAgICAgICAgLy8gVXANCiAgICAgICAgICBpbmRleC0tOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgaW5kZXggPCBpdGVtcy5sZW5ndGggLSAxKSB7DQogICAgICAgICAgLy8gRG93bg0KICAgICAgICAgIGluZGV4Kys7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoaW5kZXggPCAwKSB7DQogICAgICAgICAgaW5kZXggPSAwOw0KICAgICAgICB9DQoNCiAgICAgICAgaXRlbXNbaW5kZXhdLmZvY3VzKCk7DQogICAgICB9Ow0KDQogICAgICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIG51bGwsIFt7DQogICAgICAgIGtleTogIlZFUlNJT04iLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gVkVSU0lPTjsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJEZWZhdWx0IiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIERlZmF1bHQ7DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiRGVmYXVsdFR5cGUiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7DQogICAgICAgIH0NCiAgICAgIH1dKTsNCg0KICAgICAgcmV0dXJuIERyb3Bkb3duOw0KICAgIH0oKTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvbg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQoNCiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuTUVOVSwgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEkgKyAiICIgKyBFdmVudC5LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7DQoNCiAgICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRoaXMpLCAndG9nZ2xlJyk7DQogICAgfSkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkZPUk1fQ0hJTEQsIGZ1bmN0aW9uIChlKSB7DQogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOw0KICAgIH0pOw0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIGpRdWVyeQ0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQogICAgJCQkMS5mbltOQU1FXSA9IERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IERyb3Bkb3duOw0KDQogICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDsNCiAgICAgIHJldHVybiBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlOw0KICAgIH07DQoNCiAgICByZXR1cm4gRHJvcGRvd247DQogIH0oJCwgUG9wcGVyKTsNCg0KICAvKioNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBtb2RhbC5qcw0KICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKQ0KICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgKi8NCg0KICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoJCQkMSkgew0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIENvbnN0YW50cw0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KICAgIHZhciBOQU1FID0gJ21vZGFsJzsNCiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7DQogICAgdmFyIERBVEFfS0VZID0gJ2JzLm1vZGFsJzsNCiAgICB2YXIgRVZFTlRfS0VZID0gIi4iICsgREFUQV9LRVk7DQogICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknOw0KICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdOw0KICAgIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5DQoNCiAgICB2YXIgRGVmYXVsdCA9IHsNCiAgICAgIGJhY2tkcm9wOiB0cnVlLA0KICAgICAga2V5Ym9hcmQ6IHRydWUsDQogICAgICBmb2N1czogdHJ1ZSwNCiAgICAgIHNob3c6IHRydWUNCiAgICB9Ow0KICAgIHZhciBEZWZhdWx0VHlwZSA9IHsNCiAgICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsDQogICAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLA0KICAgICAgZm9jdXM6ICdib29sZWFuJywNCiAgICAgIHNob3c6ICdib29sZWFuJw0KICAgIH07DQogICAgdmFyIEV2ZW50ID0gew0KICAgICAgSElERTogImhpZGUiICsgRVZFTlRfS0VZLA0KICAgICAgSElEREVOOiAiaGlkZGVuIiArIEVWRU5UX0tFWSwNCiAgICAgIFNIT1c6ICJzaG93IiArIEVWRU5UX0tFWSwNCiAgICAgIFNIT1dOOiAic2hvd24iICsgRVZFTlRfS0VZLA0KICAgICAgRk9DVVNJTjogImZvY3VzaW4iICsgRVZFTlRfS0VZLA0KICAgICAgUkVTSVpFOiAicmVzaXplIiArIEVWRU5UX0tFWSwNCiAgICAgIENMSUNLX0RJU01JU1M6ICJjbGljay5kaXNtaXNzIiArIEVWRU5UX0tFWSwNCiAgICAgIEtFWURPV05fRElTTUlTUzogImtleWRvd24uZGlzbWlzcyIgKyBFVkVOVF9LRVksDQogICAgICBNT1VTRVVQX0RJU01JU1M6ICJtb3VzZXVwLmRpc21pc3MiICsgRVZFTlRfS0VZLA0KICAgICAgTU9VU0VET1dOX0RJU01JU1M6ICJtb3VzZWRvd24uZGlzbWlzcyIgKyBFVkVOVF9LRVksDQogICAgICBDTElDS19EQVRBX0FQSTogImNsaWNrIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWQ0KICAgIH07DQogICAgdmFyIENsYXNzTmFtZSA9IHsNCiAgICAgIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJywNCiAgICAgIEJBQ0tEUk9QOiAnbW9kYWwtYmFja2Ryb3AnLA0KICAgICAgT1BFTjogJ21vZGFsLW9wZW4nLA0KICAgICAgRkFERTogJ2ZhZGUnLA0KICAgICAgU0hPVzogJ3Nob3cnDQogICAgfTsNCiAgICB2YXIgU2VsZWN0b3IgPSB7DQogICAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJywNCiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPSJtb2RhbCJdJywNCiAgICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9Im1vZGFsIl0nLA0KICAgICAgRklYRURfQ09OVEVOVDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLA0KICAgICAgU1RJQ0tZX0NPTlRFTlQ6ICcuc3RpY2t5LXRvcCcNCiAgICAgIC8qKg0KICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgKiBDbGFzcyBEZWZpbml0aW9uDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqLw0KDQogICAgfTsNCg0KICAgIHZhciBNb2RhbCA9DQogICAgLyojX19QVVJFX18qLw0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgIGZ1bmN0aW9uIE1vZGFsKGVsZW1lbnQsIGNvbmZpZykgew0KICAgICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7DQogICAgICAgIHRoaXMuX2RpYWxvZyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5ESUFMT0cpOw0KICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7DQogICAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTsNCiAgICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBmYWxzZTsNCiAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlOw0KICAgICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IDA7DQogICAgICB9IC8vIEdldHRlcnMNCg0KDQogICAgICB2YXIgX3Byb3RvID0gTW9kYWwucHJvdG90eXBlOw0KDQogICAgICAvLyBQdWJsaWMNCiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUocmVsYXRlZFRhcmdldCkgew0KICAgICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHJlbGF0ZWRUYXJnZXQpOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KHJlbGF0ZWRUYXJnZXQpIHsNCiAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IHRoaXMuX2lzU2hvd24pIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHsNCiAgICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPVywgew0KICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQNCiAgICAgICAgfSk7DQogICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpOw0KDQogICAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlOw0KDQogICAgICAgIHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCk7DQoNCiAgICAgICAgdGhpcy5fc2V0U2Nyb2xsYmFyKCk7DQoNCiAgICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7DQoNCiAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhDbGFzc05hbWUuT1BFTik7DQoNCiAgICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTsNCg0KICAgICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpOw0KDQogICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuQ0xJQ0tfRElTTUlTUywgU2VsZWN0b3IuREFUQV9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICByZXR1cm4gX3RoaXMuaGlkZShldmVudCk7DQogICAgICAgIH0pOw0KICAgICAgICAkJCQxKHRoaXMuX2RpYWxvZykub24oRXZlbnQuTU9VU0VET1dOX0RJU01JU1MsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAkJCQxKF90aGlzLl9lbGVtZW50KS5vbmUoRXZlbnQuTU9VU0VVUF9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgIGlmICgkJCQxKGV2ZW50LnRhcmdldCkuaXMoX3RoaXMuX2VsZW1lbnQpKSB7DQogICAgICAgICAgICAgIF90aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICByZXR1cm4gX3RoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpOw0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShldmVudCkgew0KICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsNCg0KICAgICAgICBpZiAoZXZlbnQpIHsNCiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAhdGhpcy5faXNTaG93bikgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUpOw0KICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTsNCg0KICAgICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlOw0KICAgICAgICB2YXIgdHJhbnNpdGlvbiA9ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpOw0KDQogICAgICAgIGlmICh0cmFuc2l0aW9uKSB7DQogICAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7DQoNCiAgICAgICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTsNCg0KICAgICAgICAkJCQxKGRvY3VtZW50KS5vZmYoRXZlbnQuRk9DVVNJTik7DQogICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOw0KICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9mZihFdmVudC5DTElDS19ESVNNSVNTKTsNCiAgICAgICAgJCQkMSh0aGlzLl9kaWFsb2cpLm9mZihFdmVudC5NT1VTRURPV05fRElTTUlTUyk7DQoNCiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHsNCiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTsNCiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX2hpZGVNb2RhbChldmVudCk7DQogICAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICB0aGlzLl9oaWRlTW9kYWwoKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkgew0KICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpOw0KICAgICAgICAkJCQxKHdpbmRvdywgZG9jdW1lbnQsIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2JhY2tkcm9wKS5vZmYoRVZFTlRfS0VZKTsNCiAgICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7DQogICAgICAgIHRoaXMuX2RpYWxvZyA9IG51bGw7DQogICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDsNCiAgICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7DQogICAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gbnVsbDsNCiAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IG51bGw7DQogICAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gbnVsbDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVVcGRhdGUoKSB7DQogICAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpOw0KICAgICAgfTsgLy8gUHJpdmF0ZQ0KDQoNCiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHsNCiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgY29uZmlnKTsNCiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7DQogICAgICAgIHJldHVybiBjb25maWc7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX3Nob3dFbGVtZW50ID0gZnVuY3Rpb24gX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHsNCiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7DQoNCiAgICAgICAgdmFyIHRyYW5zaXRpb24gPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTsNCg0KICAgICAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7DQogICAgICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvbg0KICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOw0KDQogICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpOw0KDQogICAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMDsNCg0KICAgICAgICBpZiAodHJhbnNpdGlvbikgew0KICAgICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpOw0KICAgICAgICB9DQoNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7DQoNCiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykgew0KICAgICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIHNob3duRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCB7DQogICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldA0KICAgICAgICB9KTsNCg0KICAgICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkgew0KICAgICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5mb2N1cykgew0KICAgICAgICAgICAgX3RoaXMzLl9lbGVtZW50LmZvY3VzKCk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgX3RoaXMzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTsNCiAgICAgICAgICAkJCQxKF90aGlzMy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAodHJhbnNpdGlvbikgew0KICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpOw0KICAgICAgICAgICQkJDEodGhpcy5fZGlhbG9nKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRyYW5zaXRpb25Db21wbGV0ZSgpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2VuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uIF9lbmZvcmNlRm9jdXMoKSB7DQogICAgICAgIHZhciBfdGhpczQgPSB0aGlzOw0KDQogICAgICAgICQkJDEoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKSAvLyBHdWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3ANCiAgICAgICAgLm9uKEV2ZW50LkZPQ1VTSU4sIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgIGlmIChkb2N1bWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmIF90aGlzNC5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0ICYmICQkJDEoX3RoaXM0Ll9lbGVtZW50KS5oYXMoZXZlbnQudGFyZ2V0KS5sZW5ndGggPT09IDApIHsNCiAgICAgICAgICAgIF90aGlzNC5fZWxlbWVudC5mb2N1cygpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX3NldEVzY2FwZUV2ZW50ID0gZnVuY3Rpb24gX3NldEVzY2FwZUV2ZW50KCkgew0KICAgICAgICB2YXIgX3RoaXM1ID0gdGhpczsNCg0KICAgICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcua2V5Ym9hcmQpIHsNCiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LktFWURPV05fRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7DQogICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7DQoNCiAgICAgICAgICAgICAgX3RoaXM1LmhpZGUoKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9KTsNCiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93bikgew0KICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LktFWURPV05fRElTTUlTUyk7DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fc2V0UmVzaXplRXZlbnQgPSBmdW5jdGlvbiBfc2V0UmVzaXplRXZlbnQoKSB7DQogICAgICAgIHZhciBfdGhpczYgPSB0aGlzOw0KDQogICAgICAgIGlmICh0aGlzLl9pc1Nob3duKSB7DQogICAgICAgICAgJCQkMSh3aW5kb3cpLm9uKEV2ZW50LlJFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICByZXR1cm4gX3RoaXM2LmhhbmRsZVVwZGF0ZShldmVudCk7DQogICAgICAgICAgfSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgJCQkMSh3aW5kb3cpLm9mZihFdmVudC5SRVNJWkUpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2hpZGVNb2RhbCA9IGZ1bmN0aW9uIF9oaWRlTW9kYWwoKSB7DQogICAgICAgIHZhciBfdGhpczcgPSB0aGlzOw0KDQogICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsNCg0KICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTsNCg0KICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTsNCg0KICAgICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkgew0KICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLk9QRU4pOw0KDQogICAgICAgICAgX3RoaXM3Ll9yZXNldEFkanVzdG1lbnRzKCk7DQoNCiAgICAgICAgICBfdGhpczcuX3Jlc2V0U2Nyb2xsYmFyKCk7DQoNCiAgICAgICAgICAkJCQxKF90aGlzNy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5ISURERU4pOw0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fcmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiBfcmVtb3ZlQmFja2Ryb3AoKSB7DQogICAgICAgIGlmICh0aGlzLl9iYWNrZHJvcCkgew0KICAgICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLnJlbW92ZSgpOw0KICAgICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7DQogICAgICAgIHZhciBfdGhpczggPSB0aGlzOw0KDQogICAgICAgIHZhciBhbmltYXRlID0gJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkgPyBDbGFzc05hbWUuRkFERSA6ICcnOw0KDQogICAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5iYWNrZHJvcCkgew0KICAgICAgICAgIHRoaXMuX2JhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7DQogICAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLkJBQ0tEUk9QOw0KDQogICAgICAgICAgaWYgKGFuaW1hdGUpIHsNCiAgICAgICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTGlzdC5hZGQoYW5pbWF0ZSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7DQogICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgIGlmIChfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHsNCiAgICAgICAgICAgICAgX3RoaXM4Ll9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7DQogICAgICAgICAgICAgIHJldHVybjsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkgew0KICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChfdGhpczguX2NvbmZpZy5iYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHsNCiAgICAgICAgICAgICAgX3RoaXM4Ll9lbGVtZW50LmZvY3VzKCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICBfdGhpczguaGlkZSgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0pOw0KDQogICAgICAgICAgaWYgKGFuaW1hdGUpIHsNCiAgICAgICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2JhY2tkcm9wKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7DQoNCiAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKCFhbmltYXRlKSB7DQogICAgICAgICAgICBjYWxsYmFjaygpOw0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHZhciBiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApOw0KICAgICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFjaykuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pOw0KICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duICYmIHRoaXMuX2JhY2tkcm9wKSB7DQogICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOw0KDQogICAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7DQogICAgICAgICAgICBfdGhpczguX3JlbW92ZUJhY2tkcm9wKCk7DQoNCiAgICAgICAgICAgIGlmIChjYWxsYmFjaykgew0KICAgICAgICAgICAgICBjYWxsYmFjaygpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH07DQoNCiAgICAgICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHsNCiAgICAgICAgICAgIHZhciBfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKTsNCg0KICAgICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pOw0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBjYWxsYmFja1JlbW92ZSgpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykgew0KICAgICAgICAgIGNhbGxiYWNrKCk7DQogICAgICAgIH0NCiAgICAgIH07IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzDQogICAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanMNCiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KDQogICAgICBfcHJvdG8uX2FkanVzdERpYWxvZyA9IGZ1bmN0aW9uIF9hZGp1c3REaWFsb2coKSB7DQogICAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7DQoNCiAgICAgICAgaWYgKCF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcpIHsNCiAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyAicHgiOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHsNCiAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHRoaXMuX3Njcm9sbGJhcldpZHRoICsgInB4IjsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7DQogICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJzsNCiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJzsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiBfY2hlY2tTY3JvbGxiYXIoKSB7DQogICAgICAgIHZhciByZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsNCiAgICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGg7DQogICAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gdGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHsNCiAgICAgICAgdmFyIF90aGlzOSA9IHRoaXM7DQoNCiAgICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7DQogICAgICAgICAgLy8gTm90ZTogRE9NTm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQgcmV0dXJucyB0aGUgYWN0dWFsIHZhbHVlIG9yICcnIGlmIG5vdCBzZXQNCiAgICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXQNCiAgICAgICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKTsNCiAgICAgICAgICB2YXIgc3RpY2t5Q29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkpOyAvLyBBZGp1c3QgZml4ZWQgY29udGVudCBwYWRkaW5nDQoNCiAgICAgICAgICAkJCQxKGZpeGVkQ29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7DQogICAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpOw0KICAgICAgICAgICAgJCQkMShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyBfdGhpczkuX3Njcm9sbGJhcldpZHRoICsgInB4Iik7DQogICAgICAgICAgfSk7IC8vIEFkanVzdCBzdGlja3kgY29udGVudCBtYXJnaW4NCg0KICAgICAgICAgICQkJDEoc3RpY2t5Q29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICAgIHZhciBhY3R1YWxNYXJnaW4gPSBlbGVtZW50LnN0eWxlLm1hcmdpblJpZ2h0Ow0KICAgICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7DQogICAgICAgICAgICAkJCQxKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArICJweCIpOw0KICAgICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nDQoNCiAgICAgICAgICB2YXIgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0Ow0KICAgICAgICAgIHZhciBjYWxjdWxhdGVkUGFkZGluZyA9ICQkJDEoZG9jdW1lbnQuYm9keSkuY3NzKCdwYWRkaW5nLXJpZ2h0Jyk7DQogICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArICJweCIpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX3Jlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3Jlc2V0U2Nyb2xsYmFyKCkgew0KICAgICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZw0KICAgICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKTsNCiAgICAgICAgJCQkMShmaXhlZENvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7DQogICAgICAgICAgdmFyIHBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTsNCiAgICAgICAgICAkJCQxKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTsNCiAgICAgICAgICBlbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IHBhZGRpbmcgPyBwYWRkaW5nIDogJyc7DQogICAgICAgIH0pOyAvLyBSZXN0b3JlIHN0aWNreSBjb250ZW50DQoNCiAgICAgICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIiICsgU2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlQpKTsNCiAgICAgICAgJCQkMShlbGVtZW50cykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHsNCiAgICAgICAgICB2YXIgbWFyZ2luID0gJCQkMShlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnKTsNCg0KICAgICAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykgew0KICAgICAgICAgICAgJCQkMShlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcsIG1hcmdpbikucmVtb3ZlRGF0YSgnbWFyZ2luLXJpZ2h0Jyk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsgLy8gUmVzdG9yZSBib2R5IHBhZGRpbmcNCg0KICAgICAgICB2YXIgcGFkZGluZyA9ICQkJDEoZG9jdW1lbnQuYm9keSkuZGF0YSgncGFkZGluZy1yaWdodCcpOw0KICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9nZXRTY3JvbGxiYXJXaWR0aCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxiYXJXaWR0aCgpIHsNCiAgICAgICAgLy8gdGh4IGQud2Fsc2gNCiAgICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOw0KICAgICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLlNDUk9MTEJBUl9NRUFTVVJFUjsNCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpOw0KICAgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7DQogICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTsNCiAgICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoOw0KICAgICAgfTsgLy8gU3RhdGljDQoNCg0KICAgICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7DQogICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTsNCg0KICAgICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgJCQkMSh0aGlzKS5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTsNCg0KICAgICAgICAgIGlmICghZGF0YSkgew0KICAgICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTsNCiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7DQogICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiTm8gbWV0aG9kIG5hbWVkIFwiIiArIGNvbmZpZyArICJcIiIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBkYXRhW2NvbmZpZ10ocmVsYXRlZFRhcmdldCk7DQogICAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHsNCiAgICAgICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KTsNCiAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgfTsNCg0KICAgICAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBudWxsLCBbew0KICAgICAgICBrZXk6ICJWRVJTSU9OIiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIFZFUlNJT047DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiRGVmYXVsdCIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBEZWZhdWx0Ow0KICAgICAgICB9DQogICAgICB9XSk7DQoNCiAgICAgIHJldHVybiBNb2RhbDsNCiAgICB9KCk7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb24NCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCg0KDQogICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgIHZhciBfdGhpczEwID0gdGhpczsNCg0KICAgICAgdmFyIHRhcmdldDsNCiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTsNCg0KICAgICAgaWYgKHNlbGVjdG9yKSB7DQogICAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOw0KICAgICAgfQ0KDQogICAgICB2YXIgY29uZmlnID0gJCQkMSh0YXJnZXQpLmRhdGEoREFUQV9LRVkpID8gJ3RvZ2dsZScgOiBfb2JqZWN0U3ByZWFkKHt9LCAkJCQxKHRhcmdldCkuZGF0YSgpLCAkJCQxKHRoaXMpLmRhdGEoKSk7DQoNCiAgICAgIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykgew0KICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgfQ0KDQogICAgICB2YXIgJHRhcmdldCA9ICQkJDEodGFyZ2V0KS5vbmUoRXZlbnQuU0hPVywgZnVuY3Rpb24gKHNob3dFdmVudCkgew0KICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7DQogICAgICAgICAgLy8gT25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93bg0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgICR0YXJnZXQub25lKEV2ZW50LkhJRERFTiwgZnVuY3Rpb24gKCkgew0KICAgICAgICAgIGlmICgkJCQxKF90aGlzMTApLmlzKCc6dmlzaWJsZScpKSB7DQogICAgICAgICAgICBfdGhpczEwLmZvY3VzKCk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgIH0pOw0KDQogICAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0YXJnZXQpLCBjb25maWcsIHRoaXMpOw0KICAgIH0pOw0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIGpRdWVyeQ0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQogICAgJCQkMS5mbltOQU1FXSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IE1vZGFsOw0KDQogICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDsNCiAgICAgIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlOw0KICAgIH07DQoNCiAgICByZXR1cm4gTW9kYWw7DQogIH0oJCk7DQoNCiAgLyoqDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqIEJvb3RzdHJhcCAodjQuMS4zKTogdG9vbHRpcC5qcw0KICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKQ0KICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgKi8NCg0KICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgkJCQxKSB7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogQ29uc3RhbnRzDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQogICAgdmFyIE5BTUUgPSAndG9vbHRpcCc7DQogICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnOw0KICAgIHZhciBEQVRBX0tFWSA9ICdicy50b29sdGlwJzsNCiAgICB2YXIgRVZFTlRfS0VZID0gIi4iICsgREFUQV9LRVk7DQogICAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07DQogICAgdmFyIENMQVNTX1BSRUZJWCA9ICdicy10b29sdGlwJzsNCiAgICB2YXIgQlNDTFNfUFJFRklYX1JFR0VYID0gbmV3IFJlZ0V4cCgiKF58XFxzKSIgKyBDTEFTU19QUkVGSVggKyAiXFxTKyIsICdnJyk7DQogICAgdmFyIERlZmF1bHRUeXBlID0gew0KICAgICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsDQogICAgICB0ZW1wbGF0ZTogJ3N0cmluZycsDQogICAgICB0aXRsZTogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknLA0KICAgICAgdHJpZ2dlcjogJ3N0cmluZycsDQogICAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsDQogICAgICBodG1sOiAnYm9vbGVhbicsDQogICAgICBzZWxlY3RvcjogJyhzdHJpbmd8Ym9vbGVhbiknLA0KICAgICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLA0KICAgICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmcpJywNCiAgICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsDQogICAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJywNCiAgICAgIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScNCiAgICB9Ow0KICAgIHZhciBBdHRhY2htZW50TWFwID0gew0KICAgICAgQVVUTzogJ2F1dG8nLA0KICAgICAgVE9QOiAndG9wJywNCiAgICAgIFJJR0hUOiAncmlnaHQnLA0KICAgICAgQk9UVE9NOiAnYm90dG9tJywNCiAgICAgIExFRlQ6ICdsZWZ0Jw0KICAgIH07DQogICAgdmFyIERlZmF1bHQgPSB7DQogICAgICBhbmltYXRpb246IHRydWUsDQogICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9InRvb2x0aXAiIHJvbGU9InRvb2x0aXAiPicgKyAnPGRpdiBjbGFzcz0iYXJyb3ciPjwvZGl2PicgKyAnPGRpdiBjbGFzcz0idG9vbHRpcC1pbm5lciI+PC9kaXY+PC9kaXY+JywNCiAgICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsDQogICAgICB0aXRsZTogJycsDQogICAgICBkZWxheTogMCwNCiAgICAgIGh0bWw6IGZhbHNlLA0KICAgICAgc2VsZWN0b3I6IGZhbHNlLA0KICAgICAgcGxhY2VtZW50OiAndG9wJywNCiAgICAgIG9mZnNldDogMCwNCiAgICAgIGNvbnRhaW5lcjogZmFsc2UsDQogICAgICBmYWxsYmFja1BsYWNlbWVudDogJ2ZsaXAnLA0KICAgICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnDQogICAgfTsNCiAgICB2YXIgSG92ZXJTdGF0ZSA9IHsNCiAgICAgIFNIT1c6ICdzaG93JywNCiAgICAgIE9VVDogJ291dCcNCiAgICB9Ow0KICAgIHZhciBFdmVudCA9IHsNCiAgICAgIEhJREU6ICJoaWRlIiArIEVWRU5UX0tFWSwNCiAgICAgIEhJRERFTjogImhpZGRlbiIgKyBFVkVOVF9LRVksDQogICAgICBTSE9XOiAic2hvdyIgKyBFVkVOVF9LRVksDQogICAgICBTSE9XTjogInNob3duIiArIEVWRU5UX0tFWSwNCiAgICAgIElOU0VSVEVEOiAiaW5zZXJ0ZWQiICsgRVZFTlRfS0VZLA0KICAgICAgQ0xJQ0s6ICJjbGljayIgKyBFVkVOVF9LRVksDQogICAgICBGT0NVU0lOOiAiZm9jdXNpbiIgKyBFVkVOVF9LRVksDQogICAgICBGT0NVU09VVDogImZvY3Vzb3V0IiArIEVWRU5UX0tFWSwNCiAgICAgIE1PVVNFRU5URVI6ICJtb3VzZWVudGVyIiArIEVWRU5UX0tFWSwNCiAgICAgIE1PVVNFTEVBVkU6ICJtb3VzZWxlYXZlIiArIEVWRU5UX0tFWQ0KICAgIH07DQogICAgdmFyIENsYXNzTmFtZSA9IHsNCiAgICAgIEZBREU6ICdmYWRlJywNCiAgICAgIFNIT1c6ICdzaG93Jw0KICAgIH07DQogICAgdmFyIFNlbGVjdG9yID0gew0KICAgICAgVE9PTFRJUDogJy50b29sdGlwJywNCiAgICAgIFRPT0xUSVBfSU5ORVI6ICcudG9vbHRpcC1pbm5lcicsDQogICAgICBBUlJPVzogJy5hcnJvdycNCiAgICB9Ow0KICAgIHZhciBUcmlnZ2VyID0gew0KICAgICAgSE9WRVI6ICdob3ZlcicsDQogICAgICBGT0NVUzogJ2ZvY3VzJywNCiAgICAgIENMSUNLOiAnY2xpY2snLA0KICAgICAgTUFOVUFMOiAnbWFudWFsJw0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIFRvb2x0aXAgPQ0KICAgIC8qI19fUFVSRV9fKi8NCiAgICBmdW5jdGlvbiAoKSB7DQogICAgICBmdW5jdGlvbiBUb29sdGlwKGVsZW1lbnQsIGNvbmZpZykgew0KICAgICAgICAvKioNCiAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5DQogICAgICAgICAqIFBvcHBlciAtIGh0dHBzOi8vcG9wcGVyLmpzLm9yZw0KICAgICAgICAgKi8NCiAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7DQogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7DQogICAgICAgIH0gLy8gcHJpdmF0ZQ0KDQoNCiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTsNCiAgICAgICAgdGhpcy5fdGltZW91dCA9IDA7DQogICAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJzsNCiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9Ow0KICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsOyAvLyBQcm90ZWN0ZWQNCg0KICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50Ow0KICAgICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpOw0KICAgICAgICB0aGlzLnRpcCA9IG51bGw7DQoNCiAgICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7DQogICAgICB9IC8vIEdldHRlcnMNCg0KDQogICAgICB2YXIgX3Byb3RvID0gVG9vbHRpcC5wcm90b3R5cGU7DQoNCiAgICAgIC8vIFB1YmxpYw0KICAgICAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHsNCiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHsNCiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8udG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uIHRvZ2dsZUVuYWJsZWQoKSB7DQogICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWQ7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKGV2ZW50KSB7DQogICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGV2ZW50KSB7DQogICAgICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZOw0KICAgICAgICAgIHZhciBjb250ZXh0ID0gJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpOw0KDQogICAgICAgICAgaWYgKCFjb250ZXh0KSB7DQogICAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7DQogICAgICAgICAgICAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrOw0KDQogICAgICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkgew0KICAgICAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dCk7DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBpZiAoJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7DQogICAgICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKTsNCg0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHRoaXMuX2VudGVyKG51bGwsIHRoaXMpOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7DQogICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTsNCiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7DQogICAgICAgICQkJDEodGhpcy5lbGVtZW50KS5vZmYodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpOw0KICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkuY2xvc2VzdCgnLm1vZGFsJykub2ZmKCdoaWRlLmJzLm1vZGFsJyk7DQoNCiAgICAgICAgaWYgKHRoaXMudGlwKSB7DQogICAgICAgICAgJCQkMSh0aGlzLnRpcCkucmVtb3ZlKCk7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSBudWxsOw0KICAgICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7DQogICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIgPSBudWxsOw0KDQogICAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHsNCiAgICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpOw0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDsNCiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDsNCiAgICAgICAgdGhpcy5jb25maWcgPSBudWxsOw0KICAgICAgICB0aGlzLnRpcCA9IG51bGw7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7DQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgICAgaWYgKCQkJDEodGhpcy5lbGVtZW50KS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7DQogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cycpOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTsNCg0KICAgICAgICBpZiAodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSB7DQogICAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTsNCiAgICAgICAgICB2YXIgaXNJblRoZURvbSA9ICQkJDEuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmVsZW1lbnQpOw0KDQogICAgICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaXNJblRoZURvbSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTsNCiAgICAgICAgICB2YXIgdGlwSWQgPSBVdGlsLmdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpOw0KICAgICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpOw0KICAgICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZCk7DQogICAgICAgICAgdGhpcy5zZXRDb250ZW50KCk7DQoNCiAgICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7DQogICAgICAgICAgICAkJCQxKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkZBREUpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSB0eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgdGlwLCB0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcucGxhY2VtZW50Ow0KDQogICAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7DQoNCiAgICAgICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTsNCiAgICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb25maWcuY29udGFpbmVyID09PSBmYWxzZSA/IGRvY3VtZW50LmJvZHkgOiAkJCQxKGRvY3VtZW50KS5maW5kKHRoaXMuY29uZmlnLmNvbnRhaW5lcik7DQogICAgICAgICAgJCQkMSh0aXApLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcyk7DQoNCiAgICAgICAgICBpZiAoISQkJDEuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLnRpcCkpIHsNCiAgICAgICAgICAgICQkJDEodGlwKS5hcHBlbmRUbyhjb250YWluZXIpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgICQkJDEodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpOw0KICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG5ldyBQb3BwZXIodGhpcy5lbGVtZW50LCB0aXAsIHsNCiAgICAgICAgICAgIHBsYWNlbWVudDogYXR0YWNobWVudCwNCiAgICAgICAgICAgIG1vZGlmaWVyczogew0KICAgICAgICAgICAgICBvZmZzZXQ6IHsNCiAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMuY29uZmlnLm9mZnNldA0KICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICBmbGlwOiB7DQogICAgICAgICAgICAgICAgYmVoYXZpb3I6IHRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50DQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIGFycm93OiB7DQogICAgICAgICAgICAgICAgZWxlbWVudDogU2VsZWN0b3IuQVJST1cNCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7DQogICAgICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuY29uZmlnLmJvdW5kYXJ5DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkgew0KICAgICAgICAgICAgICBpZiAoZGF0YS5vcmlnaW5hbFBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHsNCiAgICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHsNCiAgICAgICAgICAgICAgX3RoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9KTsNCiAgICAgICAgICAkJCQxKHRpcCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOyAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgYWRkIGV4dHJhDQogICAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjsNCiAgICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPUw0KICAgICAgICAgIC8vIGh0dHBzOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxNC8wMi9tb3VzZV9ldmVudF9idWIuaHRtbA0KDQogICAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgew0KICAgICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkgew0KICAgICAgICAgICAgaWYgKF90aGlzLmNvbmZpZy5hbmltYXRpb24pIHsNCiAgICAgICAgICAgICAgX3RoaXMuX2ZpeFRyYW5zaXRpb24oKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIHByZXZIb3ZlclN0YXRlID0gX3RoaXMuX2hvdmVyU3RhdGU7DQogICAgICAgICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7DQogICAgICAgICAgICAkJCQxKF90aGlzLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pOw0KDQogICAgICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT09IEhvdmVyU3RhdGUuT1VUKSB7DQogICAgICAgICAgICAgIF90aGlzLl9sZWF2ZShudWxsLCBfdGhpcyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfTsNCg0KICAgICAgICAgIGlmICgkJCQxKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHsNCiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMudGlwKTsNCiAgICAgICAgICAgICQkJDEodGhpcy50aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgY29tcGxldGUoKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykgew0KICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsNCg0KICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7DQogICAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElERSk7DQoNCiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7DQogICAgICAgICAgaWYgKF90aGlzMi5faG92ZXJTdGF0ZSAhPT0gSG92ZXJTdGF0ZS5TSE9XICYmIHRpcC5wYXJlbnROb2RlKSB7DQogICAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIF90aGlzMi5fY2xlYW5UaXBDbGFzcygpOw0KDQogICAgICAgICAgX3RoaXMyLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7DQoNCiAgICAgICAgICAkJCQxKF90aGlzMi5lbGVtZW50KS50cmlnZ2VyKF90aGlzMi5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pOw0KDQogICAgICAgICAgaWYgKF90aGlzMi5fcG9wcGVyICE9PSBudWxsKSB7DQogICAgICAgICAgICBfdGhpczIuX3BvcHBlci5kZXN0cm95KCk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKGNhbGxiYWNrKSB7DQogICAgICAgICAgICBjYWxsYmFjaygpOw0KICAgICAgICAgIH0NCiAgICAgICAgfTsNCg0KICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpOw0KDQogICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAkJCQxKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOyAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYQ0KICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydA0KDQogICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHsNCiAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApOw0KICAgICAgICB9DQoNCiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkNMSUNLXSA9IGZhbHNlOw0KICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuRk9DVVNdID0gZmFsc2U7DQogICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5IT1ZFUl0gPSBmYWxzZTsNCg0KICAgICAgICBpZiAoJCQkMSh0aGlzLnRpcCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpKSB7DQogICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGlwKTsNCiAgICAgICAgICAkJCQxKHRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGNvbXBsZXRlKCk7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gJyc7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkgew0KICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7DQogICAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7DQogICAgICAgIH0NCiAgICAgIH07IC8vIFByb3RlY3RlZA0KDQoNCiAgICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHsNCiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5hZGRBdHRhY2htZW50Q2xhc3MgPSBmdW5jdGlvbiBhZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkgew0KICAgICAgICAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhDTEFTU19QUkVGSVggKyAiLSIgKyBhdHRhY2htZW50KTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5nZXRUaXBFbGVtZW50ID0gZnVuY3Rpb24gZ2V0VGlwRWxlbWVudCgpIHsNCiAgICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkJCQxKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXTsNCiAgICAgICAgcmV0dXJuIHRoaXMudGlwOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLnNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KCkgew0KICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7DQogICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJCQkMSh0aXAucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5UT09MVElQX0lOTkVSKSksIHRoaXMuZ2V0VGl0bGUoKSk7DQogICAgICAgICQkJDEodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuRkFERSArICIgIiArIENsYXNzTmFtZS5TSE9XKTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5zZXRFbGVtZW50Q29udGVudCA9IGZ1bmN0aW9uIHNldEVsZW1lbnRDb250ZW50KCRlbGVtZW50LCBjb250ZW50KSB7DQogICAgICAgIHZhciBodG1sID0gdGhpcy5jb25maWcuaHRtbDsNCg0KICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkgew0KICAgICAgICAgIC8vIENvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeQ0KICAgICAgICAgIGlmIChodG1sKSB7DQogICAgICAgICAgICBpZiAoISQkJDEoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7DQogICAgICAgICAgICAgICRlbGVtZW50LmVtcHR5KCkuYXBwZW5kKGNvbnRlbnQpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZWxlbWVudC50ZXh0KCQkJDEoY29udGVudCkudGV4dCgpKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgJGVsZW1lbnRbaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10oY29udGVudCk7DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5nZXRUaXRsZSA9IGZ1bmN0aW9uIGdldFRpdGxlKCkgew0KICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7DQoNCiAgICAgICAgaWYgKCF0aXRsZSkgew0KICAgICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcudGl0bGU7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdGl0bGU7DQogICAgICB9OyAvLyBQcml2YXRlDQoNCg0KICAgICAgX3Byb3RvLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7DQogICAgICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fc2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gX3NldExpc3RlbmVycygpIHsNCiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7DQoNCiAgICAgICAgdmFyIHRyaWdnZXJzID0gdGhpcy5jb25maWcudHJpZ2dlci5zcGxpdCgnICcpOw0KICAgICAgICB0cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7DQogICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHsNCiAgICAgICAgICAgICQkJDEoX3RoaXMzLmVsZW1lbnQpLm9uKF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgIHJldHVybiBfdGhpczMudG9nZ2xlKGV2ZW50KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVHJpZ2dlci5NQU5VQUwpIHsNCiAgICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU47DQogICAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7DQogICAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5vbihldmVudEluLCBfdGhpczMuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fZW50ZXIoZXZlbnQpOw0KICAgICAgICAgICAgfSkub24oZXZlbnRPdXQsIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLl9sZWF2ZShldmVudCk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIHJldHVybiBfdGhpczMuaGlkZSgpOw0KICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCg0KICAgICAgICBpZiAodGhpcy5jb25maWcuc2VsZWN0b3IpIHsNCiAgICAgICAgICB0aGlzLmNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uZmlnLCB7DQogICAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJywNCiAgICAgICAgICAgIHNlbGVjdG9yOiAnJw0KICAgICAgICAgIH0pOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7DQogICAgICAgIHZhciB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpOw0KDQogICAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHsNCiAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJyk7DQogICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHsNCiAgICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZOw0KICAgICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7DQoNCiAgICAgICAgaWYgKCFjb250ZXh0KSB7DQogICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpOw0KICAgICAgICAgICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChldmVudCkgew0KICAgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gdHJ1ZTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICgkJCQxKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7DQogICAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVzsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7DQogICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7DQoNCiAgICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykgew0KICAgICAgICAgIGNvbnRleHQuc2hvdygpOw0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7DQogICAgICAgICAgICBjb250ZXh0LnNob3coKTsNCiAgICAgICAgICB9DQogICAgICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkgew0KICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7DQogICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTsNCg0KICAgICAgICBpZiAoIWNvbnRleHQpIHsNCiAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7DQogICAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKGV2ZW50KSB7DQogICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpOw0KICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7DQoNCiAgICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkgew0KICAgICAgICAgIGNvbnRleHQuaGlkZSgpOw0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHsNCiAgICAgICAgICAgIGNvbnRleHQuaGlkZSgpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2lzV2l0aEFjdGl2ZVRyaWdnZXIgPSBmdW5jdGlvbiBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHsNCiAgICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7DQogICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHsNCiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkJCQxKHRoaXMuZWxlbWVudCkuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7DQoNCiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7DQogICAgICAgICAgY29uZmlnLmRlbGF5ID0gew0KICAgICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LA0KICAgICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5DQogICAgICAgICAgfTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnRpdGxlID09PSAnbnVtYmVyJykgew0KICAgICAgICAgIGNvbmZpZy50aXRsZSA9IGNvbmZpZy50aXRsZS50b1N0cmluZygpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuY29udGVudCA9PT0gJ251bWJlcicpIHsNCiAgICAgICAgICBjb25maWcuY29udGVudCA9IGNvbmZpZy5jb250ZW50LnRvU3RyaW5nKCk7DQogICAgICAgIH0NCg0KICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpOw0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9nZXREZWxlZ2F0ZUNvbmZpZyA9IGZ1bmN0aW9uIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHsNCiAgICAgICAgdmFyIGNvbmZpZyA9IHt9Ow0KDQogICAgICAgIGlmICh0aGlzLmNvbmZpZykgew0KICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNvbmZpZykgew0KICAgICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLmNvbmZpZ1trZXldKSB7DQogICAgICAgICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5jb25maWdba2V5XTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gY29uZmlnOw0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7DQogICAgICAgIHZhciAkdGlwID0gJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7DQogICAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpOw0KDQogICAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGgpIHsNCiAgICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UgPSBmdW5jdGlvbiBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGEpIHsNCiAgICAgICAgdmFyIHBvcHBlckluc3RhbmNlID0gcG9wcGVyRGF0YS5pbnN0YW5jZTsNCiAgICAgICAgdGhpcy50aXAgPSBwb3BwZXJJbnN0YW5jZS5wb3BwZXI7DQoNCiAgICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpOw0KDQogICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKHRoaXMuX2dldEF0dGFjaG1lbnQocG9wcGVyRGF0YS5wbGFjZW1lbnQpKTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkgew0KICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7DQogICAgICAgIHZhciBpbml0Q29uZmlnQW5pbWF0aW9uID0gdGhpcy5jb25maWcuYW5pbWF0aW9uOw0KDQogICAgICAgIGlmICh0aXAuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpICE9PSBudWxsKSB7DQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgJCQkMSh0aXApLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5GQURFKTsNCiAgICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gZmFsc2U7DQogICAgICAgIHRoaXMuaGlkZSgpOw0KICAgICAgICB0aGlzLnNob3coKTsNCiAgICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gaW5pdENvbmZpZ0FuaW1hdGlvbjsNCiAgICAgIH07IC8vIFN0YXRpYw0KDQoNCiAgICAgIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTsNCg0KICAgICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnOw0KDQogICAgICAgICAgaWYgKCFkYXRhICYmIC9kaXNwb3NlfGhpZGUvLnRlc3QoY29uZmlnKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmICghZGF0YSkgew0KICAgICAgICAgICAgZGF0YSA9IG5ldyBUb29sdGlwKHRoaXMsIF9jb25maWcpOw0KICAgICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykgew0KICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJObyBtZXRob2QgbmFtZWQgXCIiICsgY29uZmlnICsgIlwiIik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9Ow0KDQogICAgICBfY3JlYXRlQ2xhc3MoVG9vbHRpcCwgbnVsbCwgW3sNCiAgICAgICAga2V5OiAiVkVSU0lPTiIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBWRVJTSU9OOw0KICAgICAgICB9DQogICAgICB9LCB7DQogICAgICAgIGtleTogIkRlZmF1bHQiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gRGVmYXVsdDsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJOQU1FIiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIE5BTUU7DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiREFUQV9LRVkiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gREFUQV9LRVk7DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiRXZlbnQiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gRXZlbnQ7DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiRVZFTlRfS0VZIiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJEZWZhdWx0VHlwZSIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTsNCiAgICAgICAgfQ0KICAgICAgfV0pOw0KDQogICAgICByZXR1cm4gVG9vbHRpcDsNCiAgICB9KCk7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogalF1ZXJ5DQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQoNCg0KICAgICQkJDEuZm5bTkFNRV0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXA7DQoNCiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUOw0KICAgICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTsNCiAgICB9Ow0KDQogICAgcmV0dXJuIFRvb2x0aXA7DQogIH0oJCwgUG9wcGVyKTsNCg0KICAvKioNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiBwb3BvdmVyLmpzDQogICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqLw0KDQogIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKCQkJDEpIHsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBDb25zdGFudHMNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCiAgICB2YXIgTkFNRSA9ICdwb3BvdmVyJzsNCiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7DQogICAgdmFyIERBVEFfS0VZID0gJ2JzLnBvcG92ZXInOw0KICAgIHZhciBFVkVOVF9LRVkgPSAiLiIgKyBEQVRBX0tFWTsNCiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTsNCiAgICB2YXIgQ0xBU1NfUFJFRklYID0gJ2JzLXBvcG92ZXInOw0KICAgIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKCIoXnxcXHMpIiArIENMQVNTX1BSRUZJWCArICJcXFMrIiwgJ2cnKTsNCg0KICAgIHZhciBEZWZhdWx0ID0gX29iamVjdFNwcmVhZCh7fSwgVG9vbHRpcC5EZWZhdWx0LCB7DQogICAgICBwbGFjZW1lbnQ6ICdyaWdodCcsDQogICAgICB0cmlnZ2VyOiAnY2xpY2snLA0KICAgICAgY29udGVudDogJycsDQogICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9InBvcG92ZXIiIHJvbGU9InRvb2x0aXAiPicgKyAnPGRpdiBjbGFzcz0iYXJyb3ciPjwvZGl2PicgKyAnPGgzIGNsYXNzPSJwb3BvdmVyLWhlYWRlciI+PC9oMz4nICsgJzxkaXYgY2xhc3M9InBvcG92ZXItYm9keSI+PC9kaXY+PC9kaXY+Jw0KICAgIH0pOw0KDQogICAgdmFyIERlZmF1bHRUeXBlID0gX29iamVjdFNwcmVhZCh7fSwgVG9vbHRpcC5EZWZhdWx0VHlwZSwgew0KICAgICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknDQogICAgfSk7DQoNCiAgICB2YXIgQ2xhc3NOYW1lID0gew0KICAgICAgRkFERTogJ2ZhZGUnLA0KICAgICAgU0hPVzogJ3Nob3cnDQogICAgfTsNCiAgICB2YXIgU2VsZWN0b3IgPSB7DQogICAgICBUSVRMRTogJy5wb3BvdmVyLWhlYWRlcicsDQogICAgICBDT05URU5UOiAnLnBvcG92ZXItYm9keScNCiAgICB9Ow0KICAgIHZhciBFdmVudCA9IHsNCiAgICAgIEhJREU6ICJoaWRlIiArIEVWRU5UX0tFWSwNCiAgICAgIEhJRERFTjogImhpZGRlbiIgKyBFVkVOVF9LRVksDQogICAgICBTSE9XOiAic2hvdyIgKyBFVkVOVF9LRVksDQogICAgICBTSE9XTjogInNob3duIiArIEVWRU5UX0tFWSwNCiAgICAgIElOU0VSVEVEOiAiaW5zZXJ0ZWQiICsgRVZFTlRfS0VZLA0KICAgICAgQ0xJQ0s6ICJjbGljayIgKyBFVkVOVF9LRVksDQogICAgICBGT0NVU0lOOiAiZm9jdXNpbiIgKyBFVkVOVF9LRVksDQogICAgICBGT0NVU09VVDogImZvY3Vzb3V0IiArIEVWRU5UX0tFWSwNCiAgICAgIE1PVVNFRU5URVI6ICJtb3VzZWVudGVyIiArIEVWRU5UX0tFWSwNCiAgICAgIE1PVVNFTEVBVkU6ICJtb3VzZWxlYXZlIiArIEVWRU5UX0tFWQ0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIFBvcG92ZXIgPQ0KICAgIC8qI19fUFVSRV9fKi8NCiAgICBmdW5jdGlvbiAoX1Rvb2x0aXApIHsNCiAgICAgIF9pbmhlcml0c0xvb3NlKFBvcG92ZXIsIF9Ub29sdGlwKTsNCg0KICAgICAgZnVuY3Rpb24gUG9wb3ZlcigpIHsNCiAgICAgICAgcmV0dXJuIF9Ub29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpczsNCiAgICAgIH0NCg0KICAgICAgdmFyIF9wcm90byA9IFBvcG92ZXIucHJvdG90eXBlOw0KDQogICAgICAvLyBPdmVycmlkZXMNCiAgICAgIF9wcm90by5pc1dpdGhDb250ZW50ID0gZnVuY3Rpb24gaXNXaXRoQ29udGVudCgpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KCk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHsNCiAgICAgICAgJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgIi0iICsgYXR0YWNobWVudCk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7DQogICAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCQkMSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07DQogICAgICAgIHJldHVybiB0aGlzLnRpcDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHsNCiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTsgLy8gV2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50cw0KDQogICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTsNCg0KICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTsNCg0KICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHsNCiAgICAgICAgICBjb250ZW50ID0gY29udGVudC5jYWxsKHRoaXMuZWxlbWVudCk7DQogICAgICAgIH0NCg0KICAgICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5DT05URU5UKSwgY29udGVudCk7DQogICAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyAiICIgKyBDbGFzc05hbWUuU0hPVyk7DQogICAgICB9OyAvLyBQcml2YXRlDQoNCg0KICAgICAgX3Byb3RvLl9nZXRDb250ZW50ID0gZnVuY3Rpb24gX2dldENvbnRlbnQoKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbnRlbnQnKSB8fCB0aGlzLmNvbmZpZy5jb250ZW50Ow0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl9jbGVhblRpcENsYXNzID0gZnVuY3Rpb24gX2NsZWFuVGlwQ2xhc3MoKSB7DQogICAgICAgIHZhciAkdGlwID0gJCQkMSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7DQogICAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpOw0KDQogICAgICAgIGlmICh0YWJDbGFzcyAhPT0gbnVsbCAmJiB0YWJDbGFzcy5sZW5ndGggPiAwKSB7DQogICAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7DQogICAgICAgIH0NCiAgICAgIH07IC8vIFN0YXRpYw0KDQoNCiAgICAgIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTsNCg0KICAgICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsOw0KDQogICAgICAgICAgaWYgKCFkYXRhICYmIC9kZXN0cm95fGhpZGUvLnRlc3QoY29uZmlnKSkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmICghZGF0YSkgew0KICAgICAgICAgICAgZGF0YSA9IG5ldyBQb3BvdmVyKHRoaXMsIF9jb25maWcpOw0KICAgICAgICAgICAgJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHsNCiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykgew0KICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJObyBtZXRob2QgbmFtZWQgXCIiICsgY29uZmlnICsgIlwiIik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9Ow0KDQogICAgICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgbnVsbCwgW3sNCiAgICAgICAga2V5OiAiVkVSU0lPTiIsDQogICAgICAgIC8vIEdldHRlcnMNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIFZFUlNJT047DQogICAgICAgIH0NCiAgICAgIH0sIHsNCiAgICAgICAga2V5OiAiRGVmYXVsdCIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBEZWZhdWx0Ow0KICAgICAgICB9DQogICAgICB9LCB7DQogICAgICAgIGtleTogIk5BTUUiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gTkFNRTsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJEQVRBX0tFWSIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBEQVRBX0tFWTsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJFdmVudCIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBFdmVudDsNCiAgICAgICAgfQ0KICAgICAgfSwgew0KICAgICAgICBrZXk6ICJFVkVOVF9LRVkiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gRVZFTlRfS0VZOw0KICAgICAgICB9DQogICAgICB9LCB7DQogICAgICAgIGtleTogIkRlZmF1bHRUeXBlIiwNCiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlOw0KICAgICAgICB9DQogICAgICB9XSk7DQoNCiAgICAgIHJldHVybiBQb3BvdmVyOw0KICAgIH0oVG9vbHRpcCk7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogalF1ZXJ5DQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQoNCg0KICAgICQkJDEuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7DQogICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7DQoNCiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUOw0KICAgICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTsNCiAgICB9Ow0KDQogICAgcmV0dXJuIFBvcG92ZXI7DQogIH0oJCk7DQoNCiAgLyoqDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqIEJvb3RzdHJhcCAodjQuMS4zKTogc2Nyb2xsc3B5LmpzDQogICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqLw0KDQogIHZhciBTY3JvbGxTcHkgPSBmdW5jdGlvbiAoJCQkMSkgew0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIENvbnN0YW50cw0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KICAgIHZhciBOQU1FID0gJ3Njcm9sbHNweSc7DQogICAgdmFyIFZFUlNJT04gPSAnNC4xLjMnOw0KICAgIHZhciBEQVRBX0tFWSA9ICdicy5zY3JvbGxzcHknOw0KICAgIHZhciBFVkVOVF9LRVkgPSAiLiIgKyBEQVRBX0tFWTsNCiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7DQogICAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07DQogICAgdmFyIERlZmF1bHQgPSB7DQogICAgICBvZmZzZXQ6IDEwLA0KICAgICAgbWV0aG9kOiAnYXV0bycsDQogICAgICB0YXJnZXQ6ICcnDQogICAgfTsNCiAgICB2YXIgRGVmYXVsdFR5cGUgPSB7DQogICAgICBvZmZzZXQ6ICdudW1iZXInLA0KICAgICAgbWV0aG9kOiAnc3RyaW5nJywNCiAgICAgIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknDQogICAgfTsNCiAgICB2YXIgRXZlbnQgPSB7DQogICAgICBBQ1RJVkFURTogImFjdGl2YXRlIiArIEVWRU5UX0tFWSwNCiAgICAgIFNDUk9MTDogInNjcm9sbCIgKyBFVkVOVF9LRVksDQogICAgICBMT0FEX0RBVEFfQVBJOiAibG9hZCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkNCiAgICB9Ow0KICAgIHZhciBDbGFzc05hbWUgPSB7DQogICAgICBEUk9QRE9XTl9JVEVNOiAnZHJvcGRvd24taXRlbScsDQogICAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsDQogICAgICBBQ1RJVkU6ICdhY3RpdmUnDQogICAgfTsNCiAgICB2YXIgU2VsZWN0b3IgPSB7DQogICAgICBEQVRBX1NQWTogJ1tkYXRhLXNweT0ic2Nyb2xsIl0nLA0KICAgICAgQUNUSVZFOiAnLmFjdGl2ZScsDQogICAgICBOQVZfTElTVF9HUk9VUDogJy5uYXYsIC5saXN0LWdyb3VwJywNCiAgICAgIE5BVl9MSU5LUzogJy5uYXYtbGluaycsDQogICAgICBOQVZfSVRFTVM6ICcubmF2LWl0ZW0nLA0KICAgICAgTElTVF9JVEVNUzogJy5saXN0LWdyb3VwLWl0ZW0nLA0KICAgICAgRFJPUERPV046ICcuZHJvcGRvd24nLA0KICAgICAgRFJPUERPV05fSVRFTVM6ICcuZHJvcGRvd24taXRlbScsDQogICAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJw0KICAgIH07DQogICAgdmFyIE9mZnNldE1ldGhvZCA9IHsNCiAgICAgIE9GRlNFVDogJ29mZnNldCcsDQogICAgICBQT1NJVElPTjogJ3Bvc2l0aW9uJw0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIFNjcm9sbFNweSA9DQogICAgLyojX19QVVJFX18qLw0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBjb25maWcpIHsNCiAgICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDsNCiAgICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IGVsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogZWxlbWVudDsNCiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7DQogICAgICAgIHRoaXMuX3NlbGVjdG9yID0gdGhpcy5fY29uZmlnLnRhcmdldCArICIgIiArIFNlbGVjdG9yLk5BVl9MSU5LUyArICIsIiArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgIiAiICsgU2VsZWN0b3IuTElTVF9JVEVNUyArICIsIikgKyAodGhpcy5fY29uZmlnLnRhcmdldCArICIgIiArIFNlbGVjdG9yLkRST1BET1dOX0lURU1TKTsNCiAgICAgICAgdGhpcy5fb2Zmc2V0cyA9IFtdOw0KICAgICAgICB0aGlzLl90YXJnZXRzID0gW107DQogICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7DQogICAgICAgIHRoaXMuX3Njcm9sbEhlaWdodCA9IDA7DQogICAgICAgICQkJDEodGhpcy5fc2Nyb2xsRWxlbWVudCkub24oRXZlbnQuU0NST0xMLCBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3MoZXZlbnQpOw0KICAgICAgICB9KTsNCiAgICAgICAgdGhpcy5yZWZyZXNoKCk7DQoNCiAgICAgICAgdGhpcy5fcHJvY2VzcygpOw0KICAgICAgfSAvLyBHZXR0ZXJzDQoNCg0KICAgICAgdmFyIF9wcm90byA9IFNjcm9sbFNweS5wcm90b3R5cGU7DQoNCiAgICAgIC8vIFB1YmxpYw0KICAgICAgX3Byb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiByZWZyZXNoKCkgew0KICAgICAgICB2YXIgX3RoaXMyID0gdGhpczsNCg0KICAgICAgICB2YXIgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gT2Zmc2V0TWV0aG9kLk9GRlNFVCA6IE9mZnNldE1ldGhvZC5QT1NJVElPTjsNCiAgICAgICAgdmFyIG9mZnNldE1ldGhvZCA9IHRoaXMuX2NvbmZpZy5tZXRob2QgPT09ICdhdXRvJyA/IGF1dG9NZXRob2QgOiB0aGlzLl9jb25maWcubWV0aG9kOw0KICAgICAgICB2YXIgb2Zmc2V0QmFzZSA9IG9mZnNldE1ldGhvZCA9PT0gT2Zmc2V0TWV0aG9kLlBPU0lUSU9OID8gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgOiAwOw0KICAgICAgICB0aGlzLl9vZmZzZXRzID0gW107DQogICAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTsNCiAgICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7DQogICAgICAgIHZhciB0YXJnZXRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSk7DQogICAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7DQogICAgICAgICAgdmFyIHRhcmdldDsNCiAgICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7DQoNCiAgICAgICAgICBpZiAodGFyZ2V0U2VsZWN0b3IpIHsNCiAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0U2VsZWN0b3IpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmICh0YXJnZXQpIHsNCiAgICAgICAgICAgIHZhciB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQoNCiAgICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkgew0KICAgICAgICAgICAgICAvLyBUT0RPIChmYXQpOiByZW1vdmUgc2tldGNoIHJlbGlhbmNlIG9uIGpRdWVyeSBwb3NpdGlvbi9vZmZzZXQNCiAgICAgICAgICAgICAgcmV0dXJuIFskJCQxKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsIHRhcmdldFNlbGVjdG9yXTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQoNCiAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7DQogICAgICAgICAgcmV0dXJuIGl0ZW07DQogICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsNCiAgICAgICAgICByZXR1cm4gYVswXSAtIGJbMF07DQogICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsNCiAgICAgICAgICBfdGhpczIuX29mZnNldHMucHVzaChpdGVtWzBdKTsNCg0KICAgICAgICAgIF90aGlzMi5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pOw0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHsNCiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTsNCiAgICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKTsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7DQogICAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBudWxsOw0KICAgICAgICB0aGlzLl9jb25maWcgPSBudWxsOw0KICAgICAgICB0aGlzLl9zZWxlY3RvciA9IG51bGw7DQogICAgICAgIHRoaXMuX29mZnNldHMgPSBudWxsOw0KICAgICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDsNCiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDsNCiAgICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gbnVsbDsNCiAgICAgIH07IC8vIFByaXZhdGUNCg0KDQogICAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7DQogICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTsNCg0KICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy50YXJnZXQgIT09ICdzdHJpbmcnKSB7DQogICAgICAgICAgdmFyIGlkID0gJCQkMShjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcpOw0KDQogICAgICAgICAgaWYgKCFpZCkgew0KICAgICAgICAgICAgaWQgPSBVdGlsLmdldFVJRChOQU1FKTsNCiAgICAgICAgICAgICQkJDEoY29uZmlnLnRhcmdldCkuYXR0cignaWQnLCBpZCk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgY29uZmlnLnRhcmdldCA9ICIjIiArIGlkOw0KICAgICAgICB9DQoNCiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7DQogICAgICAgIHJldHVybiBjb25maWc7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2dldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxUb3AoKSB7DQogICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2dldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxIZWlnaHQoKSB7DQogICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRIZWlnaHQoKSB7DQogICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDsNCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fcHJvY2VzcyA9IGZ1bmN0aW9uIF9wcm9jZXNzKCkgew0KICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0Ow0KDQogICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTsNCg0KICAgICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpOw0KDQogICAgICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkgew0KICAgICAgICAgIHRoaXMucmVmcmVzaCgpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHsNCiAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdOw0KDQogICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7DQogICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkgew0KICAgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7DQoNCiAgICAgICAgICB0aGlzLl9jbGVhcigpOw0KDQogICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgdmFyIG9mZnNldExlbmd0aCA9IHRoaXMuX29mZnNldHMubGVuZ3RoOw0KDQogICAgICAgIGZvciAodmFyIGkgPSBvZmZzZXRMZW5ndGg7IGktLTspIHsNCiAgICAgICAgICB2YXIgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV0gJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiYgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pOw0KDQogICAgICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7DQogICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUodGFyZ2V0KSB7DQogICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldDsNCg0KICAgICAgICB0aGlzLl9jbGVhcigpOw0KDQogICAgICAgIHZhciBxdWVyaWVzID0gdGhpcy5fc2VsZWN0b3Iuc3BsaXQoJywnKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycm93LWJvZHktc3R5bGUNCg0KDQogICAgICAgIHF1ZXJpZXMgPSBxdWVyaWVzLm1hcChmdW5jdGlvbiAoc2VsZWN0b3IpIHsNCiAgICAgICAgICByZXR1cm4gc2VsZWN0b3IgKyAiW2RhdGEtdGFyZ2V0PVwiIiArIHRhcmdldCArICJcIl0sIiArIChzZWxlY3RvciArICJbaHJlZj1cIiIgKyB0YXJnZXQgKyAiXCJdIik7DQogICAgICAgIH0pOw0KICAgICAgICB2YXIgJGxpbmsgPSAkJCQxKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyaWVzLmpvaW4oJywnKSkpKTsNCg0KICAgICAgICBpZiAoJGxpbmsuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BET1dOX0lURU0pKSB7DQogICAgICAgICAgJGxpbmsuY2xvc2VzdChTZWxlY3Rvci5EUk9QRE9XTikuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOw0KICAgICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGluayBhcyBhY3RpdmUNCiAgICAgICAgICAkbGluay5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsgLy8gU2V0IHRyaWdnZXJlZCBsaW5rcyBwYXJlbnRzIGFzIGFjdGl2ZQ0KICAgICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3Rvcg0KDQogICAgICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3Rvci5OQVZfTElOS1MgKyAiLCAiICsgU2VsZWN0b3IuTElTVF9JVEVNUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7IC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbQ0KDQogICAgICAgICAgJGxpbmsucGFyZW50cyhTZWxlY3Rvci5OQVZfTElTVF9HUk9VUCkucHJldihTZWxlY3Rvci5OQVZfSVRFTVMpLmNoaWxkcmVuKFNlbGVjdG9yLk5BVl9MSU5LUykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7DQogICAgICAgIH0NCg0KICAgICAgICAkJCQxKHRoaXMuX3Njcm9sbEVsZW1lbnQpLnRyaWdnZXIoRXZlbnQuQUNUSVZBVEUsIHsNCiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXQNCiAgICAgICAgfSk7DQogICAgICB9Ow0KDQogICAgICBfcHJvdG8uX2NsZWFyID0gZnVuY3Rpb24gX2NsZWFyKCkgew0KICAgICAgICB2YXIgbm9kZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fc2VsZWN0b3IpKTsNCiAgICAgICAgJCQkMShub2RlcykuZmlsdGVyKFNlbGVjdG9yLkFDVElWRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7DQogICAgICB9OyAvLyBTdGF0aWMNCg0KDQogICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7DQogICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTsNCg0KICAgICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnOw0KDQogICAgICAgICAgaWYgKCFkYXRhKSB7DQogICAgICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKTsNCiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7DQogICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiTm8gbWV0aG9kIG5hbWVkIFwiIiArIGNvbmZpZyArICJcIiIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTsNCiAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgfTsNCg0KICAgICAgX2NyZWF0ZUNsYXNzKFNjcm9sbFNweSwgbnVsbCwgW3sNCiAgICAgICAga2V5OiAiVkVSU0lPTiIsDQogICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgICAgIHJldHVybiBWRVJTSU9OOw0KICAgICAgICB9DQogICAgICB9LCB7DQogICAgICAgIGtleTogIkRlZmF1bHQiLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gRGVmYXVsdDsNCiAgICAgICAgfQ0KICAgICAgfV0pOw0KDQogICAgICByZXR1cm4gU2Nyb2xsU3B5Ow0KICAgIH0oKTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvbg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQoNCiAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHNjcm9sbFNweXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9TUFkpKTsNCiAgICAgIHZhciBzY3JvbGxTcHlzTGVuZ3RoID0gc2Nyb2xsU3B5cy5sZW5ndGg7DQoNCiAgICAgIGZvciAodmFyIGkgPSBzY3JvbGxTcHlzTGVuZ3RoOyBpLS07KSB7DQogICAgICAgIHZhciAkc3B5ID0gJCQkMShzY3JvbGxTcHlzW2ldKTsNCg0KICAgICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRzcHksICRzcHkuZGF0YSgpKTsNCiAgICAgIH0NCiAgICB9KTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBqUXVlcnkNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKi8NCg0KICAgICQkJDEuZm5bTkFNRV0gPSBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTsNCiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5Ow0KDQogICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDsNCiAgICAgIHJldHVybiBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZTsNCiAgICB9Ow0KDQogICAgcmV0dXJuIFNjcm9sbFNweTsNCiAgfSgkKTsNCg0KICAvKioNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICogQm9vdHN0cmFwICh2NC4xLjMpOiB0YWIuanMNCiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSkNCiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICovDQoNCiAgdmFyIFRhYiA9IGZ1bmN0aW9uICgkJCQxKSB7DQogICAgLyoqDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICogQ29uc3RhbnRzDQogICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICovDQogICAgdmFyIE5BTUUgPSAndGFiJzsNCiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMyc7DQogICAgdmFyIERBVEFfS0VZID0gJ2JzLnRhYic7DQogICAgdmFyIEVWRU5UX0tFWSA9ICIuIiArIERBVEFfS0VZOw0KICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJzsNCiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTsNCiAgICB2YXIgRXZlbnQgPSB7DQogICAgICBISURFOiAiaGlkZSIgKyBFVkVOVF9LRVksDQogICAgICBISURERU46ICJoaWRkZW4iICsgRVZFTlRfS0VZLA0KICAgICAgU0hPVzogInNob3ciICsgRVZFTlRfS0VZLA0KICAgICAgU0hPV046ICJzaG93biIgKyBFVkVOVF9LRVksDQogICAgICBDTElDS19EQVRBX0FQSTogImNsaWNrIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWQ0KICAgIH07DQogICAgdmFyIENsYXNzTmFtZSA9IHsNCiAgICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JywNCiAgICAgIEFDVElWRTogJ2FjdGl2ZScsDQogICAgICBESVNBQkxFRDogJ2Rpc2FibGVkJywNCiAgICAgIEZBREU6ICdmYWRlJywNCiAgICAgIFNIT1c6ICdzaG93Jw0KICAgIH07DQogICAgdmFyIFNlbGVjdG9yID0gew0KICAgICAgRFJPUERPV046ICcuZHJvcGRvd24nLA0KICAgICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsDQogICAgICBBQ1RJVkU6ICcuYWN0aXZlJywNCiAgICAgIEFDVElWRV9VTDogJz4gbGkgPiAuYWN0aXZlJywNCiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPSJ0YWIiXSwgW2RhdGEtdG9nZ2xlPSJwaWxsIl0sIFtkYXRhLXRvZ2dsZT0ibGlzdCJdJywNCiAgICAgIERST1BET1dOX1RPR0dMRTogJy5kcm9wZG93bi10b2dnbGUnLA0KICAgICAgRFJPUERPV05fQUNUSVZFX0NISUxEOiAnPiAuZHJvcGRvd24tbWVudSAuYWN0aXZlJw0KICAgICAgLyoqDQogICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAqIENsYXNzIERlZmluaXRpb24NCiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICovDQoNCiAgICB9Ow0KDQogICAgdmFyIFRhYiA9DQogICAgLyojX19QVVJFX18qLw0KICAgIGZ1bmN0aW9uICgpIHsNCiAgICAgIGZ1bmN0aW9uIFRhYihlbGVtZW50KSB7DQogICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50Ow0KICAgICAgfSAvLyBHZXR0ZXJzDQoNCg0KICAgICAgdmFyIF9wcm90byA9IFRhYi5wcm90b3R5cGU7DQoNCiAgICAgIC8vIFB1YmxpYw0KICAgICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkgew0KICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICAgIGlmICh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgJiYgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkgew0KICAgICAgICAgIHJldHVybjsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciB0YXJnZXQ7DQogICAgICAgIHZhciBwcmV2aW91czsNCiAgICAgICAgdmFyIGxpc3RFbGVtZW50ID0gJCQkMSh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKVswXTsNCiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpOw0KDQogICAgICAgIGlmIChsaXN0RWxlbWVudCkgew0KICAgICAgICAgIHZhciBpdGVtU2VsZWN0b3IgPSBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ1VMJyA/IFNlbGVjdG9yLkFDVElWRV9VTCA6IFNlbGVjdG9yLkFDVElWRTsNCiAgICAgICAgICBwcmV2aW91cyA9ICQkJDEubWFrZUFycmF5KCQkJDEobGlzdEVsZW1lbnQpLmZpbmQoaXRlbVNlbGVjdG9yKSk7DQogICAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTsNCiAgICAgICAgfQ0KDQogICAgICAgIHZhciBoaWRlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUsIHsNCiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50DQogICAgICAgIH0pOw0KICAgICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCB7DQogICAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXMNCiAgICAgICAgfSk7DQoNCiAgICAgICAgaWYgKHByZXZpb3VzKSB7DQogICAgICAgICAgJCQkMShwcmV2aW91cykudHJpZ2dlcihoaWRlRXZlbnQpOw0KICAgICAgICB9DQoNCiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7DQoNCiAgICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoc2VsZWN0b3IpIHsNCiAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KTsNCg0KICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHsNCiAgICAgICAgICB2YXIgaGlkZGVuRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJRERFTiwgew0KICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogX3RoaXMuX2VsZW1lbnQNCiAgICAgICAgICB9KTsNCiAgICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPV04sIHsNCiAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzDQogICAgICAgICAgfSk7DQogICAgICAgICAgJCQkMShwcmV2aW91cykudHJpZ2dlcihoaWRkZW5FdmVudCk7DQogICAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTsNCiAgICAgICAgfTsNCg0KICAgICAgICBpZiAodGFyZ2V0KSB7DQogICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGNvbXBsZXRlKCk7DQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHsNCiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTsNCiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7DQogICAgICB9OyAvLyBQcml2YXRlDQoNCg0KICAgICAgX3Byb3RvLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7DQogICAgICAgIHZhciBfdGhpczIgPSB0aGlzOw0KDQogICAgICAgIHZhciBhY3RpdmVFbGVtZW50czsNCg0KICAgICAgICBpZiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnKSB7DQogICAgICAgICAgYWN0aXZlRWxlbWVudHMgPSAkJCQxKGNvbnRhaW5lcikuZmluZChTZWxlY3Rvci5BQ1RJVkVfVUwpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGFjdGl2ZUVsZW1lbnRzID0gJCQkMShjb250YWluZXIpLmNoaWxkcmVuKFNlbGVjdG9yLkFDVElWRSk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgYWN0aXZlID0gYWN0aXZlRWxlbWVudHNbMF07DQogICAgICAgIHZhciBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBhY3RpdmUgJiYgJCQkMShhY3RpdmUpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTsNCg0KICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHsNCiAgICAgICAgICByZXR1cm4gX3RoaXMyLl90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjayk7DQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKGFjdGl2ZSAmJiBpc1RyYW5zaXRpb25pbmcpIHsNCiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmUpOw0KICAgICAgICAgICQkJDEoYWN0aXZlKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgY29tcGxldGUoKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgX3Byb3RvLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHsNCiAgICAgICAgaWYgKGFjdGl2ZSkgew0KICAgICAgICAgICQkJDEoYWN0aXZlKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyArICIgIiArIENsYXNzTmFtZS5BQ1RJVkUpOw0KICAgICAgICAgIHZhciBkcm9wZG93bkNoaWxkID0gJCQkMShhY3RpdmUucGFyZW50Tm9kZSkuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQpWzBdOw0KDQogICAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHsNCiAgICAgICAgICAgICQkJDEoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHsNCiAgICAgICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJCQkMShlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTsNCg0KICAgICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHsNCiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpOw0KICAgICAgICB9DQoNCiAgICAgICAgVXRpbC5yZWZsb3coZWxlbWVudCk7DQogICAgICAgICQkJDEoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpOw0KDQogICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgJCQkMShlbGVtZW50LnBhcmVudE5vZGUpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9NRU5VKSkgew0KICAgICAgICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSAkJCQxKGVsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pWzBdOw0KDQogICAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkgew0KICAgICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKSk7DQogICAgICAgICAgICAkJCQxKGRyb3Bkb3duVG9nZ2xlTGlzdCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTsNCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChjYWxsYmFjaykgew0KICAgICAgICAgIGNhbGxiYWNrKCk7DQogICAgICAgIH0NCiAgICAgIH07IC8vIFN0YXRpYw0KDQoNCiAgICAgIFRhYi5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgdmFyICR0aGlzID0gJCQkMSh0aGlzKTsNCiAgICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpOw0KDQogICAgICAgICAgaWYgKCFkYXRhKSB7DQogICAgICAgICAgICBkYXRhID0gbmV3IFRhYih0aGlzKTsNCiAgICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpOw0KICAgICAgICAgIH0NCg0KICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykgew0KICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7DQogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIk5vIG1ldGhvZCBuYW1lZCBcIiIgKyBjb25maWcgKyAiXCIiKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZGF0YVtjb25maWddKCk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgIH07DQoNCiAgICAgIF9jcmVhdGVDbGFzcyhUYWIsIG51bGwsIFt7DQogICAgICAgIGtleTogIlZFUlNJT04iLA0KICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgICAgICByZXR1cm4gVkVSU0lPTjsNCiAgICAgICAgfQ0KICAgICAgfV0pOw0KDQogICAgICByZXR1cm4gVGFiOw0KICAgIH0oKTsNCiAgICAvKioNCiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvbg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQoNCiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsNCg0KICAgICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRoaXMpLCAnc2hvdycpOw0KICAgIH0pOw0KICAgIC8qKg0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqIGpRdWVyeQ0KICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAqLw0KDQogICAgJCQkMS5mbltOQU1FXSA9IFRhYi5falF1ZXJ5SW50ZXJmYWNlOw0KICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUYWI7DQoNCiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUOw0KICAgICAgcmV0dXJuIFRhYi5falF1ZXJ5SW50ZXJmYWNlOw0KICAgIH07DQoNCiAgICByZXR1cm4gVGFiOw0KICB9KCQpOw0KDQogIC8qKg0KICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgKiBCb290c3RyYXAgKHY0LjEuMyk6IGluZGV4LmpzDQogICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpDQogICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAqLw0KDQogIChmdW5jdGlvbiAoJCQkMSkgew0KICAgIGlmICh0eXBlb2YgJCQkMSA9PT0gJ3VuZGVmaW5lZCcpIHsNCiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeS4galF1ZXJ5IG11c3QgYmUgaW5jbHVkZWQgYmVmb3JlIEJvb3RzdHJhcFwncyBKYXZhU2NyaXB0LicpOw0KICAgIH0NCg0KICAgIHZhciB2ZXJzaW9uID0gJCQkMS5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpOw0KICAgIHZhciBtaW5NYWpvciA9IDE7DQogICAgdmFyIGx0TWFqb3IgPSAyOw0KICAgIHZhciBtaW5NaW5vciA9IDk7DQogICAgdmFyIG1pblBhdGNoID0gMTsNCiAgICB2YXIgbWF4TWFqb3IgPSA0Ow0KDQogICAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikgew0KICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb290c3RyYXBcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wJyk7DQogICAgfQ0KICB9KSgkKTsNCg0KICBleHBvcnRzLlV0aWwgPSBVdGlsOw0KICBleHBvcnRzLkFsZXJ0ID0gQWxlcnQ7DQogIGV4cG9ydHMuQnV0dG9uID0gQnV0dG9uOw0KICBleHBvcnRzLkNhcm91c2VsID0gQ2Fyb3VzZWw7DQogIGV4cG9ydHMuQ29sbGFwc2UgPSBDb2xsYXBzZTsNCiAgZXhwb3J0cy5Ecm9wZG93biA9IERyb3Bkb3duOw0KICBleHBvcnRzLk1vZGFsID0gTW9kYWw7DQogIGV4cG9ydHMuUG9wb3ZlciA9IFBvcG92ZXI7DQogIGV4cG9ydHMuU2Nyb2xsc3B5ID0gU2Nyb2xsU3B5Ow0KICBleHBvcnRzLlRhYiA9IFRhYjsNCiAgZXhwb3J0cy5Ub29sdGlwID0gVG9vbHRpcDsNCg0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pOw0KDQp9KSkpOw0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLmJ1bmRsZS5qcy5tYXANCg==";
            var bytes = Convert.FromBase64String(s);
            return File(bytes, "text/javascript");
        }
    }
}